{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\n\nconst http = require(\"http\");\n\nconst crypto = require(\"crypto\");\n\nconst url = require(\"url\");\n\nconst BSON = require(\"../../bson\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\");\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    if ('kModuleError' in deps_1.aws4) {\n      return callback(deps_1.aws4['kModuleError']);\n    }\n\n    const {\n      sign\n    } = deps_1.aws4;\n\n    if (utils_1.maxWireVersion(connection) < 9) {\n      callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n\n    if (!credentials.username) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err || !tempCredentials) return callback(err);\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n      return;\n    }\n\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN; // If all three defined, include sessionToken, else include username and pass, else no credentials\n\n    const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    } : accessKeyId && secretAccessKey ? {\n      accessKeyId,\n      secretAccessKey\n    } : undefined;\n    const db = credentials.source;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: BSON.serialize({\n          r: nonce,\n          p: ASCII_N\n        }, bsonOptions)\n      };\n      connection.command(utils_1.ns(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n        if (err) return callback(err);\n        const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n\n        if (serverNonce.length !== 64) {\n          callback( // TODO(NODE-3483)\n          new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n          return;\n        }\n\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n          return;\n        }\n\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n          method: 'POST',\n          host,\n          region: deriveRegion(serverResponse.h),\n          service: 'sts',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Content-Length': body.length,\n            'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n            'X-MongoDB-GS2-CB-Flag': 'n'\n          },\n          path: '/',\n          body\n        }, awsCredentials);\n        const payload = {\n          a: options.headers.Authorization,\n          d: options.headers['X-Amz-Date']\n        };\n\n        if (sessionToken) {\n          payload.t = sessionToken;\n        }\n\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: BSON.serialize(payload, bsonOptions)\n        };\n        connection.command(utils_1.ns(`${db}.$cmd`), saslContinue, undefined, callback);\n      });\n    });\n  }\n\n}\n\nexports.MongoDBAWS = MongoDBAWS;\n\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n\n    callback(undefined, new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: defaultAuthProviders_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  } // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n\n\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, undefined, (err, res) => {\n      if (err) return callback(err);\n      done(res);\n    });\n    return;\n  } // Otherwise assume we are on an EC2 instance\n  // get a token\n\n\n  request(`${AWS_EC2_URI}/latest/api/token`, {\n    method: 'PUT',\n    json: false,\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': 30\n    }\n  }, (err, token) => {\n    if (err) return callback(err); // get role name\n\n    request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    }, (err, roleName) => {\n      if (err) return callback(err); // get temp credentials\n\n      request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, (err, creds) => {\n        if (err) return callback(err);\n        done(creds);\n      });\n    });\n  });\n}\n\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(uri, _options, callback) {\n  const options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), _options);\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n    let data = '';\n    res.on('data', d => data += d);\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        // TODO(NODE-3483)\n        callback(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n  req.on('error', err => callback(err));\n  req.end();\n}","map":{"version":3,"sources":["../../../src/cmap/auth/mongodb_aws.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBAWS = void 0;\nconst http = require(\"http\");\nconst crypto = require(\"crypto\");\nconst url = require(\"url\");\nconst BSON = require(\"../../bson\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst deps_1 = require(\"../../deps\");\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\");\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    auth(authContext, callback) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            return callback(deps_1.aws4['kModuleError']);\n        }\n        const { sign } = deps_1.aws4;\n        if (utils_1.maxWireVersion(connection) < 9) {\n            callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n            return;\n        }\n        if (!credentials.username) {\n            makeTempCredentials(credentials, (err, tempCredentials) => {\n                if (err || !tempCredentials)\n                    return callback(err);\n                authContext.credentials = tempCredentials;\n                this.auth(authContext, callback);\n            });\n            return;\n        }\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        crypto.randomBytes(32, (err, nonce) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            const saslStart = {\n                saslStart: 1,\n                mechanism: 'MONGODB-AWS',\n                payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n            };\n            connection.command(utils_1.ns(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n                if (err)\n                    return callback(err);\n                const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n                const host = serverResponse.h;\n                const serverNonce = serverResponse.s.buffer;\n                if (serverNonce.length !== 64) {\n                    callback(\n                    // TODO(NODE-3483)\n                    new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n                    return;\n                }\n                if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n                    // TODO(NODE-3483)\n                    callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n                    return;\n                }\n                if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n                    // TODO(NODE-3483)\n                    callback(new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n                    return;\n                }\n                const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n                const options = sign({\n                    method: 'POST',\n                    host,\n                    region: deriveRegion(serverResponse.h),\n                    service: 'sts',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'Content-Length': body.length,\n                        'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n                        'X-MongoDB-GS2-CB-Flag': 'n'\n                    },\n                    path: '/',\n                    body\n                }, awsCredentials);\n                const payload = {\n                    a: options.headers.Authorization,\n                    d: options.headers['X-Amz-Date']\n                };\n                if (sessionToken) {\n                    payload.t = sessionToken;\n                }\n                const saslContinue = {\n                    saslContinue: 1,\n                    conversationId: 1,\n                    payload: BSON.serialize(payload, bsonOptions)\n                };\n                connection.command(utils_1.ns(`${db}.$cmd`), saslContinue, undefined, callback);\n            });\n        });\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nfunction makeTempCredentials(credentials, callback) {\n    function done(creds) {\n        if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n            callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n            return;\n        }\n        callback(undefined, new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: defaultAuthProviders_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        }));\n    }\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n        request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, undefined, (err, res) => {\n            if (err)\n                return callback(err);\n            done(res);\n        });\n        return;\n    }\n    // Otherwise assume we are on an EC2 instance\n    // get a token\n    request(`${AWS_EC2_URI}/latest/api/token`, { method: 'PUT', json: false, headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 } }, (err, token) => {\n        if (err)\n            return callback(err);\n        // get role name\n        request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, { json: false, headers: { 'X-aws-ec2-metadata-token': token } }, (err, roleName) => {\n            if (err)\n                return callback(err);\n            // get temp credentials\n            request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, { headers: { 'X-aws-ec2-metadata-token': token } }, (err, creds) => {\n                if (err)\n                    return callback(err);\n                done(creds);\n            });\n        });\n    });\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\nfunction request(uri, _options, callback) {\n    const options = Object.assign({\n        method: 'GET',\n        timeout: 10000,\n        json: true\n    }, url.parse(uri), _options);\n    const req = http.request(options, res => {\n        res.setEncoding('utf8');\n        let data = '';\n        res.on('data', d => (data += d));\n        res.on('end', () => {\n            if (options.json === false) {\n                callback(undefined, data);\n                return;\n            }\n            try {\n                const parsed = JSON.parse(data);\n                callback(undefined, parsed);\n            }\n            catch (err) {\n                // TODO(NODE-3483)\n                callback(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n            }\n        });\n    });\n    req.on('error', err => callback(err));\n    req.end();\n}\n//# sourceMappingURL=mongodb_aws.js.map"]},"metadata":{},"sourceType":"script"}