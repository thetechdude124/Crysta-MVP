{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst count_1 = require(\"../operations/count\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst find_1 = require(\"../operations/find\");\n\nconst utils_1 = require(\"../utils\");\n\nconst sort_1 = require(\"../sort\");\n\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\n\n\nconst kFilter = Symbol('filter');\n/** @internal */\n\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\n\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\n\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(topology, namespace, filter, options = {}) {\n    super(topology, namespace, options);\n    this[kFilter] = filter || {};\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = sort_1.formatSort(options.sort);\n    }\n  }\n\n  clone() {\n    const clonedOptions = utils_1.mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.topology, this.namespace, this[kFilter], { ...clonedOptions\n    });\n  }\n\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    execute_operation_1.executeOperation(this.topology, findOperation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      } // TODO: NODE-2882\n\n\n      callback(undefined, {\n        server: findOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        return this.close(callback);\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err); // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n\n  count(options, callback) {\n    if (typeof options === 'boolean') {\n      throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return execute_operation_1.executeOperation(this.topology, new count_1.CountOperation(this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      ...options\n    }), callback);\n  }\n\n  explain(verbosity, callback) {\n    if (typeof verbosity === 'function') callback = verbosity, verbosity = true;\n    if (verbosity == null) verbosity = true;\n    return execute_operation_1.executeOperation(this.topology, new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      explain: verbosity\n    }), callback);\n  }\n  /** Set the cursor query */\n\n\n  filter(filter) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n\n\n  hint(hint) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n\n\n  min(min) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n\n\n  max(max) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n\n\n  returnKey(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n\n\n  showRecordId(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n\n\n  addQueryModifier(name, value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (name[0] !== '$') {\n      throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    } // Strip of the $\n\n\n    const field = name.substr(1); // NOTE: consider some TS magic for this\n\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = sort_1.formatSort(value);\n        break;\n\n      case 'query':\n        this[kFilter] = value;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n\n      default:\n        throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n\n\n  comment(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n\n\n  maxAwaitTimeMS(value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n\n\n  project(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n\n\n  sort(sort, direction) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = sort_1.formatSort(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n\n\n  allowDiskUse() {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n\n\n  collation(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n\n\n  limit(value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n\n\n  skip(value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n\n}\n\nexports.FindCursor = FindCursor;","map":{"version":3,"sources":["../../src/cursor/find_cursor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindCursor = exports.FLAGS = void 0;\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst utils_1 = require(\"../utils\");\nconst sort_1 = require(\"../sort\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(topology, namespace, filter, options = {}) {\n        super(topology, namespace, options);\n        this[kFilter] = filter || {};\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = sort_1.formatSort(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = utils_1.mergeOptions({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.topology, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    _initialize(session, callback) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        execute_operation_1.executeOperation(this.topology, findOperation, (err, response) => {\n            if (err || response == null)\n                return callback(err);\n            // TODO: We only need this for legacy queries that do not support `limit`, maybe\n            //       the value should only be saved in those cases.\n            if (response.cursor) {\n                this[kNumReturned] = response.cursor.firstBatch.length;\n            }\n            else {\n                this[kNumReturned] = response.documents ? response.documents.length : 0;\n            }\n            // TODO: NODE-2882\n            callback(undefined, { server: findOperation.server, session, response });\n        });\n    }\n    /** @internal */\n    _getMore(batchSize, callback) {\n        // NOTE: this is to support client provided limits in pre-command servers\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            const limit = this[kBuiltOptions].limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                return this.close(callback);\n            }\n        }\n        super._getMore(batchSize, (err, response) => {\n            if (err)\n                return callback(err);\n            // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n            if (response) {\n                this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n            }\n            callback(undefined, response);\n        });\n    }\n    count(options, callback) {\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return execute_operation_1.executeOperation(this.topology, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }), callback);\n    }\n    explain(verbosity, callback) {\n        if (typeof verbosity === 'function')\n            (callback = verbosity), (verbosity = true);\n        if (verbosity == null)\n            verbosity = true;\n        return execute_operation_1.executeOperation(this.topology, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity\n        }), callback);\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this[kBuiltOptions].comment = value;\n                break;\n            case 'explain':\n                this[kBuiltOptions].explain = value;\n                break;\n            case 'hint':\n                this[kBuiltOptions].hint = value;\n                break;\n            case 'max':\n                this[kBuiltOptions].max = value;\n                break;\n            case 'maxTimeMS':\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case 'min':\n                this[kBuiltOptions].min = value;\n                break;\n            case 'orderby':\n                this[kBuiltOptions].sort = sort_1.formatSort(value);\n                break;\n            case 'query':\n                this[kFilter] = value;\n                break;\n            case 'returnKey':\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this[kBuiltOptions].sort = sort_1.formatSort(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse() {\n        abstract_cursor_1.assertUninitialized(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map"]},"metadata":{},"sourceType":"script"}