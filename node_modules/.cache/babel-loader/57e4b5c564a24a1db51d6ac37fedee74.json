{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\n\nconst error_1 = require(\"./error\");\n/** @public */\n\n\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://docs.mongodb.com/manual/core/read-preference/\n */\n\nclass ReadPreference {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode, tags, options) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options === null || options === void 0 ? void 0 : options.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n\n      this.maxStalenessSeconds = options.maxStalenessSeconds; // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n\n      this.minWireVersion = 5;\n    }\n\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  } // Support the deprecated `preference` property introduced in the porcelain layer\n\n\n  get preference() {\n    return this.mode;\n  }\n\n  static fromString(mode) {\n    return new ReadPreference(mode);\n  }\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n\n\n  static fromOptions(options) {\n    var _a, _b, _c;\n\n    if (!options) return;\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : (_b = options.session) === null || _b === void 0 ? void 0 : _b.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n\n    if (readPreference == null) {\n      return;\n    }\n\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags);\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, (_c = readPreference.tags) !== null && _c !== void 0 ? _c : readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n\n    return readPreference;\n  }\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n\n\n  static translate(options) {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n\n    return options;\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n\n\n  static isValid(mode) {\n    const VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n    return VALID_MODES.has(mode);\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n\n\n  isValid(mode) {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n  /**\n   * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n   *\n   * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n   */\n\n\n  slaveOk() {\n    const NEEDS_SLAVEOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n    return NEEDS_SLAVEOK.has(this.mode);\n  }\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n\n\n  equals(readPreference) {\n    return readPreference.mode === this.mode;\n  }\n  /** Return JSON representation */\n\n\n  toJSON() {\n    const readPreference = {\n      mode: this.mode\n    };\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n\n}\n\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);","map":{"version":3,"sources":["../src/read_preference.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://docs.mongodb.com/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options === null || options === void 0 ? void 0 : options.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options !== null && options !== void 0 ? options : {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        var _a, _b, _c;\n        if (!options)\n            return;\n        const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : (_b = options.session) === null || _b === void 0 ? void 0 : _b.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags);\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, (_c = readPreference.tags) !== null && _c !== void 0 ? _c : readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n     *\n     * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    slaveOk() {\n        const NEEDS_SLAVEOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SLAVEOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\n//# sourceMappingURL=read_preference.js.map"]},"metadata":{},"sourceType":"script"}