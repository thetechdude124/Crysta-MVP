{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst error_1 = require(\"./error\");\n\nconst bson_1 = require(\"./bson\");\n\nconst connect_1 = require(\"./operations/connect\");\n\nlet AutoEncrypterClass;\n/** @internal */\n\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\n\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    options.autoEncryption.bson = Object.create(null); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.serialize = bson_1.serialize; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.deserialize = bson_1.deserialize;\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client, uri, options) {\n    if (!this[kInternalClient]) {\n      const clonedOptions = {};\n\n      for (const key of Object.keys(options)) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n      this[kInternalClient] = new mongo_client_1.MongoClient(uri, clonedOptions);\n\n      for (const eventName of connect_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          this[kInternalClient].on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        this[kInternalClient].on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n\n    return this[kInternalClient];\n  }\n\n  connectInternalClient(callback) {\n    if (this.needsConnecting) {\n      this.needsConnecting = false;\n      return this[kInternalClient].connect(callback);\n    }\n\n    return callback();\n  }\n\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      if (this[kInternalClient] && client !== this[kInternalClient]) {\n        return this[kInternalClient].close(force, callback);\n      }\n\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt() {\n    let mongodbClientEncryption = undefined;\n\n    try {\n      // Ensure you always wrap an optional require in the try block NODE-3199\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch (err) {\n      throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n\n}\n\nexports.Encrypter = Encrypter;","map":{"version":3,"sources":["../src/encrypter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst mongo_client_1 = require(\"./mongo_client\");\nconst error_1 = require(\"./error\");\nconst bson_1 = require(\"./bson\");\nconst connect_1 = require(\"./operations/connect\");\nlet AutoEncrypterClass;\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        options.autoEncryption.bson = Object.create(null);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.autoEncryption.bson.serialize = bson_1.serialize;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.autoEncryption.bson.deserialize = bson_1.deserialize;\n        this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        if (!this[kInternalClient]) {\n            const clonedOptions = {};\n            for (const key of Object.keys(options)) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            this[kInternalClient] = new mongo_client_1.MongoClient(uri, clonedOptions);\n            for (const eventName of connect_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    this[kInternalClient].on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                this[kInternalClient].on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return this[kInternalClient];\n    }\n    connectInternalClient(callback) {\n        if (this.needsConnecting) {\n            this.needsConnecting = false;\n            return this[kInternalClient].connect(callback);\n        }\n        return callback();\n    }\n    close(client, force, callback) {\n        this.autoEncrypter.teardown(!!force, e => {\n            if (this[kInternalClient] && client !== this[kInternalClient]) {\n                return this[kInternalClient].close(force, callback);\n            }\n            callback(e);\n        });\n    }\n    static checkForMongoCrypt() {\n        let mongodbClientEncryption = undefined;\n        try {\n            // Ensure you always wrap an optional require in the try block NODE-3199\n            mongodbClientEncryption = require('mongodb-client-encryption');\n        }\n        catch (err) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project');\n        }\n        AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map"]},"metadata":{},"sourceType":"script"}