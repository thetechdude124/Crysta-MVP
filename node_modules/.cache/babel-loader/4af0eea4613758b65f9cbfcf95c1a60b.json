{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\n\nclass ServerDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, address, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n\n}\n\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\n\nclass ServerOpeningEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n\n}\n\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\n\nclass ServerClosedEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n\n}\n\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\n\nclass TopologyDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n\n}\n\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\n\nclass TopologyOpeningEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n\n}\n\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\n\nclass TopologyClosedEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n\n}\n\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatStartedEvent {\n  /** @internal */\n  constructor(connectionId) {\n    this.connectionId = connectionId;\n  }\n\n}\n\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s ismaster succeeds.\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatSucceededEvent {\n  /** @internal */\n  constructor(connectionId, duration, reply) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply;\n  }\n\n}\n\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatFailedEvent {\n  /** @internal */\n  constructor(connectionId, duration, failure) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n  }\n\n}\n\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;","map":{"version":3,"sources":["../../src/sdam/events.ts"],"names":[],"mappings":";;;;;;AAIA;;;;AAIG;;AACH,MAAa,6BAAb,CAA0C;AAUxC;AACA,EAAA,WAAA,CACE,UADF,EAEE,OAFF,EAGE,mBAHF,EAIE,cAJF,EAImC;AAEjC,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,mBAAL,GAA2B,mBAA3B;AACA,SAAK,cAAL,GAAsB,cAAtB;AACD;;AArBuC;;AAA1C,OAAA,CAAA,6BAAA,GAAA,6BAAA;AAwBA;;;;AAIG;;AACH,MAAa,kBAAb,CAA+B;AAM7B;AACA,EAAA,WAAA,CAAY,UAAZ,EAAgC,OAAhC,EAA+C;AAC7C,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAV4B;;AAA/B,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAaA;;;;AAIG;;AACH,MAAa,iBAAb,CAA8B;AAM5B;AACA,EAAA,WAAA,CAAY,UAAZ,EAAgC,OAAhC,EAA+C;AAC7C,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAV2B;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAaA;;;;AAIG;;AACH,MAAa,+BAAb,CAA4C;AAQ1C;AACA,EAAA,WAAA,CACE,UADF,EAEE,mBAFF,EAGE,cAHF,EAGqC;AAEnC,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,mBAAL,GAA2B,mBAA3B;AACA,SAAK,cAAL,GAAsB,cAAtB;AACD;;AAjByC;;AAA5C,OAAA,CAAA,+BAAA,GAAA,+BAAA;AAoBA;;;;AAIG;;AACH,MAAa,oBAAb,CAAiC;AAI/B;AACA,EAAA,WAAA,CAAY,UAAZ,EAA8B;AAC5B,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAP8B;;AAAjC,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAUA;;;;AAIG;;AACH,MAAa,mBAAb,CAAgC;AAI9B;AACA,EAAA,WAAA,CAAY,UAAZ,EAA8B;AAC5B,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAP6B;;AAAhC,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,2BAAb,CAAwC;AAItC;AACA,EAAA,WAAA,CAAY,YAAZ,EAAgC;AAC9B,SAAK,YAAL,GAAoB,YAApB;AACD;;AAPqC;;AAAxC,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAUA;;;;AAIG;;AACH,MAAa,6BAAb,CAA0C;AAQxC;AACA,EAAA,WAAA,CAAY,YAAZ,EAAkC,QAAlC,EAAoD,KAApD,EAAmE;AACjE,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,KAAL,GAAa,KAAb;AACD;;AAbuC;;AAA1C,OAAA,CAAA,6BAAA,GAAA,6BAAA;AAgBA;;;;AAIG;;AACH,MAAa,0BAAb,CAAuC;AAQrC;AACA,EAAA,WAAA,CAAY,YAAZ,EAAkC,QAAlC,EAAoD,OAApD,EAAkE;AAChE,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAboC;;AAAvC,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId) {\n        this.connectionId = connectionId;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s ismaster succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply) {\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure) {\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"script"}