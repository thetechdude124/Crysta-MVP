{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\n\nexports.ReadConcernLevel = Object.freeze({\n  local: 'local',\n  majority: 'majority',\n  linearizable: 'linearizable',\n  available: 'available',\n  snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\n\nclass ReadConcern {\n  /** Constructs a ReadConcern from the read concern level.*/\n  constructor(level) {\n    var _a;\n    /**\n     * A spec test exists that allows level to be any string.\n     * \"invalid readConcern with out stage\"\n     * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n     * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n     */\n\n\n    this.level = (_a = exports.ReadConcernLevel[level]) !== null && _a !== void 0 ? _a : level;\n  }\n  /**\n   * Construct a ReadConcern given an options object.\n   *\n   * @param options - The options object from which to extract the write concern.\n   */\n\n\n  static fromOptions(options) {\n    if (options == null) {\n      return;\n    }\n\n    if (options.readConcern) {\n      const {\n        readConcern\n      } = options;\n\n      if (readConcern instanceof ReadConcern) {\n        return readConcern;\n      } else if (typeof readConcern === 'string') {\n        return new ReadConcern(readConcern);\n      } else if ('level' in readConcern && readConcern.level) {\n        return new ReadConcern(readConcern.level);\n      }\n    }\n\n    if (options.level) {\n      return new ReadConcern(options.level);\n    }\n  }\n\n  static get MAJORITY() {\n    return exports.ReadConcernLevel.majority;\n  }\n\n  static get AVAILABLE() {\n    return exports.ReadConcernLevel.available;\n  }\n\n  static get LINEARIZABLE() {\n    return exports.ReadConcernLevel.linearizable;\n  }\n\n  static get SNAPSHOT() {\n    return exports.ReadConcernLevel.snapshot;\n  }\n\n  toJSON() {\n    return {\n      level: this.level\n    };\n  }\n\n}\n\nexports.ReadConcern = ReadConcern;","map":{"version":3,"sources":["../src/read_concern.ts"],"names":[],"mappings":";;;;;;AAEA;;AACa,OAAA,CAAA,gBAAA,GAAmB,MAAM,CAAC,MAAP,CAAc;AAC5C,EAAA,KAAK,EAAE,OADqC;AAE5C,EAAA,QAAQ,EAAE,UAFkC;AAG5C,EAAA,YAAY,EAAE,cAH8B;AAI5C,EAAA,SAAS,EAAE,WAJiC;AAK5C,EAAA,QAAQ,EAAE;AALkC,CAAd,CAAnB;AAcb;;;;;;AAMG;;AACH,MAAa,WAAb,CAAwB;AAGtB;AACA,EAAA,WAAA,CAAY,KAAZ,EAAmC;;AACjC;;;;;AAKG;;;AACH,SAAK,KAAL,GAAa,CAAA,EAAA,GAAA,OAAA,CAAA,gBAAA,CAAiB,KAAjB,CAAA,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,EAAvB,GAA2B,KAAxC;AACD;AAED;;;;AAIG;;;AACe,SAAX,WAAW,CAAC,OAAD,EAGjB;AACC,QAAI,OAAO,IAAI,IAAf,EAAqB;AACnB;AACD;;AAED,QAAI,OAAO,CAAC,WAAZ,EAAyB;AACvB,YAAM;AAAE,QAAA;AAAF,UAAkB,OAAxB;;AACA,UAAI,WAAW,YAAY,WAA3B,EAAwC;AACtC,eAAO,WAAP;AACD,OAFD,MAEO,IAAI,OAAO,WAAP,KAAuB,QAA3B,EAAqC;AAC1C,eAAO,IAAI,WAAJ,CAAgB,WAAhB,CAAP;AACD,OAFM,MAEA,IAAI,WAAW,WAAX,IAA0B,WAAW,CAAC,KAA1C,EAAiD;AACtD,eAAO,IAAI,WAAJ,CAAgB,WAAW,CAAC,KAA5B,CAAP;AACD;AACF;;AAED,QAAI,OAAO,CAAC,KAAZ,EAAmB;AACjB,aAAO,IAAI,WAAJ,CAAgB,OAAO,CAAC,KAAxB,CAAP;AACD;AACF;;AAEkB,aAAR,QAAQ,GAAA;AACjB,WAAO,OAAA,CAAA,gBAAA,CAAiB,QAAxB;AACD;;AAEmB,aAAT,SAAS,GAAA;AAClB,WAAO,OAAA,CAAA,gBAAA,CAAiB,SAAxB;AACD;;AAEsB,aAAZ,YAAY,GAAA;AACrB,WAAO,OAAA,CAAA,gBAAA,CAAiB,YAAxB;AACD;;AAEkB,aAAR,QAAQ,GAAA;AACjB,WAAO,OAAA,CAAA,gBAAA,CAAiB,QAAxB;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO;AAAE,MAAA,KAAK,EAAE,KAAK;AAAd,KAAP;AACD;;AA7DqB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        var _a;\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = (_a = exports.ReadConcernLevel[level]) !== null && _a !== void 0 ? _a : level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map"]},"metadata":{},"sourceType":"script"}