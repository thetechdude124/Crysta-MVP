{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GSSAPI = void 0;\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst error_1 = require(\"../../error\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst dns = require(\"dns\");\n\nclass GSSAPI extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (credentials == null) return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n    const {\n      username\n    } = credentials;\n\n    function externalCommand(command, cb) {\n      return connection.command(utils_1.ns('$external.$cmd'), command, undefined, cb);\n    }\n\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, result) => {\n          if (err) return callback(err);\n          if (result == null) return callback();\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n              if (err) return callback(err);\n              if (result == null) return callback();\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n}\n\nexports.GSSAPI = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  var _a;\n\n  const {\n    hostAddress\n  } = authContext.options;\n  const {\n    credentials\n  } = authContext;\n\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n  }\n\n  if ('kModuleError' in deps_1.Kerberos) {\n    return callback(deps_1.Kerberos['kModuleError']);\n  }\n\n  const {\n    initializeClient\n  } = deps_1.Kerberos;\n  const {\n    username,\n    password\n  } = credentials;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n  performGssapiCanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`;\n\n    if ('SERVICE_REALM' in mechanismProperties) {\n      spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n\n    initializeClient(spn, initOptions, (err, client) => {\n      // TODO(NODE-3483)\n      if (err) return callback(new error_1.MongoRuntimeError(err));\n      callback(undefined, client);\n    });\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\n\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err); // Adjust number of retries and call step again\n\n    if (err) return negotiate(client, retries - 1, payload, callback); // Return the payload\n\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err); // Wrap the response\n\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err); // Return the payload\n\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  if (!mechanismProperties.gssapiCanonicalizeHostName) return callback(undefined, host); // Attempt to resolve the host name\n\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err); // Get the first resolve host id\n\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}","map":{"version":3,"sources":["../../../src/cmap/auth/gssapi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GSSAPI = void 0;\nconst auth_provider_1 = require(\"./auth_provider\");\nconst error_1 = require(\"../../error\");\nconst deps_1 = require(\"../../deps\");\nconst utils_1 = require(\"../../utils\");\nconst dns = require(\"dns\");\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    auth(authContext, callback) {\n        const { connection, credentials } = authContext;\n        if (credentials == null)\n            return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n        const { username } = credentials;\n        function externalCommand(command, cb) {\n            return connection.command(utils_1.ns('$external.$cmd'), command, undefined, cb);\n        }\n        makeKerberosClient(authContext, (err, client) => {\n            if (err)\n                return callback(err);\n            if (client == null)\n                return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n            client.step('', (err, payload) => {\n                if (err)\n                    return callback(err);\n                externalCommand(saslStart(payload), (err, result) => {\n                    if (err)\n                        return callback(err);\n                    if (result == null)\n                        return callback();\n                    negotiate(client, 10, result.payload, (err, payload) => {\n                        if (err)\n                            return callback(err);\n                        externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n                            if (err)\n                                return callback(err);\n                            if (result == null)\n                                return callback();\n                            finalize(client, username, result.payload, (err, payload) => {\n                                if (err)\n                                    return callback(err);\n                                externalCommand({\n                                    saslContinue: 1,\n                                    conversationId: result.conversationId,\n                                    payload\n                                }, (err, result) => {\n                                    if (err)\n                                        return callback(err);\n                                    callback(undefined, result);\n                                });\n                            });\n                        });\n                    });\n                });\n            });\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nfunction makeKerberosClient(authContext, callback) {\n    var _a;\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n    }\n    if ('kModuleError' in deps_1.Kerberos) {\n        return callback(deps_1.Kerberos['kModuleError']);\n    }\n    const { initializeClient } = deps_1.Kerberos;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n    performGssapiCanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n        if (err)\n            return callback(err);\n        const initOptions = {};\n        if (password != null) {\n            Object.assign(initOptions, { user: username, password: password });\n        }\n        let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`;\n        if ('SERVICE_REALM' in mechanismProperties) {\n            spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n        }\n        initializeClient(spn, initOptions, (err, client) => {\n            // TODO(NODE-3483)\n            if (err)\n                return callback(new error_1.MongoRuntimeError(err));\n            callback(undefined, client);\n        });\n    });\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nfunction negotiate(client, retries, payload, callback) {\n    client.step(payload, (err, response) => {\n        // Retries exhausted, raise error\n        if (err && retries === 0)\n            return callback(err);\n        // Adjust number of retries and call step again\n        if (err)\n            return negotiate(client, retries - 1, payload, callback);\n        // Return the payload\n        callback(undefined, response || '');\n    });\n}\nfunction finalize(client, user, payload, callback) {\n    // GSS Client Unwrap\n    client.unwrap(payload, (err, response) => {\n        if (err)\n            return callback(err);\n        // Wrap the response\n        client.wrap(response || '', { user }, (err, wrapped) => {\n            if (err)\n                return callback(err);\n            // Return the payload\n            callback(undefined, wrapped);\n        });\n    });\n}\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n    if (!mechanismProperties.gssapiCanonicalizeHostName)\n        return callback(undefined, host);\n    // Attempt to resolve the host name\n    dns.resolveCname(host, (err, r) => {\n        if (err)\n            return callback(err);\n        // Get the first resolve host id\n        if (Array.isArray(r) && r.length > 0) {\n            return callback(undefined, r[0]);\n        }\n        callback(undefined, host);\n    });\n}\n//# sourceMappingURL=gssapi.js.map"]},"metadata":{},"sourceType":"script"}