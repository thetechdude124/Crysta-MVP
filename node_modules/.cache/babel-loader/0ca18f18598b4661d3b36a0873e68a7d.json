{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HEARTBEAT_EVENTS = exports.Server = void 0;\n\nconst logger_1 = require(\"../logger\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst monitor_1 = require(\"./monitor\");\n\nconst transactions_1 = require(\"../transactions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst error_1 = require(\"../error\");\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_2 = require(\"../utils\");\n\nconst stateTransition = utils_1.makeStateMachine({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kMonitor = Symbol('monitor');\n/** @internal */\n\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.s = {\n      description,\n      options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology,\n      pool: new connection_pool_1.ConnectionPool(poolOptions)\n    };\n\n    for (const event of [...connection_pool_1.CMAP_EVENTS, ...connection_1.APM_EVENTS]) {\n      this.s.pool.on(event, e => this.emit(event, e));\n    }\n\n    this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    }); // monitoring is disabled in load balancing mode\n\n    if (this.loadBalanced) return; // create the monitor\n\n    this[kMonitor] = new monitor_1.Monitor(this, this.s.options);\n\n    for (const event of exports.HEARTBEAT_EVENTS) {\n      this[kMonitor].on(event, e => this.emit(event, e));\n    }\n\n    this[kMonitor].on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n    this[kMonitor].on('resetServer', error => markServerUnknown(this, error));\n    this[kMonitor].on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n  }\n\n  get loadBalanced() {\n    return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n\n\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n\n    if (!this.loadBalanced) {\n      this[kMonitor].connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n\n\n  destroy(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({}, {\n      force: false\n    }, options);\n\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this[kMonitor].close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n\n\n  requestCheck() {\n    if (!this.loadBalanced) {\n      this[kMonitor].requestCheck();\n    }\n  }\n\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      callback = options, options = {}, options = options !== null && options !== void 0 ? options : {};\n    }\n\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    } // Clone the options\n\n\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    }); // error if collation not supported\n\n    if (utils_1.collationNotSupported(this, cmd)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection; // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.s.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, cb));\n    }, callback);\n  }\n  /**\n   * Execute a query against the server\n   * @internal\n   */\n\n\n  query(ns, cmd, options, callback) {\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection(undefined, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.query(ns, cmd, options, makeOperationHandler(this, conn, cmd, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a `getMore` against the server\n   * @internal\n   */\n\n\n  getMore(ns, cursorId, options, callback) {\n    var _a;\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.getMore(ns, cursorId, options, makeOperationHandler(this, conn, {}, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a `killCursors` command against the server\n   * @internal\n   */\n\n\n  killCursors(ns, cursorIds, options, callback) {\n    var _a;\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback(new error_1.MongoServerClosedError());\n      }\n\n      return;\n    }\n\n    this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.killCursors(ns, cursorIds, options, makeOperationHandler(this, conn, {}, undefined, cb));\n    }, callback);\n  }\n\n}\n\nexports.Server = Server;\n/** @event */\n\nServer.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @event */\n\nServer.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @event */\n\nServer.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\n/** @event */\n\nServer.CONNECT = 'connect';\n/** @event */\n\nServer.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @event */\n\nServer.CLOSED = 'closed';\n/** @event */\n\nServer.ENDED = 'ended';\nexports.HEARTBEAT_EVENTS = [Server.SERVER_HEARTBEAT_STARTED, Server.SERVER_HEARTBEAT_SUCCEEDED, Server.SERVER_HEARTBEAT_FAILED];\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  get() {\n    return this.s.topology.clusterTime;\n  },\n\n  set(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n});\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    server[kMonitor].reset();\n  }\n\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error,\n    topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n  }));\n}\n\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return server_description_1.compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !transactions_1.isTransactionCommand(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\n\n\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(err, result) {\n    if (err && !connectionIsStale(server.s.pool, connection)) {\n      if (err instanceof error_1.MongoNetworkError) {\n        if (session && !session.hasEnded && session.serverSession) {\n          session.serverSession.isDirty = true;\n        } // inActiveTransaction check handles commit and abort.\n\n\n        if (inActiveTransaction(session, cmd) && !err.hasErrorLabel('TransientTransactionError')) {\n          err.addErrorLabel('TransientTransactionError');\n        }\n\n        if ((isRetryableWritesEnabled(server.s.topology) || transactions_1.isTransactionCommand(cmd)) && utils_2.supportsRetryableWrites(server) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (!(err instanceof error_1.MongoNetworkTimeoutError) || error_1.isNetworkErrorBeforeHandshake(err)) {\n          // In load balanced mode we never mark the server as unknown and always\n          // clear for the specific service id.\n          server.s.pool.clear(connection.serviceId);\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, err);\n          }\n        }\n      } else {\n        // if pre-4.4 server, then add error label if its a retryable write error\n        if ((isRetryableWritesEnabled(server.s.topology) || transactions_1.isTransactionCommand(cmd)) && utils_1.maxWireVersion(server) < 9 && error_1.isRetryableWriteError(err) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (error_1.isSDAMUnrecoverableError(err)) {\n          if (shouldHandleStateChangeError(server, err)) {\n            if (utils_1.maxWireVersion(server) <= 7 || error_1.isNodeShuttingDownError(err)) {\n              server.s.pool.clear(connection.serviceId);\n            }\n\n            if (!server.loadBalanced) {\n              markServerUnknown(server, err);\n              process.nextTick(() => server.requestCheck());\n            }\n          }\n        }\n      }\n\n      if (session && session.isPinned && err.hasErrorLabel('TransientTransactionError')) {\n        session.unpin({\n          force: true\n        });\n      }\n    }\n\n    callback(err, result);\n  };\n}","map":{"version":3,"sources":["../../src/sdam/server.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HEARTBEAT_EVENTS = exports.Server = void 0;\nconst logger_1 = require(\"../logger\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst server_description_1 = require(\"./server_description\");\nconst monitor_1 = require(\"./monitor\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst error_1 = require(\"../error\");\nconst connection_1 = require(\"../cmap/connection\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_2 = require(\"../utils\");\nconst stateTransition = utils_1.makeStateMachine({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kMonitor = Symbol('monitor');\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.s = {\n            description,\n            options,\n            logger: new logger_1.Logger('Server'),\n            state: common_1.STATE_CLOSED,\n            topology,\n            pool: new connection_pool_1.ConnectionPool(poolOptions)\n        };\n        for (const event of [...connection_pool_1.CMAP_EVENTS, ...connection_1.APM_EVENTS]) {\n            this.s.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        // monitoring is disabled in load balancing mode\n        if (this.loadBalanced)\n            return;\n        // create the monitor\n        this[kMonitor] = new monitor_1.Monitor(this, this.s.options);\n        for (const event of exports.HEARTBEAT_EVENTS) {\n            this[kMonitor].on(event, (e) => this.emit(event, e));\n        }\n        this[kMonitor].on('resetConnectionPool', () => {\n            this.s.pool.clear();\n        });\n        this[kMonitor].on('resetServer', (error) => markServerUnknown(this, error));\n        this[kMonitor].on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n    }\n    get loadBalanced() {\n        return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this[kMonitor].connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = Object.assign({}, { force: false }, options);\n        if (this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this[kMonitor].close();\n        }\n        this.s.pool.close(options, err => {\n            stateTransition(this, common_1.STATE_CLOSED);\n            this.emit('closed');\n            if (typeof callback === 'function') {\n                callback(err);\n            }\n        });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this[kMonitor].requestCheck();\n        }\n    }\n    command(ns, cmd, options, callback) {\n        if (typeof options === 'function') {\n            (callback = options), (options = {}), (options = options !== null && options !== void 0 ? options : {});\n        }\n        if (callback == null) {\n            throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n        }\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n        // error if collation not supported\n        if (utils_1.collationNotSupported(this, cmd)) {\n            callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n            return;\n        }\n        const session = finalOptions.session;\n        const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection;\n        // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n        //       (and prevent them from being checked back in) at the point of operation execution.\n        //       This should be considered as part of the work for NODE-2882\n        if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n            this.s.pool.checkOut((err, checkedOut) => {\n                if (err || checkedOut == null) {\n                    if (callback)\n                        return callback(err);\n                    return;\n                }\n                session.pin(checkedOut);\n                this.command(ns, cmd, finalOptions, callback);\n            });\n            return;\n        }\n        this.s.pool.withConnection(conn, (err, conn, cb) => {\n            if (err || !conn) {\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, cb));\n        }, callback);\n    }\n    /**\n     * Execute a query against the server\n     * @internal\n     */\n    query(ns, cmd, options, callback) {\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        this.s.pool.withConnection(undefined, (err, conn, cb) => {\n            if (err || !conn) {\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.query(ns, cmd, options, makeOperationHandler(this, conn, cmd, options, cb));\n        }, callback);\n    }\n    /**\n     * Execute a `getMore` against the server\n     * @internal\n     */\n    getMore(ns, cursorId, options, callback) {\n        var _a;\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n            if (err || !conn) {\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.getMore(ns, cursorId, options, makeOperationHandler(this, conn, {}, options, cb));\n        }, callback);\n    }\n    /**\n     * Execute a `killCursors` command against the server\n     * @internal\n     */\n    killCursors(ns, cursorIds, options, callback) {\n        var _a;\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === 'function') {\n                callback(new error_1.MongoServerClosedError());\n            }\n            return;\n        }\n        this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n            if (err || !conn) {\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.killCursors(ns, cursorIds, options, makeOperationHandler(this, conn, {}, undefined, cb));\n        }, callback);\n    }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\n/** @event */\nServer.CONNECT = 'connect';\n/** @event */\nServer.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @event */\nServer.CLOSED = 'closed';\n/** @event */\nServer.ENDED = 'ended';\nexports.HEARTBEAT_EVENTS = [\n    Server.SERVER_HEARTBEAT_STARTED,\n    Server.SERVER_HEARTBEAT_SUCCEEDED,\n    Server.SERVER_HEARTBEAT_FAILED\n];\nObject.defineProperty(Server.prototype, 'clusterTime', {\n    get() {\n        return this.s.topology.clusterTime;\n    },\n    set(clusterTime) {\n        this.s.topology.clusterTime = clusterTime;\n    }\n});\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server[kMonitor].reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n        error,\n        topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n    }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return server_description_1.compareTopologyVersion(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !transactions_1.isTransactionCommand(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n    const session = options === null || options === void 0 ? void 0 : options.session;\n    return function handleOperationResult(err, result) {\n        if (err && !connectionIsStale(server.s.pool, connection)) {\n            if (err instanceof error_1.MongoNetworkError) {\n                if (session && !session.hasEnded && session.serverSession) {\n                    session.serverSession.isDirty = true;\n                }\n                // inActiveTransaction check handles commit and abort.\n                if (inActiveTransaction(session, cmd) && !err.hasErrorLabel('TransientTransactionError')) {\n                    err.addErrorLabel('TransientTransactionError');\n                }\n                if ((isRetryableWritesEnabled(server.s.topology) || transactions_1.isTransactionCommand(cmd)) &&\n                    utils_2.supportsRetryableWrites(server) &&\n                    !inActiveTransaction(session, cmd)) {\n                    err.addErrorLabel('RetryableWriteError');\n                }\n                if (!(err instanceof error_1.MongoNetworkTimeoutError) || error_1.isNetworkErrorBeforeHandshake(err)) {\n                    // In load balanced mode we never mark the server as unknown and always\n                    // clear for the specific service id.\n                    server.s.pool.clear(connection.serviceId);\n                    if (!server.loadBalanced) {\n                        markServerUnknown(server, err);\n                    }\n                }\n            }\n            else {\n                // if pre-4.4 server, then add error label if its a retryable write error\n                if ((isRetryableWritesEnabled(server.s.topology) || transactions_1.isTransactionCommand(cmd)) &&\n                    utils_1.maxWireVersion(server) < 9 &&\n                    error_1.isRetryableWriteError(err) &&\n                    !inActiveTransaction(session, cmd)) {\n                    err.addErrorLabel('RetryableWriteError');\n                }\n                if (error_1.isSDAMUnrecoverableError(err)) {\n                    if (shouldHandleStateChangeError(server, err)) {\n                        if (utils_1.maxWireVersion(server) <= 7 || error_1.isNodeShuttingDownError(err)) {\n                            server.s.pool.clear(connection.serviceId);\n                        }\n                        if (!server.loadBalanced) {\n                            markServerUnknown(server, err);\n                            process.nextTick(() => server.requestCheck());\n                        }\n                    }\n                }\n            }\n            if (session && session.isPinned && err.hasErrorLabel('TransientTransactionError')) {\n                session.unpin({ force: true });\n            }\n        }\n        callback(err, result);\n    };\n}\n//# sourceMappingURL=server.js.map"]},"metadata":{},"sourceType":"script"}