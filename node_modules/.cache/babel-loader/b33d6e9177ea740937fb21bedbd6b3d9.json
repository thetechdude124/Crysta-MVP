{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescription = void 0;\n\nconst server_description_1 = require(\"../sdam/server_description\");\n\nconst common_1 = require(\"../sdam/common\");\n\nconst RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'logicalSessionTimeoutMinutes'];\n/** @public */\n\nclass StreamDescription {\n  constructor(address, options) {\n    this.address = address;\n    this.type = common_1.ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options === null || options === void 0 ? void 0 : options.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!(options === null || options === void 0 ? void 0 : options.loadBalanced);\n    this.compressors = options && options.compressors && Array.isArray(options.compressors) ? options.compressors : [];\n  }\n\n  receiveResponse(response) {\n    this.type = server_description_1.parseServerType(response);\n    RESPONSE_FIELDS.forEach(field => {\n      if (typeof response[field] != null) {\n        this[field] = response[field];\n      } // testing case\n\n\n      if ('__nodejs_mock_server__' in response) {\n        this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n      }\n    });\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => {\n        var _a;\n\n        return (_a = response.compression) === null || _a === void 0 ? void 0 : _a.includes(c);\n      })[0];\n    }\n  }\n\n}\n\nexports.StreamDescription = StreamDescription;","map":{"version":3,"sources":["../../src/cmap/stream_description.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,oBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAGA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,MAAM,eAAe,GAAG,CACtB,gBADsB,EAEtB,gBAFsB,EAGtB,mBAHsB,EAItB,qBAJsB,EAKtB,mBALsB,EAMtB,8BANsB,CAAxB;AAgBA;;AACA,MAAa,iBAAb,CAA8B;AAiB5B,EAAA,WAAA,CAAY,OAAZ,EAA6B,OAA7B,EAA+D;AAC7D,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,IAAL,GAAY,QAAA,CAAA,UAAA,CAAW,OAAvB;AACA,SAAK,cAAL,GAAsB,SAAtB;AACA,SAAK,cAAL,GAAsB,SAAtB;AACA,SAAK,iBAAL,GAAyB,QAAzB;AACA,SAAK,mBAAL,GAA2B,QAA3B;AACA,SAAK,iBAAL,GAAyB,MAAzB;AACA,SAAK,4BAAL,GAAoC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,4BAA7C;AACA,SAAK,YAAL,GAAoB,CAAC,EAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,YAAV,CAArB;AACA,SAAK,WAAL,GACE,OAAO,IAAI,OAAO,CAAC,WAAnB,IAAkC,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,WAAtB,CAAlC,GACI,OAAO,CAAC,WADZ,GAEI,EAHN;AAID;;AAED,EAAA,eAAe,CAAC,QAAD,EAAmB;AAChC,SAAK,IAAL,GAAY,oBAAA,CAAA,eAAA,CAAgB,QAAhB,CAAZ;AACA,IAAA,eAAe,CAAC,OAAhB,CAAwB,KAAK,IAAG;AAC9B,UAAI,OAAO,QAAQ,CAAC,KAAD,CAAf,IAA0B,IAA9B,EAAoC;AAClC,aAAK,KAAL,IAAc,QAAQ,CAAC,KAAD,CAAtB;AACD,OAH6B,CAK9B;;;AACA,UAAI,4BAA4B,QAAhC,EAA0C;AACxC,aAAK,sBAAL,GAA8B,QAAQ,CAAC,wBAAD,CAAtC;AACD;AACF,KATD;;AAWA,QAAI,QAAQ,CAAC,WAAb,EAA0B;AACxB,WAAK,UAAL,GAAkB,KAAK,WAAL,CAAiB,MAAjB,CAAwB,CAAC,IAAG;AAAA,YAAA,EAAA;;AAAC,eAAA,CAAA,EAAA,GAAA,QAAQ,CAAC,WAAT,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAoB,EAAA,CAAE,QAAF,CAAW,CAAX,CAApB;AAAiC,OAA9D,EAAgE,CAAhE,CAAlB;AACD;AACF;;AAjD2B;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamDescription = void 0;\nconst server_description_1 = require(\"../sdam/server_description\");\nconst common_1 = require(\"../sdam/common\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options === null || options === void 0 ? void 0 : options.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!(options === null || options === void 0 ? void 0 : options.loadBalanced);\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n    }\n    receiveResponse(response) {\n        this.type = server_description_1.parseServerType(response);\n        RESPONSE_FIELDS.forEach(field => {\n            if (typeof response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        });\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => { var _a; return (_a = response.compression) === null || _a === void 0 ? void 0 : _a.includes(c); })[0];\n        }\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map"]},"metadata":{},"sourceType":"script"}