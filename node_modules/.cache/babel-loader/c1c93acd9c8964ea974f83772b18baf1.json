{"ast":null,"code":"\"use strict\";\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateSessionFromResponse = exports.applySession = exports.commandSupportsReadConcern = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst bson_1 = require(\"./bson\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst transactions_1 = require(\"./transactions\");\n\nconst common_1 = require(\"./sdam/common\");\n\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\n\nconst error_1 = require(\"./error\");\n\nconst utils_1 = require(\"./utils\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst connection_1 = require(\"./cmap/connection\");\n\nconst metrics_1 = require(\"./cmap/metrics\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    const error = new error_1.MongoExpiredSessionError();\n\n    if (typeof callback === 'function') {\n      callback(error);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n/** @internal */\n\n\nconst kServerSession = Symbol('serverSession');\n/** @internal */\n\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\n\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\n\nconst kPinnedConnection = Symbol('pinnedConnection');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\n\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a client session.\n   * @internal\n   * @param topology - The current client's topology (Internal Class)\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n    /** @internal */\n\n    this[_a] = false;\n\n    if (topology == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n\n      if (options.causalConsistency === true) {\n        throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n      }\n    }\n\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this[kServerSession] = undefined;\n    this.supports = {\n      causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = undefined;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new transactions_1.Transaction();\n  }\n  /** The server id associated with this session */\n\n\n  get id() {\n    var _b;\n\n    return (_b = this.serverSession) === null || _b === void 0 ? void 0 : _b.id;\n  }\n\n  get serverSession() {\n    if (this[kServerSession] == null) {\n      this[kServerSession] = this.sessionPool.acquire();\n    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    return this[kServerSession];\n  }\n  /** Whether or not this session is configured for snapshot reads */\n\n\n  get snapshotEnabled() {\n    return this[kSnapshotEnabled];\n  }\n\n  get loadBalanced() {\n    return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /** @internal */\n\n\n  get pinnedConnection() {\n    return this[kPinnedConnection];\n  }\n  /** @internal */\n\n\n  pin(conn) {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this[kPinnedConnection] = conn;\n    conn.emit(connection_1.Connection.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n  }\n  /** @internal */\n\n\n  unpin(options) {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned() {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n\n  endSession(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    const finalOptions = {\n      force: true,\n      ...options\n    };\n    return utils_1.maybePromise(callback, done => {\n      if (this.hasEnded) {\n        maybeClearPinnedConnection(this, finalOptions);\n        return done();\n      }\n\n      const completeEndSession = () => {\n        maybeClearPinnedConnection(this, finalOptions); // release the server session back to the pool\n\n        this.sessionPool.release(this.serverSession);\n        this[kServerSession] = undefined; // mark the session as ended, and emit a signal\n\n        this.hasEnded = true;\n        this.emit('ended', this); // spec indicates that we should ignore all errors for `endSessions`\n\n        done();\n      };\n\n      if (this.serverSession && this.inTransaction()) {\n        this.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n        return;\n      }\n\n      completeEndSession();\n    });\n  }\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n\n\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n\n\n  advanceClusterTime(clusterTime) {\n    var _b, _c;\n\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n    }\n\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n    }\n\n    if (!clusterTime.signature || ((_b = clusterTime.signature.hash) === null || _b === void 0 ? void 0 : _b._bsontype) !== 'Binary' || typeof clusterTime.signature.keyId !== 'number' && ((_c = clusterTime.signature.keyId) === null || _c === void 0 ? void 0 : _c._bsontype) !== 'Long' // apparently we decode the key to number?\n    ) {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n    }\n\n    common_1._advanceClusterTime(this, clusterTime);\n  }\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n\n\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n  /** Increment the transaction number on the internal ServerSession */\n\n\n  incrementTransactionNumber() {\n    if (this.serverSession) {\n      this.serverSession.txnNumber = typeof this.serverSession.txnNumber === 'number' ? this.serverSession.txnNumber + 1 : 0;\n    }\n  }\n  /** @returns whether this session is currently in a transaction or not */\n\n\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n\n\n  startTransaction(options) {\n    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    if (this[kSnapshotEnabled]) {\n      throw new error_1.MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n    }\n\n    assertAlive(this);\n\n    if (this.inTransaction()) {\n      throw new error_1.MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = utils_1.maxWireVersion(this.topology);\n\n    if (shared_1.isSharded(this.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    } // increment txnNumber\n\n\n    this.incrementTransactionNumber(); // create transaction state\n\n    this.transaction = new transactions_1.Transaction({\n      readConcern: (_c = (_b = options === null || options === void 0 ? void 0 : options.readConcern) !== null && _b !== void 0 ? _b : this.defaultTransactionOptions.readConcern) !== null && _c !== void 0 ? _c : (_d = this.clientOptions) === null || _d === void 0 ? void 0 : _d.readConcern,\n      writeConcern: (_f = (_e = options === null || options === void 0 ? void 0 : options.writeConcern) !== null && _e !== void 0 ? _e : this.defaultTransactionOptions.writeConcern) !== null && _f !== void 0 ? _f : (_g = this.clientOptions) === null || _g === void 0 ? void 0 : _g.writeConcern,\n      readPreference: (_j = (_h = options === null || options === void 0 ? void 0 : options.readPreference) !== null && _h !== void 0 ? _h : this.defaultTransactionOptions.readPreference) !== null && _j !== void 0 ? _j : (_k = this.clientOptions) === null || _k === void 0 ? void 0 : _k.readPreference,\n      maxCommitTimeMS: (_l = options === null || options === void 0 ? void 0 : options.maxCommitTimeMS) !== null && _l !== void 0 ? _l : this.defaultTransactionOptions.maxCommitTimeMS\n    });\n    this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n  }\n\n  commitTransaction(callback) {\n    return utils_1.maybePromise(callback, cb => endTransaction(this, 'commitTransaction', cb));\n  }\n\n  abortTransaction(callback) {\n    return utils_1.maybePromise(callback, cb => endTransaction(this, 'abortTransaction', cb));\n  }\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n\n\n  toBSON() {\n    throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param fn - A lambda to run within a transaction\n   * @param options - Optional settings for the transaction\n   */\n\n\n  withTransaction(fn, options) {\n    const startTime = utils_1.now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n\n}\n\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\n\nfunction hasNotTimedOut(startTime, max) {\n  return utils_1.calculateDurationInMs(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\n\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel('TransientTransactionError')) {\n    return;\n  } // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n\n\n  if (conn) {\n    const servers = Array.from(session.topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if ((options === null || options === void 0 ? void 0 : options.error) == null || (options === null || options === void 0 ? void 0 : options.force)) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(connection_1.Connection.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n\n      if (options === null || options === void 0 ? void 0 : options.forceClear) {\n        loadBalancer.s.pool.clear(conn.serviceId);\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([transactions_1.TxnState.NO_TRANSACTION, transactions_1.TxnState.TRANSACTION_COMMITTED, transactions_1.TxnState.TRANSACTION_ABORTED]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n  session.startTransaction(options);\n  let promise;\n\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!utils_1.isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise.then(() => {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }, err => {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof error_1.MongoError && err.hasErrorLabel('TransientTransactionError') && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel('UnknownTransactionCommitResult');\n      }\n\n      throw err;\n    }\n\n    if (session.transaction.isActive) {\n      return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n    }\n\n    return maybeRetryOrThrow(err);\n  });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  } // handle any initial problematic cases\n\n\n  const txnState = session.transaction.state;\n\n  if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n    callback(new error_1.MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  } // construct and send the command\n\n\n  const command = {\n    [commandName]: 1\n  }; // apply a writeConcern if specified\n\n  let writeConcern;\n\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = {\n      w: session.clientOptions.writeConcern.w\n    };\n  }\n\n  if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern\n    });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n\n  function commandHandler(e, r) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, {\n          force: false\n        });\n      } // The spec indicates that we should ignore all errors on `abortTransaction`\n\n\n      return callback();\n    }\n\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n\n    if (e) {\n      if (e instanceof error_1.MongoNetworkError || e instanceof error_1.MongoWriteConcernError || error_1.isRetryableError(e) || isMaxTimeMSExpiredError(e)) {\n        if (isUnknownTransactionCommitResult(e)) {\n          e.addErrorLabel('UnknownTransactionCommitResult'); // per txns spec, must unpin session in this case\n\n          session.unpin({\n            error: e\n          });\n        }\n      } else if (e.hasErrorLabel('TransientTransactionError')) {\n        session.unpin({\n          error: e\n        });\n      }\n    }\n\n    callback(e, r);\n  } // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n\n\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  } // send the command\n\n\n  execute_operation_1.executeOperation(session.topology, new run_command_1.RunAdminCommandOperation(undefined, command, {\n    session,\n    readPreference: read_preference_1.ReadPreference.primary,\n    bypassPinningCheck: true\n  }), (err, reply) => {\n    if (command.abortTransaction) {\n      // always unpin on abort regardless of command outcome\n      session.unpin();\n    }\n\n    if (err && error_1.isRetryableError(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.unpin({\n          force: true\n        });\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return execute_operation_1.executeOperation(session.topology, new run_command_1.RunAdminCommandOperation(undefined, command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n      }), (_err, _reply) => commandHandler(_err, _reply));\n    }\n\n    commandHandler(err, reply);\n  });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\n\n\nclass ServerSession {\n  /** @internal */\n  constructor() {\n    this.id = {\n      id: new bson_1.Binary(utils_1.uuidV4(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = utils_1.now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n\n\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(utils_1.calculateDurationInMs(this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n\n}\n\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\n\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n  /** Ends all sessions in the session pool */\n\n\n  endAllPooledSessions(callback) {\n    if (this.sessions.length) {\n      this.topology.endSessions(this.sessions.map(session => session.id), () => {\n        this.sessions = [];\n\n        if (typeof callback === 'function') {\n          callback();\n        }\n      });\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n\n\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes || 10;\n\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n\n      if (session && (this.topology.loadBalanced || !session.hasTimedOut(sessionTimeoutMinutes))) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n\n\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n    if (this.topology.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      } // otherwise, readd this session to the session pool\n\n\n      this.sessions.unshift(session);\n    }\n  }\n\n}\n\nexports.ServerSessionPool = ServerSessionPool; // TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\n\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  if (command.mapReduce && options && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n */\n\nfunction applySession(session, command, options) {\n  var _b; // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n\n\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  }\n\n  const serverSession = session.serverSession;\n\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  } // SPEC-1019: silently ignore explicit session with unacknowledged write for backwards compatibility\n  // FIXME: NODE-2781, this check for write concern shouldn't be happening here, but instead during command construction\n\n\n  if (options && options.writeConcern && options.writeConcern.w === 0) {\n    if (session && session.explicit) {\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n\n    return;\n  } // mark the last use of this session, and apply the `lsid`\n\n\n  serverSession.lastUse = utils_1.now();\n  command.lsid = serverSession.id; // first apply non-transaction-specific sessions data\n\n  const inTransaction = session.inTransaction() || transactions_1.isTransactionCommand(command);\n  const isRetryableWrite = (options === null || options === void 0 ? void 0 : options.willRetryWrite) || false;\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTransaction) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n\n    if (session.supports.causalConsistency && session.operationTime && commandSupportsReadConcern(command, options)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session[kSnapshotTime]\n        });\n      }\n    }\n\n    return;\n  } // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n\n\n  command.autocommit = false;\n\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || ((_b = session === null || session === void 0 ? void 0 : session.clientOptions) === null || _b === void 0 ? void 0 : _b.readConcern);\n\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n}\n\nexports.applySession = applySession;\n\nfunction updateSessionFromResponse(session, document) {\n  var _b;\n\n  if (document.$clusterTime) {\n    common_1._advanceClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if ((session === null || session === void 0 ? void 0 : session[kSnapshotEnabled]) && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = ((_b = document.cursor) === null || _b === void 0 ? void 0 : _b.atClusterTime) || document.atClusterTime;\n\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n\nexports.updateSessionFromResponse = updateSessionFromResponse;","map":{"version":3,"sources":["../src/sessions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSessionFromResponse = exports.applySession = exports.commandSupportsReadConcern = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst promise_provider_1 = require(\"./promise_provider\");\nconst bson_1 = require(\"./bson\");\nconst read_preference_1 = require(\"./read_preference\");\nconst transactions_1 = require(\"./transactions\");\nconst common_1 = require(\"./sdam/common\");\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst connection_1 = require(\"./cmap/connection\");\nconst metrics_1 = require(\"./cmap/metrics\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst read_concern_1 = require(\"./read_concern\");\nconst minWireVersionForShardedTransactions = 8;\nfunction assertAlive(session, callback) {\n    if (session.serverSession == null) {\n        const error = new error_1.MongoExpiredSessionError();\n        if (typeof callback === 'function') {\n            callback(error);\n            return false;\n        }\n        throw error;\n    }\n    return true;\n}\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param topology - The current client's topology (Internal Class)\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */\n    constructor(topology, sessionPool, options, clientOptions) {\n        super();\n        /** @internal */\n        this[_a] = false;\n        if (topology == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a topology');\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n        }\n        options = options !== null && options !== void 0 ? options : {};\n        if (options.snapshot === true) {\n            this[kSnapshotEnabled] = true;\n            if (options.causalConsistency === true) {\n                throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n            }\n        }\n        this.topology = topology;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this[kServerSession] = undefined;\n        this.supports = {\n            causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.explicit = !!options.explicit;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */\n    get id() {\n        var _b;\n        return (_b = this.serverSession) === null || _b === void 0 ? void 0 : _b.id;\n    }\n    get serverSession() {\n        if (this[kServerSession] == null) {\n            this[kServerSession] = this.sessionPool.acquire();\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this[kServerSession];\n    }\n    /** Whether or not this session is configured for snapshot reads */\n    get snapshotEnabled() {\n        return this[kSnapshotEnabled];\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n    get pinnedConnection() {\n        return this[kPinnedConnection];\n    }\n    /** @internal */\n    pin(conn) {\n        if (this[kPinnedConnection]) {\n            throw TypeError('Cannot pin multiple connections to the same session');\n        }\n        this[kPinnedConnection] = conn;\n        conn.emit(connection_1.Connection.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n    unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n    endSession(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        const finalOptions = { force: true, ...options };\n        return utils_1.maybePromise(callback, done => {\n            if (this.hasEnded) {\n                maybeClearPinnedConnection(this, finalOptions);\n                return done();\n            }\n            const completeEndSession = () => {\n                maybeClearPinnedConnection(this, finalOptions);\n                // release the server session back to the pool\n                this.sessionPool.release(this.serverSession);\n                this[kServerSession] = undefined;\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n                // spec indicates that we should ignore all errors for `endSessions`\n                done();\n            };\n            if (this.serverSession && this.inTransaction()) {\n                this.abortTransaction(err => {\n                    if (err)\n                        return done(err);\n                    completeEndSession();\n                });\n                return;\n            }\n            completeEndSession();\n        });\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime) {\n        var _b, _c;\n        if (!clusterTime || typeof clusterTime !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature ||\n            ((_b = clusterTime.signature.hash) === null || _b === void 0 ? void 0 : _b._bsontype) !== 'Binary' ||\n            (typeof clusterTime.signature.keyId !== 'number' &&\n                ((_c = clusterTime.signature.keyId) === null || _c === void 0 ? void 0 : _c._bsontype) !== 'Long') // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        common_1._advanceClusterTime(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return this.id.id.buffer.equals(session.id.id.buffer);\n    }\n    /** Increment the transaction number on the internal ServerSession */\n    incrementTransactionNumber() {\n        if (this.serverSession) {\n            this.serverSession.txnNumber =\n                typeof this.serverSession.txnNumber === 'number' ? this.serverSession.txnNumber + 1 : 0;\n        }\n    }\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options) {\n        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        if (this[kSnapshotEnabled]) {\n            throw new error_1.MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n        }\n        assertAlive(this);\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError('Transaction already in progress');\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = utils_1.maxWireVersion(this.topology);\n        if (shared_1.isSharded(this.topology) &&\n            topologyMaxWireVersion != null &&\n            topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n        }\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: (_c = (_b = options === null || options === void 0 ? void 0 : options.readConcern) !== null && _b !== void 0 ? _b : this.defaultTransactionOptions.readConcern) !== null && _c !== void 0 ? _c : (_d = this.clientOptions) === null || _d === void 0 ? void 0 : _d.readConcern,\n            writeConcern: (_f = (_e = options === null || options === void 0 ? void 0 : options.writeConcern) !== null && _e !== void 0 ? _e : this.defaultTransactionOptions.writeConcern) !== null && _f !== void 0 ? _f : (_g = this.clientOptions) === null || _g === void 0 ? void 0 : _g.writeConcern,\n            readPreference: (_j = (_h = options === null || options === void 0 ? void 0 : options.readPreference) !== null && _h !== void 0 ? _h : this.defaultTransactionOptions.readPreference) !== null && _j !== void 0 ? _j : (_k = this.clientOptions) === null || _k === void 0 ? void 0 : _k.readPreference,\n            maxCommitTimeMS: (_l = options === null || options === void 0 ? void 0 : options.maxCommitTimeMS) !== null && _l !== void 0 ? _l : this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    commitTransaction(callback) {\n        return utils_1.maybePromise(callback, cb => endTransaction(this, 'commitTransaction', cb));\n    }\n    abortTransaction(callback) {\n        return utils_1.maybePromise(callback, cb => endTransaction(this, 'abortTransaction', cb));\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON() {\n        throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Runs a provided lambda within a transaction, retrying either the commit operation\n     * or entire transaction as needed (and when the error permits) to better ensure that\n     * the transaction can complete successfully.\n     *\n     * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n     * return a Promise will result in undefined behavior.\n     *\n     * @param fn - A lambda to run within a transaction\n     * @param options - Optional settings for the transaction\n     */\n    withTransaction(fn, options) {\n        const startTime = utils_1.now();\n        return attemptTransaction(this, startTime, fn, options);\n    }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    'CannotSatisfyWriteConcern',\n    'UnknownReplWriteConcern',\n    'UnsatisfiableWriteConcern'\n]);\nfunction hasNotTimedOut(startTime, max) {\n    return utils_1.calculateDurationInMs(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError &&\n        err.codeName &&\n        NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return (isMaxTimeMSExpiredError(err) ||\n        (!isNonDeterministicWriteConcernError &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern));\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session[kPinnedConnection];\n    const error = options === null || options === void 0 ? void 0 : options.error;\n    if (session.inTransaction() &&\n        error &&\n        error instanceof error_1.MongoError &&\n        error.hasErrorLabel('TransientTransactionError')) {\n        return;\n    }\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn) {\n        const servers = Array.from(session.topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if ((options === null || options === void 0 ? void 0 : options.error) == null || (options === null || options === void 0 ? void 0 : options.force)) {\n            loadBalancer.s.pool.checkIn(conn);\n            conn.emit(connection_1.Connection.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION\n                ? metrics_1.ConnectionPoolMetrics.TXN\n                : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options === null || options === void 0 ? void 0 : options.forceClear) {\n                loadBalancer.s.pool.clear(conn.serviceId);\n            }\n        }\n        session[kPinnedConnection] = undefined;\n    }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return (err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n        (err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired));\n}\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n    return session.commitTransaction().catch((err) => {\n        if (err instanceof error_1.MongoError &&\n            hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n            !isMaxTimeMSExpiredError(err)) {\n            if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n                return attemptTransactionCommit(session, startTime, fn, options);\n            }\n            if (err.hasErrorLabel('TransientTransactionError')) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n        }\n        throw err;\n    });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n    transactions_1.TxnState.NO_TRANSACTION,\n    transactions_1.TxnState.TRANSACTION_COMMITTED,\n    transactions_1.TxnState.TRANSACTION_ABORTED\n]);\nfunction userExplicitlyEndedTransaction(session) {\n    return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options) {\n    const Promise = promise_provider_1.PromiseProvider.get();\n    session.startTransaction(options);\n    let promise;\n    try {\n        promise = fn(session);\n    }\n    catch (err) {\n        promise = Promise.reject(err);\n    }\n    if (!utils_1.isPromiseLike(promise)) {\n        session.abortTransaction();\n        throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n    }\n    return promise.then(() => {\n        if (userExplicitlyEndedTransaction(session)) {\n            return;\n        }\n        return attemptTransactionCommit(session, startTime, fn, options);\n    }, err => {\n        function maybeRetryOrThrow(err) {\n            if (err instanceof error_1.MongoError &&\n                err.hasErrorLabel('TransientTransactionError') &&\n                hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n            if (isMaxTimeMSExpiredError(err)) {\n                err.addErrorLabel('UnknownTransactionCommitResult');\n            }\n            throw err;\n        }\n        if (session.transaction.isActive) {\n            return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n        }\n        return maybeRetryOrThrow(err);\n    });\n}\nfunction endTransaction(session, commandName, callback) {\n    if (!assertAlive(session, callback)) {\n        // checking result in case callback was called\n        return;\n    }\n    // handle any initial problematic cases\n    const txnState = session.transaction.state;\n    if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n        callback(new error_1.MongoTransactionError('No transaction started'));\n        return;\n    }\n    if (commandName === 'commitTransaction') {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n            return;\n        }\n    }\n    else {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n            return;\n        }\n    }\n    // construct and send the command\n    const command = { [commandName]: 1 };\n    // apply a writeConcern if specified\n    let writeConcern;\n    if (session.transaction.options.writeConcern) {\n        writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n    }\n    else if (session.clientOptions && session.clientOptions.writeConcern) {\n        writeConcern = { w: session.clientOptions.writeConcern.w };\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n        writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n    }\n    if (writeConcern) {\n        Object.assign(command, { writeConcern });\n    }\n    if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n        Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n    }\n    function commandHandler(e, r) {\n        if (commandName !== 'commitTransaction') {\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (session.loadBalanced) {\n                maybeClearPinnedConnection(session, { force: false });\n            }\n            // The spec indicates that we should ignore all errors on `abortTransaction`\n            return callback();\n        }\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        if (e) {\n            if (e instanceof error_1.MongoNetworkError ||\n                e instanceof error_1.MongoWriteConcernError ||\n                error_1.isRetryableError(e) ||\n                isMaxTimeMSExpiredError(e)) {\n                if (isUnknownTransactionCommitResult(e)) {\n                    e.addErrorLabel('UnknownTransactionCommitResult');\n                    // per txns spec, must unpin session in this case\n                    session.unpin({ error: e });\n                }\n            }\n            else if (e.hasErrorLabel('TransientTransactionError')) {\n                session.unpin({ error: e });\n            }\n        }\n        callback(e, r);\n    }\n    // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n    if (session.transaction.recoveryToken) {\n        command.recoveryToken = session.transaction.recoveryToken;\n    }\n    // send the command\n    execute_operation_1.executeOperation(session.topology, new run_command_1.RunAdminCommandOperation(undefined, command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n    }), (err, reply) => {\n        if (command.abortTransaction) {\n            // always unpin on abort regardless of command outcome\n            session.unpin();\n        }\n        if (err && error_1.isRetryableError(err)) {\n            // SPEC-1185: apply majority write concern when retrying commitTransaction\n            if (command.commitTransaction) {\n                // per txns spec, must unpin session in this case\n                session.unpin({ force: true });\n                command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n                    w: 'majority'\n                });\n            }\n            return execute_operation_1.executeOperation(session.topology, new run_command_1.RunAdminCommandOperation(undefined, command, {\n                session,\n                readPreference: read_preference_1.ReadPreference.primary,\n                bypassPinningCheck: true\n            }), (_err, _reply) => commandHandler(_err, _reply));\n        }\n        commandHandler(err, reply);\n    });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n    /** @internal */\n    constructor() {\n        this.id = { id: new bson_1.Binary(utils_1.uuidV4(), bson_1.Binary.SUBTYPE_UUID) };\n        this.lastUse = utils_1.now();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round(((utils_1.calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n    constructor(topology) {\n        if (topology == null) {\n            throw new error_1.MongoRuntimeError('ServerSessionPool requires a topology');\n        }\n        this.topology = topology;\n        this.sessions = [];\n    }\n    /** Ends all sessions in the session pool */\n    endAllPooledSessions(callback) {\n        if (this.sessions.length) {\n            this.topology.endSessions(this.sessions.map((session) => session.id), () => {\n                this.sessions = [];\n                if (typeof callback === 'function') {\n                    callback();\n                }\n            });\n            return;\n        }\n        if (typeof callback === 'function') {\n            callback();\n        }\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */\n    acquire() {\n        const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes || 10;\n        while (this.sessions.length) {\n            const session = this.sessions.shift();\n            if (session && (this.topology.loadBalanced || !session.hasTimedOut(sessionTimeoutMinutes))) {\n                return session;\n            }\n        }\n        return new ServerSession();\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n    release(session) {\n        const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n        if (this.topology.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        while (this.sessions.length) {\n            const pooledSession = this.sessions[this.sessions.length - 1];\n            if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n                this.sessions.pop();\n            }\n            else {\n                break;\n            }\n        }\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command, options) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    if (command.mapReduce &&\n        options &&\n        options.out &&\n        (options.out.inline === 1 || options.out === 'inline')) {\n        return true;\n    }\n    return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n */\nfunction applySession(session, command, options) {\n    var _b;\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError('Unable to acquire server session');\n    }\n    // SPEC-1019: silently ignore explicit session with unacknowledged write for backwards compatibility\n    // FIXME: NODE-2781, this check for write concern shouldn't be happening here, but instead during command construction\n    if (options && options.writeConcern && options.writeConcern.w === 0) {\n        if (session && session.explicit) {\n            return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = utils_1.now();\n    command.lsid = serverSession.id;\n    // first apply non-transaction-specific sessions data\n    const inTransaction = session.inTransaction() || transactions_1.isTransactionCommand(command);\n    const isRetryableWrite = (options === null || options === void 0 ? void 0 : options.willRetryWrite) || false;\n    if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTransaction) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency &&\n            session.operationTime &&\n            commandSupportsReadConcern(command, options)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n        else if (session[kSnapshotEnabled]) {\n            command.readConcern = command.readConcern || { level: read_concern_1.ReadConcernLevel.snapshot };\n            if (session[kSnapshotTime] != null) {\n                Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || ((_b = session === null || session === void 0 ? void 0 : session.clientOptions) === null || _b === void 0 ? void 0 : _b.readConcern);\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n    }\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n    var _b;\n    if (document.$clusterTime) {\n        common_1._advanceClusterTime(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if ((session === null || session === void 0 ? void 0 : session[kSnapshotEnabled]) && session[kSnapshotTime] == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = ((_b = document.cursor) === null || _b === void 0 ? void 0 : _b.atClusterTime) || document.atClusterTime;\n        if (atClusterTime) {\n            session[kSnapshotTime] = atClusterTime;\n        }\n    }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;\n//# sourceMappingURL=sessions.js.map"]},"metadata":{},"sourceType":"script"}