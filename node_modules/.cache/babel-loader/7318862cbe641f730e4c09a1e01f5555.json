{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\n\nconst Denque = require(\"denque\");\n\nconst error_1 = require(\"./error\");\n\nconst aggregate_1 = require(\"./operations/aggregate\");\n\nconst utils_1 = require(\"./utils\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst db_1 = require(\"./db\");\n\nconst collection_1 = require(\"./collection\");\n\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n/** @internal */\n\n\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent, pipeline = [], options = {}) {\n    super();\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque(); // Create contained Change Stream cursor\n\n    this.cursor = createChangeStreamCursor(this, options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        streamEvents(this, this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    var _a;\n\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n  /** Check if there is any document still available in the Change Stream */\n\n\n  hasNext(callback) {\n    setIsIterator(this);\n    return utils_1.maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  next(callback) {\n    setIsIterator(this);\n    return utils_1.maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n\n          processNewChange(this, change, cb);\n        });\n      });\n    });\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    var _a, _b;\n\n    return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n  }\n  /** Close the Change Stream */\n\n\n  close(callback) {\n    this[kClosed] = true;\n    return utils_1.maybePromise(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        endStream(this);\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n\n\n  stream(options) {\n    this.streamOptions = options;\n    if (!this.cursor) throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  tryNext(callback) {\n    setIsIterator(this);\n    return utils_1.maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = 'response';\n/** @event */\n\nChangeStream.MORE = 'more';\n/** @event */\n\nChangeStream.INIT = 'init';\n/** @event */\n\nChangeStream.CLOSE = 'close';\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = 'change';\n/** @event */\n\nChangeStream.END = 'end';\n/** @event */\n\nChangeStream.ERROR = 'error';\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @internal */\n\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(topology, namespace, pipeline = [], options = {}) {\n    super(topology, namespace, options);\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = {};\n\n    for (const optionName of CURSOR_OPTIONS) {\n      if (Reflect.has(this.options, optionName)) {\n        Reflect.set(result, optionName, Reflect.get(this.options, optionName));\n      }\n    }\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => Reflect.deleteProperty(result, key));\n\n      if (this.resumeToken) {\n        const resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        Reflect.set(result, resumeKey, this.resumeToken);\n      } else if (this.startAtOperationTime && utils_1.maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName, response) {\n    const cursor = (response === null || response === void 0 ? void 0 : response.cursor) || {};\n\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone() {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, { ...this.cursorOptions\n    });\n  }\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    execute_operation_1.executeOperation(this.topology, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n\n      const server = aggregateOperation.server;\n\n      if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && utils_1.maxWireVersion(server) >= 7) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE); // TODO: NODE-2882\n\n      callback(undefined, {\n        server,\n        session,\n        response\n      });\n    });\n  }\n\n  _getMore(batchSize, callback) {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n\n}\n\nexports.ChangeStreamCursor = ChangeStreamCursor;\nconst CHANGE_STREAM_EVENTS = [ChangeStream.RESUME_TOKEN_CHANGED, ChangeStream.END, ChangeStream.CLOSE];\n\nfunction setIsEmitter(changeStream) {\n  if (changeStream[kMode] === 'iterator') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n  }\n\n  changeStream[kMode] = 'emitter';\n}\n\nfunction setIsIterator(changeStream) {\n  if (changeStream[kMode] === 'emitter') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n  }\n\n  changeStream[kMode] = 'iterator';\n}\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\n\n\nfunction createChangeStreamCursor(changeStream, options) {\n  const changeStreamStageOptions = {\n    fullDocument: options.fullDocument || 'default'\n  };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(changeStream.pipeline);\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  const changeStreamCursor = new ChangeStreamCursor(utils_1.getTopology(changeStream.parent), changeStream.namespace, pipeline, cursorOptions);\n\n  for (const event of CHANGE_STREAM_EVENTS) {\n    changeStreamCursor.on(event, e => changeStream.emit(event, e));\n  }\n\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n    streamEvents(changeStream, changeStreamCursor);\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(name => {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n  return target;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nconst SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) {\n      options.start = utils_1.now();\n    }\n\n    const start = options.start || utils_1.now();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n\n    if (topology.isConnected()) {\n      return callback();\n    }\n\n    if (utils_1.calculateDurationInMs(start) > timeout) {\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n      return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction closeWithError(changeStream, error, callback) {\n  if (!callback) {\n    changeStream.emit(ChangeStream.ERROR, error);\n  }\n\n  changeStream.close(() => callback && callback(error));\n}\n\nfunction streamEvents(changeStream, cursor) {\n  setIsEmitter(changeStream);\n  const stream = changeStream[kCursorStream] || cursor.stream();\n  changeStream[kCursorStream] = stream;\n  stream.on('data', change => processNewChange(changeStream, change));\n  stream.on('error', error => processError(changeStream, error));\n}\n\nfunction endStream(changeStream) {\n  const cursorStream = changeStream[kCursorStream];\n\n  if (cursorStream) {\n    ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n    cursorStream.destroy();\n  }\n\n  changeStream[kCursorStream] = undefined;\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  var _a;\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n  if (change == null) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    return closeWithError(changeStream, new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n  }\n\n  if (change && !change._id) {\n    return closeWithError(changeStream, new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n  } // cache the resume token\n\n\n  (_a = changeStream.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  const cursor = changeStream.cursor; // If the change stream has been closed explicitly, do not process error.\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if the resume succeeds, continue with the new cursor\n\n\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  } // otherwise, raise an error and close the change stream\n\n\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit(ChangeStream.ERROR, err);\n    }\n\n    changeStream.close(() => processResumeQueue(changeStream, err));\n  }\n\n  if (cursor && error_1.isResumableError(error, utils_1.maxWireVersion(cursor.server))) {\n    changeStream.cursor = undefined; // stop listening to all events from old cursor\n\n    endStream(changeStream); // close internal cursor, ignore errors\n\n    cursor.close();\n    const topology = utils_1.getTopology(changeStream.parent);\n    waitForTopologyConnected(topology, {\n      readPreference: cursor.readPreference\n    }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err); // create a new cursor, preserving the old cursor's options\n\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions); // attempt to continue in emitter mode\n\n      if (!callback) return resumeWithCursor(newCursor); // attempt to continue in iterator mode\n\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  } // if initial error wasn't resumable, raise an error and close the change stream\n\n\n  return closeWithError(changeStream, error, callback);\n}\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\n\n\nfunction getCursor(changeStream, callback) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if a cursor exists and it is open, return it\n\n\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  } // no cursor, queue callback until topology reconnects\n\n\n  changeStream[kResumeQueue].push(callback);\n}\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\n\n\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n    if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n    if (!err) {\n      if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n      }\n\n      if (!changeStream.cursor) {\n        request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n        return;\n      }\n    }\n\n    request(err, changeStream.cursor);\n  }\n}","map":{"version":3,"sources":["../src/change_stream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\nconst Denque = require(\"denque\");\nconst error_1 = require(\"./error\");\nconst aggregate_1 = require(\"./operations/aggregate\");\nconst utils_1 = require(\"./utils\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst db_1 = require(\"./db\");\nconst collection_1 = require(\"./collection\");\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst mongo_types_1 = require(\"./mongo_types\");\n/** @internal */\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = options;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        this[kResumeQueue] = new Denque();\n        // Create contained Change Stream cursor\n        this.cursor = createChangeStreamCursor(this, options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                streamEvents(this, this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            var _a;\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        var _a;\n        return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    hasNext(callback) {\n        setIsIterator(this);\n        return utils_1.maybePromise(callback, cb => {\n            getCursor(this, (err, cursor) => {\n                if (err || !cursor)\n                    return cb(err); // failed to resume, raise an error\n                cursor.hasNext(cb);\n            });\n        });\n    }\n    next(callback) {\n        setIsIterator(this);\n        return utils_1.maybePromise(callback, cb => {\n            getCursor(this, (err, cursor) => {\n                if (err || !cursor)\n                    return cb(err); // failed to resume, raise an error\n                cursor.next((error, change) => {\n                    if (error) {\n                        this[kResumeQueue].push(() => this.next(cb));\n                        processError(this, error, cb);\n                        return;\n                    }\n                    processNewChange(this, change, cb);\n                });\n            });\n        });\n    }\n    /** Is the cursor closed */\n    get closed() {\n        var _a, _b;\n        return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n    }\n    /** Close the Change Stream */\n    close(callback) {\n        this[kClosed] = true;\n        return utils_1.maybePromise(callback, cb => {\n            if (!this.cursor) {\n                return cb();\n            }\n            const cursor = this.cursor;\n            return cursor.close(err => {\n                endStream(this);\n                this.cursor = undefined;\n                return cb(err);\n            });\n        });\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @throws MongoDriverError if this.cursor is undefined\n     */\n    stream(options) {\n        this.streamOptions = options;\n        if (!this.cursor)\n            throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n        return this.cursor.stream(options);\n    }\n    tryNext(callback) {\n        setIsIterator(this);\n        return utils_1.maybePromise(callback, cb => {\n            getCursor(this, (err, cursor) => {\n                if (err || !cursor)\n                    return cb(err); // failed to resume, raise an error\n                return cursor.tryNext(cb);\n            });\n        });\n    }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = 'response';\n/** @event */\nChangeStream.MORE = 'more';\n/** @event */\nChangeStream.INIT = 'init';\n/** @event */\nChangeStream.CLOSE = 'close';\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = 'change';\n/** @event */\nChangeStream.END = 'end';\n/** @event */\nChangeStream.ERROR = 'error';\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(topology, namespace, pipeline = [], options = {}) {\n        super(topology, namespace, options);\n        this.pipeline = pipeline;\n        this.options = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const result = {};\n        for (const optionName of CURSOR_OPTIONS) {\n            if (Reflect.has(this.options, optionName)) {\n                Reflect.set(result, optionName, Reflect.get(this.options, optionName));\n            }\n        }\n        if (this.resumeToken || this.startAtOperationTime) {\n            ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => Reflect.deleteProperty(result, key));\n            if (this.resumeToken) {\n                const resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n                Reflect.set(result, resumeKey, this.resumeToken);\n            }\n            else if (this.startAtOperationTime && utils_1.maxWireVersion(this.server) >= 7) {\n                result.startAtOperationTime = this.startAtOperationTime;\n            }\n        }\n        return result;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(batchName, response) {\n        const cursor = (response === null || response === void 0 ? void 0 : response.cursor) || {};\n        if (cursor.postBatchResumeToken) {\n            this.postBatchResumeToken = cursor.postBatchResumeToken;\n            if (cursor[batchName].length === 0) {\n                this.resumeToken = cursor.postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    _initialize(session, callback) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        execute_operation_1.executeOperation(this.topology, aggregateOperation, (err, response) => {\n            if (err || response == null) {\n                return callback(err);\n            }\n            const server = aggregateOperation.server;\n            if (this.startAtOperationTime == null &&\n                this.resumeAfter == null &&\n                this.startAfter == null &&\n                utils_1.maxWireVersion(server) >= 7) {\n                this.startAtOperationTime = response.operationTime;\n            }\n            this._processBatch('firstBatch', response);\n            this.emit(ChangeStream.INIT, response);\n            this.emit(ChangeStream.RESPONSE);\n            // TODO: NODE-2882\n            callback(undefined, { server, session, response });\n        });\n    }\n    _getMore(batchSize, callback) {\n        super._getMore(batchSize, (err, response) => {\n            if (err) {\n                return callback(err);\n            }\n            this._processBatch('nextBatch', response);\n            this.emit(ChangeStream.MORE, response);\n            this.emit(ChangeStream.RESPONSE);\n            callback(err, response);\n        });\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\nconst CHANGE_STREAM_EVENTS = [\n    ChangeStream.RESUME_TOKEN_CHANGED,\n    ChangeStream.END,\n    ChangeStream.CLOSE\n];\nfunction setIsEmitter(changeStream) {\n    if (changeStream[kMode] === 'iterator') {\n        // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n        throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n    changeStream[kMode] = 'emitter';\n}\nfunction setIsIterator(changeStream) {\n    if (changeStream[kMode] === 'emitter') {\n        // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n        throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n    changeStream[kMode] = 'iterator';\n}\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\nfunction createChangeStreamCursor(changeStream, options) {\n    const changeStreamStageOptions = { fullDocument: options.fullDocument || 'default' };\n    applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n    if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n        changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{ $changeStream: changeStreamStageOptions }].concat(changeStream.pipeline);\n    const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n    const changeStreamCursor = new ChangeStreamCursor(utils_1.getTopology(changeStream.parent), changeStream.namespace, pipeline, cursorOptions);\n    for (const event of CHANGE_STREAM_EVENTS) {\n        changeStreamCursor.on(event, e => changeStream.emit(event, e));\n    }\n    if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n        streamEvents(changeStream, changeStreamCursor);\n    }\n    return changeStreamCursor;\n}\nfunction applyKnownOptions(target, source, optionNames) {\n    optionNames.forEach(name => {\n        if (source[name]) {\n            target[name] = source[name];\n        }\n    });\n    return target;\n}\n// This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\nconst SELECTION_TIMEOUT = 30000;\nfunction waitForTopologyConnected(topology, options, callback) {\n    setTimeout(() => {\n        if (options && options.start == null) {\n            options.start = utils_1.now();\n        }\n        const start = options.start || utils_1.now();\n        const timeout = options.timeout || SELECTION_TIMEOUT;\n        if (topology.isConnected()) {\n            return callback();\n        }\n        if (utils_1.calculateDurationInMs(start) > timeout) {\n            // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n            return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n        }\n        waitForTopologyConnected(topology, options, callback);\n    }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\nfunction closeWithError(changeStream, error, callback) {\n    if (!callback) {\n        changeStream.emit(ChangeStream.ERROR, error);\n    }\n    changeStream.close(() => callback && callback(error));\n}\nfunction streamEvents(changeStream, cursor) {\n    setIsEmitter(changeStream);\n    const stream = changeStream[kCursorStream] || cursor.stream();\n    changeStream[kCursorStream] = stream;\n    stream.on('data', change => processNewChange(changeStream, change));\n    stream.on('error', error => processError(changeStream, error));\n}\nfunction endStream(changeStream) {\n    const cursorStream = changeStream[kCursorStream];\n    if (cursorStream) {\n        ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n        cursorStream.destroy();\n    }\n    changeStream[kCursorStream] = undefined;\n}\nfunction processNewChange(changeStream, change, callback) {\n    var _a;\n    if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        if (callback)\n            callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n    }\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        return closeWithError(changeStream, new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n    }\n    if (change && !change._id) {\n        return closeWithError(changeStream, new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n    }\n    // cache the resume token\n    (_a = changeStream.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id);\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    changeStream.options.startAtOperationTime = undefined;\n    // Return the change\n    if (!callback)\n        return changeStream.emit(ChangeStream.CHANGE, change);\n    return callback(undefined, change);\n}\nfunction processError(changeStream, error, callback) {\n    const cursor = changeStream.cursor;\n    // If the change stream has been closed explicitly, do not process error.\n    if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        if (callback)\n            callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n    }\n    // if the resume succeeds, continue with the new cursor\n    function resumeWithCursor(newCursor) {\n        changeStream.cursor = newCursor;\n        processResumeQueue(changeStream);\n    }\n    // otherwise, raise an error and close the change stream\n    function unresumableError(err) {\n        if (!callback) {\n            changeStream.emit(ChangeStream.ERROR, err);\n        }\n        changeStream.close(() => processResumeQueue(changeStream, err));\n    }\n    if (cursor && error_1.isResumableError(error, utils_1.maxWireVersion(cursor.server))) {\n        changeStream.cursor = undefined;\n        // stop listening to all events from old cursor\n        endStream(changeStream);\n        // close internal cursor, ignore errors\n        cursor.close();\n        const topology = utils_1.getTopology(changeStream.parent);\n        waitForTopologyConnected(topology, { readPreference: cursor.readPreference }, err => {\n            // if the topology can't reconnect, close the stream\n            if (err)\n                return unresumableError(err);\n            // create a new cursor, preserving the old cursor's options\n            const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n            // attempt to continue in emitter mode\n            if (!callback)\n                return resumeWithCursor(newCursor);\n            // attempt to continue in iterator mode\n            newCursor.hasNext(err => {\n                // if there's an error immediately after resuming, close the stream\n                if (err)\n                    return unresumableError(err);\n                resumeWithCursor(newCursor);\n            });\n        });\n        return;\n    }\n    // if initial error wasn't resumable, raise an error and close the change stream\n    return closeWithError(changeStream, error, callback);\n}\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\nfunction getCursor(changeStream, callback) {\n    if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n    }\n    // if a cursor exists and it is open, return it\n    if (changeStream.cursor) {\n        callback(undefined, changeStream.cursor);\n        return;\n    }\n    // no cursor, queue callback until topology reconnects\n    changeStream[kResumeQueue].push(callback);\n}\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\nfunction processResumeQueue(changeStream, err) {\n    while (changeStream[kResumeQueue].length) {\n        const request = changeStream[kResumeQueue].pop();\n        if (!request)\n            break; // Should never occur but TS can't use the length check in the while condition\n        if (!err) {\n            if (changeStream[kClosed]) {\n                // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n                request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n                return;\n            }\n            if (!changeStream.cursor) {\n                request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n                return;\n            }\n        }\n        request(err, changeStream.cursor);\n    }\n}\n//# sourceMappingURL=change_stream.js.map"]},"metadata":{},"sourceType":"script"}