{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableError = exports.isRetryableWriteError = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = void 0;\n/** @internal */\n\nconst kErrorLabels = Symbol('errorLabels');\n/** @internal MongoDB Error Codes */\n\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotMaster: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotMasterNoSlaveOk: 13435,\n  NotMasterOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n}); // From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\n\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n  }\n\n  get name() {\n    return 'MongoError';\n  }\n  /** Legacy name for server error responses */\n\n\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n\n\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n\n}\n\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\n\nclass MongoServerError extends MongoError {\n  constructor(message) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message') this[name] = message[name];\n    }\n  }\n\n  get name() {\n    return 'MongoServerError';\n  }\n\n}\n\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\n\nclass MongoDriverError extends MongoError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDriverError';\n  }\n\n}\n\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nclass MongoAPIError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoAPIError';\n  }\n\n}\n\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\n\nclass MongoRuntimeError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoRuntimeError';\n  }\n\n}\n\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\n\nclass MongoBatchReExecutionError extends MongoAPIError {\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoBatchReExecutionError';\n  }\n\n}\n\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\n\nclass MongoDecompressionError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDecompressionError';\n  }\n\n}\n\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\n\nclass MongoNotConnectedError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoNotConnectedError';\n  }\n\n}\n\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\n\nclass MongoTransactionError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTransactionError';\n  }\n\n}\n\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\n\nclass MongoExpiredSessionError extends MongoAPIError {\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoExpiredSessionError';\n  }\n\n}\n\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\n\nclass MongoKerberosError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoKerberosError';\n  }\n\n}\n\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoChangeStreamError';\n  }\n\n}\n\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\n\nclass MongoTailableCursorError extends MongoAPIError {\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTailableCursorError';\n  }\n\n}\n\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSStreamError';\n  }\n\n}\n\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSChunkError';\n  }\n\n}\n\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorInUseError extends MongoAPIError {\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCursorInUseError';\n  }\n\n}\n\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\n\nclass MongoServerClosedError extends MongoAPIError {\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoServerClosedError';\n  }\n\n}\n\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  get name() {\n    return 'MongoCursorExhaustedError';\n  }\n\n}\n\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\n\nclass MongoTopologyClosedError extends MongoAPIError {\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTopologyClosedError';\n  }\n\n}\n\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\n\nconst kBeforeHandshake = Symbol('beforeHandshake');\n\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\n\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  get name() {\n    return 'MongoNetworkError';\n  }\n\n}\n\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\n\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n  }\n\n  get name() {\n    return 'MongoNetworkTimeoutError';\n  }\n\n}\n\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\n\nclass MongoParseError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoInvalidArgumentError';\n  }\n\n}\n\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoCompatibilityError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCompatibilityError';\n  }\n\n}\n\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingCredentialsError';\n  }\n\n}\n\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingDependencyError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingDependencyError';\n  }\n\n}\n\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\n\nclass MongoSystemError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n\n  get name() {\n    return 'MongoSystemError';\n  }\n\n}\n\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\n\nclass MongoServerSelectionError extends MongoSystemError {\n  constructor(message, reason) {\n    super(message, reason);\n  }\n\n  get name() {\n    return 'MongoServerSelectionError';\n  }\n\n}\n\nexports.MongoServerSelectionError = MongoServerSelectionError;\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\n\n\nclass MongoWriteConcernError extends MongoServerError {\n  constructor(message, result) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  get name() {\n    return 'MongoWriteConcernError';\n  }\n\n}\n\nexports.MongoWriteConcernError = MongoWriteConcernError; // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\nconst RETRYABLE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary]);\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.ExceededTimeLimit]);\n\nfunction isRetryableWriteError(error) {\n  var _a, _b, _c;\n\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has((_c = (_b = (_a = error.result) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : error.code) !== null && _c !== void 0 ? _c : 0);\n  }\n\n  return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\n\nfunction isRetryableError(error) {\n  return (// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || !!error.message.match(/not master/) || !!error.message.match(/node is recovering/)\n  );\n}\n\nexports.isRetryableError = isRetryableError;\nconst SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary]);\nconst SDAM_NOTMASTER_CODES = new Set([exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\n\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return /not master or secondary/.test(err.message) || /node is recovering/.test(err.message);\n}\n\nfunction isNotMasterError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOTMASTER_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return /not master/.test(err.message);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\n\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotMasterError(error);\n}\n\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\n\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexports.isNetworkTimeoutError = isNetworkTimeoutError; // From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\n\nfunction isResumableError(error, wireVersion) {\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error && error instanceof MongoError && error.code === 43) {\n      return true;\n    }\n\n    return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n  }\n\n  if (error && typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n\nexports.isResumableError = isResumableError;","map":{"version":3,"sources":["../src/error.ts"],"names":[],"mappings":";;;;;;AAOA;;AACA,MAAM,YAAY,GAAG,MAAM,CAAC,aAAD,CAA3B;AAEA;;AACa,OAAA,CAAA,mBAAA,GAAsB,MAAM,CAAC,MAAP,CAAc;AAC/C,EAAA,eAAe,EAAE,CAD8B;AAE/C,EAAA,YAAY,EAAE,CAFiC;AAG/C,EAAA,cAAc,EAAE,EAH+B;AAI/C,EAAA,kBAAkB,EAAE,EAJ2B;AAK/C,EAAA,kBAAkB,EAAE,GAL2B;AAM/C,EAAA,iBAAiB,EAAE,GAN4B;AAO/C,EAAA,eAAe,EAAE,IAP8B;AAQ/C,EAAA,SAAS,EAAE,KARoC;AAS/C,EAAA,qBAAqB,EAAE,KATwB;AAU/C,EAAA,+BAA+B,EAAE,KAVc;AAW/C,EAAA,kBAAkB,EAAE,KAX2B;AAY/C,EAAA,oBAAoB,EAAE,KAZyB;AAa/C,EAAA,iBAAiB,EAAE,EAb4B;AAc/C,EAAA,UAAU,EAAE,GAdmC;AAe/C,EAAA,WAAW,EAAE,KAfkC;AAgB/C,EAAA,iBAAiB,EAAE,GAhB4B;AAiB/C,EAAA,6BAA6B,EAAE,GAjBgB;AAkB/C,EAAA,cAAc,EAAE,EAlB+B;AAmB/C,EAAA,gBAAgB,EAAE,KAnB6B;AAoB/C,EAAA,kBAAkB,EAAE,EApB2B;AAqB/C,EAAA,iBAAiB,EAAE,EArB4B;AAsB/C,EAAA,gBAAgB,EAAE,EAtB6B;AAuB/C,EAAA,gBAAgB,EAAE,EAvB6B;AAwB/C,EAAA,uBAAuB,EAAE,EAxBsB;AAyB/C,EAAA,yBAAyB,EAAE;AAzBoB,CAAd,CAAtB,C,CA4Bb;;AACa,OAAA,CAAA,wBAAA,GAA2B,IAAI,GAAJ,CAAgB,CACtD,OAAA,CAAA,mBAAA,CAAoB,eADkC,EAEtD,OAAA,CAAA,mBAAA,CAAoB,YAFkC,EAGtD,OAAA,CAAA,mBAAA,CAAoB,cAHkC,EAItD,OAAA,CAAA,mBAAA,CAAoB,kBAJkC,EAKtD,OAAA,CAAA,mBAAA,CAAoB,kBALkC,EAMtD,OAAA,CAAA,mBAAA,CAAoB,iBANkC,EAOtD,OAAA,CAAA,mBAAA,CAAoB,eAPkC,EAQtD,OAAA,CAAA,mBAAA,CAAoB,SARkC,EAStD,OAAA,CAAA,mBAAA,CAAoB,qBATkC,EAUtD,OAAA,CAAA,mBAAA,CAAoB,+BAVkC,EAWtD,OAAA,CAAA,mBAAA,CAAoB,kBAXkC,EAYtD,OAAA,CAAA,mBAAA,CAAoB,oBAZkC,EAatD,OAAA,CAAA,mBAAA,CAAoB,iBAbkC,EActD,OAAA,CAAA,mBAAA,CAAoB,UAdkC,EAetD,OAAA,CAAA,mBAAA,CAAoB,WAfkC,EAgBtD,OAAA,CAAA,mBAAA,CAAoB,iBAhBkC,EAiBtD,OAAA,CAAA,mBAAA,CAAoB,6BAjBkC,EAkBtD,OAAA,CAAA,mBAAA,CAAoB,cAlBkC,CAAhB,CAA3B;AA8Bb;;;;;;AAMG;;AACH,MAAa,UAAb,SAAgC,KAAhC,CAAqC;AAWnC,EAAA,WAAA,CAAY,OAAZ,EAAmC;AACjC,QAAI,OAAO,YAAY,KAAvB,EAA8B;AAC5B,YAAM,OAAO,CAAC,OAAd;AACD,KAFD,MAEO;AACL,YAAM,OAAN;AACD;AACF;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,YAAP;AACD;AAED;;;AACU,MAAN,MAAM,GAAA;AACR,WAAO,KAAK,OAAZ;AACD;AAED;;;;;AAKG;;;AACH,EAAA,aAAa,CAAC,KAAD,EAAc;AACzB,QAAI,KAAK,YAAL,KAAsB,IAA1B,EAAgC;AAC9B,aAAO,KAAP;AACD;;AAED,WAAO,KAAK,YAAL,EAAmB,GAAnB,CAAuB,KAAvB,CAAP;AACD;;AAED,EAAA,aAAa,CAAC,KAAD,EAAc;AACzB,QAAI,KAAK,YAAL,KAAsB,IAA1B,EAAgC;AAC9B,WAAK,YAAL,IAAqB,IAAI,GAAJ,EAArB;AACD;;AAED,SAAK,YAAL,EAAmB,GAAnB,CAAuB,KAAvB;AACD;;AAEc,MAAX,WAAW,GAAA;AACb,WAAO,KAAK,YAAL,IAAqB,KAAK,CAAC,IAAN,CAAW,KAAK,YAAL,CAAX,CAArB,GAAsD,EAA7D;AACD;;AApDkC;;AAArC,OAAA,CAAA,UAAA,GAAA,UAAA;AAuDA;;;;;AAKG;;AACH,MAAa,gBAAb,SAAsC,UAAtC,CAAgD;AAO9C,EAAA,WAAA,CAAY,OAAZ,EAAqC;AACnC,UAAM,OAAO,CAAC,OAAR,IAAmB,OAAO,CAAC,MAA3B,IAAqC,OAAO,CAAC,IAA7C,IAAqD,KAA3D;;AACA,QAAI,OAAO,CAAC,WAAZ,EAAyB;AACvB,WAAK,YAAL,IAAqB,IAAI,GAAJ,CAAQ,OAAO,CAAC,WAAhB,CAArB;AACD;;AAED,SAAK,MAAM,IAAX,IAAmB,OAAnB,EAA4B;AAC1B,UAAI,IAAI,KAAK,aAAT,IAA0B,IAAI,KAAK,QAAnC,IAA+C,IAAI,KAAK,SAA5D,EACE,KAAK,IAAL,IAAa,OAAO,CAAC,IAAD,CAApB;AACH;AACF;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,kBAAP;AACD;;AArB6C;;AAAhD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAwBA;;;;;AAKG;;AACH,MAAa,gBAAb,SAAsC,UAAtC,CAAgD;AAC9C,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,kBAAP;AACD;;AAP6C;;AAAhD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAUA;;;;;;;;AAQG;;AAEH,MAAa,aAAb,SAAmC,gBAAnC,CAAmD;AACjD,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,eAAP;AACD;;AAPgD;;AAAnD,OAAA,CAAA,aAAA,GAAA,aAAA;AAUA;;;;;;;;;AASG;;AACH,MAAa,iBAAb,SAAuC,gBAAvC,CAAuD;AACrD,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,mBAAP;AACD;;AAPoD;;AAAvD,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,0BAAb,SAAgD,aAAhD,CAA6D;AAC3D,EAAA,WAAA,CAAY,OAAO,GAAG,mEAAtB,EAAyF;AACvF,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,4BAAP;AACD;;AAP0D;;AAA7D,OAAA,CAAA,0BAAA,GAAA,0BAAA;AAUA;;;;;;AAMG;;AACH,MAAa,uBAAb,SAA6C,iBAA7C,CAA8D;AAC5D,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,yBAAP;AACD;;AAP2D;;AAA9D,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,sBAAb,SAA4C,aAA5C,CAAyD;AACvD,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,wBAAP;AACD;;AAPsD;;AAAzD,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,qBAAb,SAA2C,aAA3C,CAAwD;AACtD,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,uBAAP;AACD;;AAPqD;;AAAxD,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,wBAAb,SAA8C,aAA9C,CAA2D;AACzD,EAAA,WAAA,CAAY,OAAO,GAAG,qCAAtB,EAA2D;AACzD,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,0BAAP;AACD;;AAPwD;;AAA3D,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,kBAAb,SAAwC,iBAAxC,CAAyD;AACvD,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,oBAAP;AACD;;AAPsD;;AAAzD,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAUA;;;;;AAKG;;AACH,MAAa,sBAAb,SAA4C,iBAA5C,CAA6D;AAC3D,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,wBAAP;AACD;;AAP0D;;AAA7D,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAUA;;;;;AAKG;;AACH,MAAa,wBAAb,SAA8C,aAA9C,CAA2D;AACzD,EAAA,WAAA,CAAY,OAAO,GAAG,iDAAtB,EAAuE;AACrE,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,0BAAP;AACD;;AAPwD;;AAA3D,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAUA;;;;AAIG;;AACH,MAAa,sBAAb,SAA4C,iBAA5C,CAA6D;AAC3D,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,wBAAP;AACD;;AAP0D;;AAA7D,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,qBAAb,SAA2C,iBAA3C,CAA4D;AAC1D,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,uBAAP;AACD;;AAPyD;;AAA5D,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,qBAAb,SAA2C,aAA3C,CAAwD;AACtD,EAAA,WAAA,CAAY,OAAO,GAAG,+BAAtB,EAAqD;AACnD,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,uBAAP;AACD;;AAPqD;;AAAxD,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,sBAAb,SAA4C,aAA5C,CAAyD;AACvD,EAAA,WAAA,CAAY,OAAO,GAAG,kBAAtB,EAAwC;AACtC,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,wBAAP;AACD;;AAPsD;;AAAzD,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAUA;;;;;AAKG;;AACH,MAAa,yBAAb,SAA+C,aAA/C,CAA4D;AAC1D,EAAA,WAAA,CAAY,OAAZ,EAA4B;AAC1B,UAAM,OAAO,IAAI,qBAAjB;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,2BAAP;AACD;;AAPyD;;AAA5D,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAUA;;;;;;AAMG;;AACH,MAAa,wBAAb,SAA8C,aAA9C,CAA2D;AACzD,EAAA,WAAA,CAAY,OAAO,GAAG,oBAAtB,EAA0C;AACxC,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,0BAAP;AACD;;AAPwD;;AAA3D,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAUA;;AACA,MAAM,gBAAgB,GAAG,MAAM,CAAC,iBAAD,CAA/B;;AACA,SAAgB,6BAAhB,CAA8C,GAA9C,EAAoE;AAClE,SAAO,GAAG,CAAC,gBAAD,CAAH,KAA0B,IAAjC;AACD;;AAFD,OAAA,CAAA,6BAAA,GAAA,6BAAA;AAUA;;;;AAIG;;AACH,MAAa,iBAAb,SAAuC,UAAvC,CAAiD;AAI/C,EAAA,WAAA,CAAY,OAAZ,EAAqC,OAArC,EAAuE;AACrE,UAAM,OAAN;;AAEA,QAAI,OAAO,IAAI,OAAO,OAAO,CAAC,eAAf,KAAmC,SAAlD,EAA6D;AAC3D,WAAK,gBAAL,IAAyB,OAAO,CAAC,eAAjC;AACD;AACF;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,mBAAP;AACD;;AAd8C;;AAAjD,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAiBA;;;;;;;AAOG;;AACH,MAAa,wBAAb,SAA8C,iBAA9C,CAA+D;AAC7D,EAAA,WAAA,CAAY,OAAZ,EAA6B,OAA7B,EAA+D;AAC7D,UAAM,OAAN,EAAe,OAAf;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,0BAAP;AACD;;AAP4D;;AAA/D,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAUA;;;;AAIG;;AACH,MAAa,eAAb,SAAqC,gBAArC,CAAqD;AACnD,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,iBAAP;AACD;;AAPkD;;AAArD,OAAA,CAAA,eAAA,GAAA,eAAA;AAUA;;;;;;;AAOG;;AACH,MAAa,yBAAb,SAA+C,aAA/C,CAA4D;AAC1D,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,2BAAP;AACD;;AAPyD;;AAA5D,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAUA;;;;;;;AAOG;;AACH,MAAa,uBAAb,SAA6C,aAA7C,CAA0D;AACxD,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,yBAAP;AACD;;AAPuD;;AAA1D,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAUA;;;;;;;AAOG;;AACH,MAAa,4BAAb,SAAkD,aAAlD,CAA+D;AAC7D,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,8BAAP;AACD;;AAP4D;;AAA/D,OAAA,CAAA,4BAAA,GAAA,4BAAA;AAUA;;;;;AAKG;;AACH,MAAa,2BAAb,SAAiD,aAAjD,CAA8D;AAC5D,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,6BAAP;AACD;;AAP2D;;AAA9D,OAAA,CAAA,2BAAA,GAAA,2BAAA;AASA;;;;AAIG;;AACH,MAAa,gBAAb,SAAsC,UAAtC,CAAgD;AAI9C,EAAA,WAAA,CAAY,OAAZ,EAA6B,MAA7B,EAAwD;AACtD,QAAI,MAAM,IAAI,MAAM,CAAC,KAArB,EAA4B;AAC1B,YAAM,MAAM,CAAC,KAAP,CAAa,OAAb,IAAwB,MAAM,CAAC,KAArC;AACD,KAFD,MAEO;AACL,YAAM,OAAN;AACD;;AAED,QAAI,MAAJ,EAAY;AACV,WAAK,MAAL,GAAc,MAAd;AACD;AACF;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,kBAAP;AACD;;AAlB6C;;AAAhD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAqBA;;;;AAIG;;AACH,MAAa,yBAAb,SAA+C,gBAA/C,CAA+D;AAC7D,EAAA,WAAA,CAAY,OAAZ,EAA6B,MAA7B,EAAwD;AACtD,UAAM,OAAN,EAAe,MAAf;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,2BAAP;AACD;;AAP4D;;AAA/D,OAAA,CAAA,yBAAA,GAAA,yBAAA;;AAUA,SAAS,4BAAT,CAAsC,KAAtC,EAAgD;AAC9C,QAAM,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAlB,CAAf;;AAEA,MAAI,MAAM,CAAC,EAAP,KAAc,CAAlB,EAAqB;AACnB,IAAA,MAAM,CAAC,EAAP,GAAY,CAAZ;AACA,WAAO,MAAM,CAAC,MAAd;AACA,WAAO,MAAM,CAAC,IAAd;AACA,WAAO,MAAM,CAAC,QAAd;AACD;;AAED,SAAO,MAAP;AACD;AAED;;;;AAIG;;;AACH,MAAa,sBAAb,SAA4C,gBAA5C,CAA4D;AAK1D,EAAA,WAAA,CAAY,OAAZ,EAAuC,MAAvC,EAAwD;AACtD,QAAI,MAAM,IAAI,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,WAArB,CAAd,EAAiD;AAC/C,MAAA,OAAO,CAAC,WAAR,GAAsB,MAAM,CAAC,WAA7B;AACD;;AAED,UAAM,OAAN;AACA,SAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;;AAEA,QAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAK,MAAL,GAAc,4BAA4B,CAAC,MAAD,CAA1C;AACD;AACF;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,wBAAP;AACD;;AApByD;;AAA5D,OAAA,CAAA,sBAAA,GAAA,sBAAA,C,CAuBA;;AACA,MAAM,qBAAqB,GAAG,IAAI,GAAJ,CAAgB,CAC5C,OAAA,CAAA,mBAAA,CAAoB,eADwB,EAE5C,OAAA,CAAA,mBAAA,CAAoB,YAFwB,EAG5C,OAAA,CAAA,mBAAA,CAAoB,cAHwB,EAI5C,OAAA,CAAA,mBAAA,CAAoB,kBAJwB,EAK5C,OAAA,CAAA,mBAAA,CAAoB,kBALwB,EAM5C,OAAA,CAAA,mBAAA,CAAoB,eANwB,EAO5C,OAAA,CAAA,mBAAA,CAAoB,SAPwB,EAQ5C,OAAA,CAAA,mBAAA,CAAoB,qBARwB,EAS5C,OAAA,CAAA,mBAAA,CAAoB,+BATwB,EAU5C,OAAA,CAAA,mBAAA,CAAoB,kBAVwB,EAW5C,OAAA,CAAA,mBAAA,CAAoB,oBAXwB,CAAhB,CAA9B;AAcA,MAAM,2BAA2B,GAAG,IAAI,GAAJ,CAAgB,CAClD,OAAA,CAAA,mBAAA,CAAoB,qBAD8B,EAElD,OAAA,CAAA,mBAAA,CAAoB,+BAF8B,EAGlD,OAAA,CAAA,mBAAA,CAAoB,SAH8B,EAIlD,OAAA,CAAA,mBAAA,CAAoB,kBAJ8B,EAKlD,OAAA,CAAA,mBAAA,CAAoB,oBAL8B,EAMlD,OAAA,CAAA,mBAAA,CAAoB,kBAN8B,EAOlD,OAAA,CAAA,mBAAA,CAAoB,kBAP8B,EAQlD,OAAA,CAAA,mBAAA,CAAoB,YAR8B,EASlD,OAAA,CAAA,mBAAA,CAAoB,eAT8B,EAUlD,OAAA,CAAA,mBAAA,CAAoB,cAV8B,EAWlD,OAAA,CAAA,mBAAA,CAAoB,eAX8B,EAYlD,OAAA,CAAA,mBAAA,CAAoB,iBAZ8B,CAAhB,CAApC;;AAeA,SAAgB,qBAAhB,CAAsC,KAAtC,EAAuD;;;AACrD,MAAI,KAAK,YAAY,sBAArB,EAA6C;AAC3C,WAAO,2BAA2B,CAAC,GAA5B,CAAgC,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,MAAN,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,EAAlB,GAAsB,KAAK,CAAC,IAA5B,MAAgC,IAAhC,IAAgC,EAAA,KAAA,KAAA,CAAhC,GAAgC,EAAhC,GAAoC,CAApE,CAAP;AACD;;AACD,SAAO,OAAO,KAAK,CAAC,IAAb,KAAsB,QAAtB,IAAkC,2BAA2B,CAAC,GAA5B,CAAgC,KAAK,CAAC,IAAtC,CAAzC;AACD;;AALD,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAOA;;AACA,SAAgB,gBAAhB,CAAiC,KAAjC,EAAkD;AAChD,SACE;AACC,WAAO,KAAK,CAAC,IAAb,KAAsB,QAAtB,IAAkC,qBAAqB,CAAC,GAAtB,CAA0B,KAAK,CAAC,IAAhC,CAAnC,IACA,KAAK,YAAY,iBADjB,IAEA,CAAC,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAoB,YAApB,CAFF,IAGA,CAAC,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAoB,oBAApB;AALJ;AAOD;;AARD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAUA,MAAM,qBAAqB,GAAG,IAAI,GAAJ,CAAgB,CAC5C,OAAA,CAAA,mBAAA,CAAoB,kBADwB,EAE5C,OAAA,CAAA,mBAAA,CAAoB,kBAFwB,EAG5C,OAAA,CAAA,mBAAA,CAAoB,qBAHwB,EAI5C,OAAA,CAAA,mBAAA,CAAoB,+BAJwB,EAK5C,OAAA,CAAA,mBAAA,CAAoB,oBALwB,CAAhB,CAA9B;AAQA,MAAM,oBAAoB,GAAG,IAAI,GAAJ,CAAgB,CAC3C,OAAA,CAAA,mBAAA,CAAoB,SADuB,EAE3C,OAAA,CAAA,mBAAA,CAAoB,kBAFuB,EAG3C,OAAA,CAAA,mBAAA,CAAoB,gBAHuB,CAAhB,CAA7B;AAMA,MAAM,mCAAmC,GAAG,IAAI,GAAJ,CAAgB,CAC1D,OAAA,CAAA,mBAAA,CAAoB,qBADsC,EAE1D,OAAA,CAAA,mBAAA,CAAoB,kBAFsC,CAAhB,CAA5C;;AAKA,SAAS,iBAAT,CAA2B,GAA3B,EAA0C;AACxC,MAAI,OAAO,GAAG,CAAC,IAAX,KAAoB,QAAxB,EAAkC;AAChC;AACA,WAAO,qBAAqB,CAAC,GAAtB,CAA0B,GAAG,CAAC,IAA9B,CAAP;AACD;;AAED,SAAO,0BAA0B,IAA1B,CAA+B,GAAG,CAAC,OAAnC,KAA+C,qBAAqB,IAArB,CAA0B,GAAG,CAAC,OAA9B,CAAtD;AACD;;AAED,SAAS,gBAAT,CAA0B,GAA1B,EAAyC;AACvC,MAAI,OAAO,GAAG,CAAC,IAAX,KAAoB,QAAxB,EAAkC;AAChC;AACA,WAAO,oBAAoB,CAAC,GAArB,CAAyB,GAAG,CAAC,IAA7B,CAAP;AACD;;AAED,MAAI,iBAAiB,CAAC,GAAD,CAArB,EAA4B;AAC1B,WAAO,KAAP;AACD;;AAED,SAAO,aAAa,IAAb,CAAkB,GAAG,CAAC,OAAtB,CAAP;AACD;;AAED,SAAgB,uBAAhB,CAAwC,GAAxC,EAAuD;AACrD,SAAO,CAAC,EAAE,OAAO,GAAG,CAAC,IAAX,KAAoB,QAApB,IAAgC,mCAAmC,CAAC,GAApC,CAAwC,GAAG,CAAC,IAA5C,CAAlC,CAAR;AACD;;AAFD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAIA;;;;;;AAMG;;AACH,SAAgB,wBAAhB,CAAyC,KAAzC,EAA0D;AACxD;AACA;AACA,MAAI,KAAK,YAAY,eAAjB,IAAoC,KAAK,IAAI,IAAjD,EAAuD;AACrD,WAAO,IAAP;AACD;;AAED,SAAO,iBAAiB,CAAC,KAAD,CAAjB,IAA4B,gBAAgB,CAAC,KAAD,CAAnD;AACD;;AARD,OAAA,CAAA,wBAAA,GAAA,wBAAA;;AAUA,SAAgB,qBAAhB,CAAsC,GAAtC,EAAqD;AACnD,SAAO,CAAC,EAAE,GAAG,YAAY,iBAAf,IAAoC,GAAG,CAAC,OAAJ,CAAY,KAAZ,CAAkB,WAAlB,CAAtC,CAAR;AACD;;AAFD,OAAA,CAAA,qBAAA,GAAA,qBAAA,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAgB,gBAAhB,CAAiC,KAAjC,EAAqD,WAArD,EAAyE;AACvE,MAAI,KAAK,YAAY,iBAArB,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED,MAAI,WAAW,IAAI,IAAf,IAAuB,WAAW,IAAI,CAA1C,EAA6C;AAC3C;AACA,QAAI,KAAK,IAAI,KAAK,YAAY,UAA1B,IAAwC,KAAK,CAAC,IAAN,KAAe,EAA3D,EAA+D;AAC7D,aAAO,IAAP;AACD;;AACD,WAAO,KAAK,YAAY,UAAjB,IAA+B,KAAK,CAAC,aAAN,CAAoB,4BAApB,CAAtC;AACD;;AAED,MAAI,KAAK,IAAI,OAAO,KAAK,CAAC,IAAb,KAAsB,QAAnC,EAA6C;AAC3C,WAAO,OAAA,CAAA,wBAAA,CAAyB,GAAzB,CAA6B,KAAK,CAAC,IAAnC,CAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAjBD,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableError = exports.isRetryableWriteError = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = void 0;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotMaster: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotMasterNoSlaveOk: 13435,\n    NotMasterOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotMaster,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n    exports.MONGODB_ERROR_CODES.NotMasterOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n    constructor(message) {\n        if (message instanceof Error) {\n            super(message.message);\n        }\n        else {\n            super(message);\n        }\n    }\n    get name() {\n        return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n    get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label) {\n        if (this[kErrorLabels] == null) {\n            return false;\n        }\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        if (this[kErrorLabels] == null) {\n            this[kErrorLabels] = new Set();\n        }\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n    constructor(message) {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        for (const name in message) {\n            if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n                this[name] = message[name];\n        }\n    }\n    get name() {\n        return 'MongoServerError';\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDriverError';\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAPIError';\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoRuntimeError';\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n    constructor(message = 'This batch has already been executed, create new batch to execute') {\n        super(message);\n    }\n    get name() {\n        return 'MongoBatchReExecutionError';\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDecompressionError';\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoNotConnectedError';\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoTransactionError';\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n    constructor(message = 'Cannot use a session that has ended') {\n        super(message);\n    }\n    get name() {\n        return 'MongoExpiredSessionError';\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoKerberosError';\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoChangeStreamError';\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n    constructor(message = 'Tailable cursor does not support this operation') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTailableCursorError';\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSStreamError';\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSChunkError';\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n    constructor(message = 'Cursor is already initialized') {\n        super(message);\n    }\n    get name() {\n        return 'MongoCursorInUseError';\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n    constructor(message = 'Server is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoServerClosedError';\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n    constructor(message) {\n        super(message || 'Cursor is exhausted');\n    }\n    get name() {\n        return 'MongoCursorExhaustedError';\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n    constructor(message = 'Topology is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTopologyClosedError';\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n    constructor(message, options) {\n        super(message);\n        if (options && typeof options.beforeHandshake === 'boolean') {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return 'MongoNetworkError';\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoNetworkTimeoutError';\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoParseError';\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoInvalidArgumentError';\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCompatibilityError';\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingCredentialsError';\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingDependencyError';\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n    constructor(message, reason) {\n        if (reason && reason.error) {\n            super(reason.error.message || reason.error);\n        }\n        else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n    }\n    get name() {\n        return 'MongoSystemError';\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n    constructor(message, reason) {\n        super(message, reason);\n    }\n    get name() {\n        return 'MongoServerSelectionError';\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n    const output = Object.assign({}, input);\n    if (output.ok === 0) {\n        output.ok = 1;\n        delete output.errmsg;\n        delete output.code;\n        delete output.codeName;\n    }\n    return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n    constructor(message, result) {\n        if (result && Array.isArray(result.errorLabels)) {\n            message.errorLabels = result.errorLabels;\n        }\n        super(message);\n        this.errInfo = message.errInfo;\n        if (result != null) {\n            this.result = makeWriteConcernResultObject(result);\n        }\n    }\n    get name() {\n        return 'MongoWriteConcernError';\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotMaster,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n    exports.MONGODB_ERROR_CODES.NotMasterOrSecondary\n]);\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotMaster,\n    exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n    exports.MONGODB_ERROR_CODES.NotMasterOrSecondary,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\nfunction isRetryableWriteError(error) {\n    var _a, _b, _c;\n    if (error instanceof MongoWriteConcernError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has((_c = (_b = (_a = error.result) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : error.code) !== null && _c !== void 0 ? _c : 0);\n    }\n    return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableError(error) {\n    return (\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    (typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code)) ||\n        error instanceof MongoNetworkError ||\n        !!error.message.match(/not master/) ||\n        !!error.message.match(/node is recovering/));\n}\nexports.isRetryableError = isRetryableError;\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotMasterOrSecondary\n]);\nconst SDAM_NOTMASTER_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotMaster,\n    exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return /not master or secondary/.test(err.message) || /node is recovering/.test(err.message);\n}\nfunction isNotMasterError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOTMASTER_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return /not master/.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotMasterError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\n// From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\nfunction isResumableError(error, wireVersion) {\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error && error instanceof MongoError && error.code === 43) {\n            return true;\n        }\n        return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n    }\n    if (error && typeof error.code === 'number') {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\nexports.isResumableError = isResumableError;\n//# sourceMappingURL=error.js.map"]},"metadata":{},"sourceType":"script"}