{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst bson_1 = require(\"../bson\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst error_1 = require(\"../error\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst stream_1 = require(\"stream\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\n\n\nconst kId = Symbol('id');\n/** @internal */\n\nconst kDocuments = Symbol('documents');\n/** @internal */\n\nconst kServer = Symbol('server');\n/** @internal */\n\nconst kNamespace = Symbol('namespace');\n/** @internal */\n\nconst kTopology = Symbol('topology');\n/** @internal */\n\nconst kSession = Symbol('session');\n/** @internal */\n\nconst kOptions = Symbol('options');\n/** @internal */\n\nconst kTransform = Symbol('transform');\n/** @internal */\n\nconst kInitialized = Symbol('initialized');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kKilled = Symbol('killed');\n/** @public */\n\nexports.CURSOR_FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(topology, namespace, options = {}) {\n    super();\n    this[kTopology] = topology;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary,\n      ...bson_1.pluckBSONSerializeOptions(options)\n    };\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n\n    if (options.comment != null) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (options.session instanceof sessions_1.ClientSession) {\n      this[kSession] = options.session;\n    }\n  }\n\n  get id() {\n    return this[kId];\n  }\n  /** @internal */\n\n\n  get topology() {\n    return this[kTopology];\n  }\n  /** @internal */\n\n\n  get server() {\n    return this[kServer];\n  }\n\n  get namespace() {\n    return this[kNamespace];\n  }\n\n  get readPreference() {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern() {\n    return this[kOptions].readConcern;\n  }\n  /** @internal */\n\n\n  get session() {\n    return this[kSession];\n  }\n\n  set session(clientSession) {\n    this[kSession] = clientSession;\n  }\n  /** @internal */\n\n\n  get cursorOptions() {\n    return this[kOptions];\n  }\n\n  get closed() {\n    return this[kClosed];\n  }\n\n  get killed() {\n    return this[kKilled];\n  }\n\n  get loadBalanced() {\n    return this[kTopology].loadBalanced;\n  }\n  /** Returns current buffered documents length */\n\n\n  bufferedCount() {\n    return this[kDocuments].length;\n  }\n  /** Returns current buffered documents */\n\n\n  readBufferedDocuments(number) {\n    return this[kDocuments].splice(0, number !== null && number !== void 0 ? number : this[kDocuments].length);\n  }\n\n  [Symbol.asyncIterator]() {\n    return {\n      next: () => this.next().then(value => value != null ? {\n        value,\n        done: false\n      } : {\n        value: undefined,\n        done: true\n      })\n    };\n  }\n\n  stream(options) {\n    if (options === null || options === void 0 ? void 0 : options.transform) {\n      const transform = options.transform;\n      const readable = makeCursorStream(this);\n      return readable.pipe(new stream_1.Transform({\n        objectMode: true,\n        highWaterMark: 1,\n\n        transform(chunk, _, callback) {\n          try {\n            const transformed = transform(chunk);\n            callback(undefined, transformed);\n          } catch (err) {\n            callback(err);\n          }\n        }\n\n      }));\n    }\n\n    return makeCursorStream(this);\n  }\n\n  hasNext(callback) {\n    return utils_1.maybePromise(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(undefined, false);\n      }\n\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n\n      next(this, true, (err, doc) => {\n        if (err) return done(err);\n\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n\n        done(undefined, false);\n      });\n    });\n  }\n\n  next(callback) {\n    return utils_1.maybePromise(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n\n      next(this, true, done);\n    });\n  }\n\n  tryNext(callback) {\n    return utils_1.maybePromise(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n\n      next(this, false, done);\n    });\n  }\n\n  forEach(iterator, callback) {\n    if (typeof iterator !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n\n    return utils_1.maybePromise(callback, done => {\n      const transform = this[kTransform];\n\n      const fetchDocs = () => {\n        next(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result; // NOTE: no need to transform because `next` will do this automatically\n\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n\n          if (result === false) return done(); // these do need to be transformed since they are copying the rest of the batch\n\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(transform ? transform(internalDocs[i]) : internalDocs[i]);\n            } catch (error) {\n              return done(error);\n            }\n\n            if (result === false) return done();\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  close(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n    return utils_1.maybePromise(callback, done => cleanupCursor(this, {\n      needsToEmitClosed\n    }, done));\n  }\n\n  toArray(callback) {\n    return utils_1.maybePromise(callback, done => {\n      const docs = [];\n      const transform = this[kTransform];\n\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs); // NOTE: no need to transform because `next` will do this automatically\n\n          docs.push(doc); // these do need to be transformed since they are copying the rest of the batch\n\n          const internalDocs = transform ? this[kDocuments].splice(0, this[kDocuments].length).map(transform) : this[kDocuments].splice(0, this[kDocuments].length); // TODO(NODE-3283): Improve transform typing\n\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n\n\n  addCursorFlag(flag, value) {\n    assertUninitialized(this);\n\n    if (!exports.CURSOR_FLAGS.includes(flag)) {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n\n\n  map(transform) {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n\n\n  withReadPreference(readPreference) {\n    assertUninitialized(this);\n\n    if (readPreference instanceof read_preference_1.ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    } else {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n\n\n  withReadConcern(readConcern) {\n    assertUninitialized(this);\n    const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n      readConcern\n    });\n\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    assertUninitialized(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n\n\n  batchSize(value) {\n    assertUninitialized(this);\n\n    if (this[kOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n\n\n  rewind() {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n    const session = this[kSession];\n\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false && !session.hasEnded) {\n        session.endSession();\n      }\n\n      this[kSession] = undefined;\n    }\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n\n    if (cursorId == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n\n    if (server == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n\n    server.getMore(cursorNs, cursorId, { ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    }, callback);\n  }\n\n}\n\nexports.AbstractCursor = AbstractCursor;\n/** @event */\n\nAbstractCursor.CLOSE = 'close';\n\nfunction nextDocument(cursor) {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n\n  const doc = cursor[kDocuments].shift();\n\n  if (doc) {\n    const transform = cursor[kTransform];\n\n    if (transform) {\n      return transform(doc);\n    }\n\n    return doc;\n  }\n\n  return null;\n}\n\nfunction next(cursor, blocking, callback) {\n  const cursorId = cursor[kId];\n\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument(cursor));\n    return;\n  }\n\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    if (cursor[kSession] == null && cursor[kTopology].hasSessionSupport()) {\n      cursor[kSession] = cursor[kTopology].startSession({\n        owner: cursor,\n        explicit: false\n      });\n    }\n\n    cursor._initialize(cursor[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        cursor[kServer] = state.server;\n        cursor[kSession] = state.session;\n\n        if (response.cursor) {\n          cursor[kId] = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n\n          if (response.cursor.ns) {\n            cursor[kNamespace] = utils_1.ns(response.cursor.ns);\n          }\n\n          cursor[kDocuments] = response.cursor.firstBatch;\n        } else {\n          // NOTE: This is for support of older servers (<3.2) which do not use commands\n          cursor[kId] = typeof response.cursorId === 'number' ? bson_1.Long.fromNumber(response.cursorId) : response.cursorId;\n          cursor[kDocuments] = response.documents;\n        } // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n\n\n        if (cursor[kId] == null) {\n          cursor[kId] = bson_1.Long.ZERO; // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n\n          cursor[kDocuments] = [state.response];\n        }\n      } // the cursor is now initialized, even if an error occurred or it is dead\n\n\n      cursor[kInitialized] = true;\n\n      if (err || cursorIsDead(cursor)) {\n        return cleanupCursor(cursor, {\n          error: err\n        }, () => callback(err, nextDocument(cursor)));\n      }\n\n      next(cursor, blocking, callback);\n    });\n\n    return;\n  }\n\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  } // otherwise need to call getMore\n\n\n  const batchSize = cursor[kOptions].batchSize || 1000;\n\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, {\n        error: err\n      }, () => callback(err, nextDocument(cursor)));\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n\n    next(cursor, blocking, callback);\n  });\n}\n\nfunction cursorIsDead(cursor) {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\n\nfunction cleanupCursor(cursor, options, callback) {\n  var _a;\n\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n  const needsToEmitClosed = (_a = options === null || options === void 0 ? void 0 : options.needsToEmitClosed) !== null && _a !== void 0 ? _a : cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = bson_1.Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, callback);\n      }\n\n      if (!session.inTransaction()) {\n        sessions_1.maybeClearPinnedConnection(session, {\n          error\n        });\n      }\n    }\n\n    return callback();\n  }\n\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n\n      if (!session.inTransaction()) {\n        sessions_1.maybeClearPinnedConnection(session, {\n          error\n        });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n\n  cursor[kKilled] = true;\n  server.killCursors(cursorNs, [cursorId], { ...bson_1.pluckBSONSerializeOptions(cursor[kOptions]),\n    session\n  }, () => completeCleanup());\n}\n/** @internal */\n\n\nfunction assertUninitialized(cursor) {\n  if (cursor[kInitialized]) {\n    throw new error_1.MongoCursorInUseError();\n  }\n}\n\nexports.assertUninitialized = assertUninitialized;\n\nfunction makeCursorStream(cursor) {\n  const readable = new stream_1.Readable({\n    objectMode: true,\n    autoDestroy: false,\n    highWaterMark: 1\n  });\n  let initialized = false;\n  let reading = false;\n  let needToClose = true; // NOTE: we must close the cursor if we never read from it, use `_construct` in future node versions\n\n  readable._read = function () {\n    if (initialized === false) {\n      needToClose = false;\n      initialized = true;\n    }\n\n    if (!reading) {\n      reading = true;\n      readNext();\n    }\n  };\n\n  readable._destroy = function (error, cb) {\n    if (needToClose) {\n      cursor.close(err => process.nextTick(cb, err || error));\n    } else {\n      cb(error);\n    }\n  };\n\n  function readNext() {\n    needToClose = false;\n    next(cursor, true, (err, result) => {\n      needToClose = err ? !cursor.closed : result != null;\n\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          cursor.close();\n          return readable.push(null);\n        } // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n\n\n        if (err.message.match(/interrupted/)) {\n          return readable.push(null);\n        }\n\n        return readable.destroy(err);\n      }\n\n      if (result == null) {\n        readable.push(null);\n      } else if (readable.destroyed) {\n        cursor.close();\n      } else {\n        if (readable.push(result)) {\n          return readNext();\n        }\n\n        reading = false;\n      }\n    });\n  }\n\n  return readable;\n}","map":{"version":3,"sources":["../../src/cursor/abstract_cursor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst utils_1 = require(\"../utils\");\nconst bson_1 = require(\"../bson\");\nconst sessions_1 = require(\"../sessions\");\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst stream_1 = require(\"stream\");\nconst read_concern_1 = require(\"../read_concern\");\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kTopology = Symbol('topology');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @public */\nexports.CURSOR_FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(topology, namespace, options = {}) {\n        super();\n        this[kTopology] = topology;\n        this[kNamespace] = namespace;\n        this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n        this[kInitialized] = false;\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kOptions] = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference\n                ? options.readPreference\n                : read_preference_1.ReadPreference.primary,\n            ...bson_1.pluckBSONSerializeOptions(options)\n        };\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this[kOptions].readConcern = readConcern;\n        }\n        if (typeof options.batchSize === 'number') {\n            this[kOptions].batchSize = options.batchSize;\n        }\n        if (options.comment != null) {\n            this[kOptions].comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            this[kOptions].maxTimeMS = options.maxTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this[kSession] = options.session;\n        }\n    }\n    get id() {\n        return this[kId];\n    }\n    /** @internal */\n    get topology() {\n        return this[kTopology];\n    }\n    /** @internal */\n    get server() {\n        return this[kServer];\n    }\n    get namespace() {\n        return this[kNamespace];\n    }\n    get readPreference() {\n        return this[kOptions].readPreference;\n    }\n    get readConcern() {\n        return this[kOptions].readConcern;\n    }\n    /** @internal */\n    get session() {\n        return this[kSession];\n    }\n    set session(clientSession) {\n        this[kSession] = clientSession;\n    }\n    /** @internal */\n    get cursorOptions() {\n        return this[kOptions];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get killed() {\n        return this[kKilled];\n    }\n    get loadBalanced() {\n        return this[kTopology].loadBalanced;\n    }\n    /** Returns current buffered documents length */\n    bufferedCount() {\n        return this[kDocuments].length;\n    }\n    /** Returns current buffered documents */\n    readBufferedDocuments(number) {\n        return this[kDocuments].splice(0, number !== null && number !== void 0 ? number : this[kDocuments].length);\n    }\n    [Symbol.asyncIterator]() {\n        return {\n            next: () => this.next().then(value => value != null ? { value, done: false } : { value: undefined, done: true })\n        };\n    }\n    stream(options) {\n        if (options === null || options === void 0 ? void 0 : options.transform) {\n            const transform = options.transform;\n            const readable = makeCursorStream(this);\n            return readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform(chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    }\n                    catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n        }\n        return makeCursorStream(this);\n    }\n    hasNext(callback) {\n        return utils_1.maybePromise(callback, done => {\n            if (this[kId] === bson_1.Long.ZERO) {\n                return done(undefined, false);\n            }\n            if (this[kDocuments].length) {\n                return done(undefined, true);\n            }\n            next(this, true, (err, doc) => {\n                if (err)\n                    return done(err);\n                if (doc) {\n                    this[kDocuments].unshift(doc);\n                    done(undefined, true);\n                    return;\n                }\n                done(undefined, false);\n            });\n        });\n    }\n    next(callback) {\n        return utils_1.maybePromise(callback, done => {\n            if (this[kId] === bson_1.Long.ZERO) {\n                return done(new error_1.MongoCursorExhaustedError());\n            }\n            next(this, true, done);\n        });\n    }\n    tryNext(callback) {\n        return utils_1.maybePromise(callback, done => {\n            if (this[kId] === bson_1.Long.ZERO) {\n                return done(new error_1.MongoCursorExhaustedError());\n            }\n            next(this, false, done);\n        });\n    }\n    forEach(iterator, callback) {\n        if (typeof iterator !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        return utils_1.maybePromise(callback, done => {\n            const transform = this[kTransform];\n            const fetchDocs = () => {\n                next(this, true, (err, doc) => {\n                    if (err || doc == null)\n                        return done(err);\n                    let result;\n                    // NOTE: no need to transform because `next` will do this automatically\n                    try {\n                        result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n                    }\n                    catch (error) {\n                        return done(error);\n                    }\n                    if (result === false)\n                        return done();\n                    // these do need to be transformed since they are copying the rest of the batch\n                    const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n                    for (let i = 0; i < internalDocs.length; ++i) {\n                        try {\n                            result = iterator((transform ? transform(internalDocs[i]) : internalDocs[i]) // TODO(NODE-3283): Improve transform typing\n                            );\n                        }\n                        catch (error) {\n                            return done(error);\n                        }\n                        if (result === false)\n                            return done();\n                    }\n                    fetchDocs();\n                });\n            };\n            fetchDocs();\n        });\n    }\n    close(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        const needsToEmitClosed = !this[kClosed];\n        this[kClosed] = true;\n        return utils_1.maybePromise(callback, done => cleanupCursor(this, { needsToEmitClosed }, done));\n    }\n    toArray(callback) {\n        return utils_1.maybePromise(callback, done => {\n            const docs = [];\n            const transform = this[kTransform];\n            const fetchDocs = () => {\n                // NOTE: if we add a `nextBatch` then we should use it here\n                next(this, true, (err, doc) => {\n                    if (err)\n                        return done(err);\n                    if (doc == null)\n                        return done(undefined, docs);\n                    // NOTE: no need to transform because `next` will do this automatically\n                    docs.push(doc);\n                    // these do need to be transformed since they are copying the rest of the batch\n                    const internalDocs = (transform\n                        ? this[kDocuments].splice(0, this[kDocuments].length).map(transform)\n                        : this[kDocuments].splice(0, this[kDocuments].length)); // TODO(NODE-3283): Improve transform typing\n                    if (internalDocs) {\n                        docs.push(...internalDocs);\n                    }\n                    fetchDocs();\n                });\n            };\n            fetchDocs();\n        });\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag, value) {\n        assertUninitialized(this);\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== 'boolean') {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this[kOptions][flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map(transform) {\n        assertUninitialized(this);\n        const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n        if (oldTransform) {\n            this[kTransform] = doc => {\n                return transform(oldTransform(doc));\n            };\n        }\n        else {\n            this[kTransform] = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference) {\n        assertUninitialized(this);\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this[kOptions].readPreference = readPreference;\n        }\n        else if (typeof readPreference === 'string') {\n            this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        }\n        else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern) {\n        assertUninitialized(this);\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({ readConcern });\n        if (resolvedReadConcern) {\n            this[kOptions].readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value) {\n        assertUninitialized(this);\n        if (this[kOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this[kOptions].batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind() {\n        if (!this[kInitialized]) {\n            return;\n        }\n        this[kId] = undefined;\n        this[kDocuments] = [];\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kInitialized] = false;\n        const session = this[kSession];\n        if (session) {\n            // We only want to end this session if we created it, and it hasn't ended yet\n            if (session.explicit === false && !session.hasEnded) {\n                session.endSession();\n            }\n            this[kSession] = undefined;\n        }\n    }\n    /** @internal */\n    _getMore(batchSize, callback) {\n        const cursorId = this[kId];\n        const cursorNs = this[kNamespace];\n        const server = this[kServer];\n        if (cursorId == null) {\n            callback(new error_1.MongoRuntimeError('Unable to iterate cursor with no id'));\n            return;\n        }\n        if (server == null) {\n            callback(new error_1.MongoRuntimeError('Unable to iterate cursor without selected server'));\n            return;\n        }\n        server.getMore(cursorNs, cursorId, {\n            ...this[kOptions],\n            session: this[kSession],\n            batchSize\n        }, callback);\n    }\n}\nexports.AbstractCursor = AbstractCursor;\n/** @event */\nAbstractCursor.CLOSE = 'close';\nfunction nextDocument(cursor) {\n    if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n        return null;\n    }\n    const doc = cursor[kDocuments].shift();\n    if (doc) {\n        const transform = cursor[kTransform];\n        if (transform) {\n            return transform(doc);\n        }\n        return doc;\n    }\n    return null;\n}\nfunction next(cursor, blocking, callback) {\n    const cursorId = cursor[kId];\n    if (cursor.closed) {\n        return callback(undefined, null);\n    }\n    if (cursor[kDocuments] && cursor[kDocuments].length) {\n        callback(undefined, nextDocument(cursor));\n        return;\n    }\n    if (cursorId == null) {\n        // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n        if (cursor[kSession] == null && cursor[kTopology].hasSessionSupport()) {\n            cursor[kSession] = cursor[kTopology].startSession({ owner: cursor, explicit: false });\n        }\n        cursor._initialize(cursor[kSession], (err, state) => {\n            if (state) {\n                const response = state.response;\n                cursor[kServer] = state.server;\n                cursor[kSession] = state.session;\n                if (response.cursor) {\n                    cursor[kId] =\n                        typeof response.cursor.id === 'number'\n                            ? bson_1.Long.fromNumber(response.cursor.id)\n                            : response.cursor.id;\n                    if (response.cursor.ns) {\n                        cursor[kNamespace] = utils_1.ns(response.cursor.ns);\n                    }\n                    cursor[kDocuments] = response.cursor.firstBatch;\n                }\n                else {\n                    // NOTE: This is for support of older servers (<3.2) which do not use commands\n                    cursor[kId] =\n                        typeof response.cursorId === 'number'\n                            ? bson_1.Long.fromNumber(response.cursorId)\n                            : response.cursorId;\n                    cursor[kDocuments] = response.documents;\n                }\n                // When server responses return without a cursor document, we close this cursor\n                // and return the raw server response. This is often the case for explain commands\n                // for example\n                if (cursor[kId] == null) {\n                    cursor[kId] = bson_1.Long.ZERO;\n                    // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                    cursor[kDocuments] = [state.response];\n                }\n            }\n            // the cursor is now initialized, even if an error occurred or it is dead\n            cursor[kInitialized] = true;\n            if (err || cursorIsDead(cursor)) {\n                return cleanupCursor(cursor, { error: err }, () => callback(err, nextDocument(cursor)));\n            }\n            next(cursor, blocking, callback);\n        });\n        return;\n    }\n    if (cursorIsDead(cursor)) {\n        return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n    }\n    // otherwise need to call getMore\n    const batchSize = cursor[kOptions].batchSize || 1000;\n    cursor._getMore(batchSize, (err, response) => {\n        if (response) {\n            const cursorId = typeof response.cursor.id === 'number'\n                ? bson_1.Long.fromNumber(response.cursor.id)\n                : response.cursor.id;\n            cursor[kDocuments] = response.cursor.nextBatch;\n            cursor[kId] = cursorId;\n        }\n        if (err || cursorIsDead(cursor)) {\n            return cleanupCursor(cursor, { error: err }, () => callback(err, nextDocument(cursor)));\n        }\n        if (cursor[kDocuments].length === 0 && blocking === false) {\n            return callback(undefined, null);\n        }\n        next(cursor, blocking, callback);\n    });\n}\nfunction cursorIsDead(cursor) {\n    const cursorId = cursor[kId];\n    return !!cursorId && cursorId.isZero();\n}\nfunction cleanupCursor(cursor, options, callback) {\n    var _a;\n    const cursorId = cursor[kId];\n    const cursorNs = cursor[kNamespace];\n    const server = cursor[kServer];\n    const session = cursor[kSession];\n    const error = options === null || options === void 0 ? void 0 : options.error;\n    const needsToEmitClosed = (_a = options === null || options === void 0 ? void 0 : options.needsToEmitClosed) !== null && _a !== void 0 ? _a : cursor[kDocuments].length === 0;\n    if (error) {\n        if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n            return completeCleanup();\n        }\n    }\n    if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n        if (needsToEmitClosed) {\n            cursor[kClosed] = true;\n            cursor[kId] = bson_1.Long.ZERO;\n            cursor.emit(AbstractCursor.CLOSE);\n        }\n        if (session) {\n            if (session.owner === cursor) {\n                return session.endSession({ error }, callback);\n            }\n            if (!session.inTransaction()) {\n                sessions_1.maybeClearPinnedConnection(session, { error });\n            }\n        }\n        return callback();\n    }\n    function completeCleanup() {\n        if (session) {\n            if (session.owner === cursor) {\n                return session.endSession({ error }, () => {\n                    cursor.emit(AbstractCursor.CLOSE);\n                    callback();\n                });\n            }\n            if (!session.inTransaction()) {\n                sessions_1.maybeClearPinnedConnection(session, { error });\n            }\n        }\n        cursor.emit(AbstractCursor.CLOSE);\n        return callback();\n    }\n    cursor[kKilled] = true;\n    server.killCursors(cursorNs, [cursorId], { ...bson_1.pluckBSONSerializeOptions(cursor[kOptions]), session }, () => completeCleanup());\n}\n/** @internal */\nfunction assertUninitialized(cursor) {\n    if (cursor[kInitialized]) {\n        throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.assertUninitialized = assertUninitialized;\nfunction makeCursorStream(cursor) {\n    const readable = new stream_1.Readable({\n        objectMode: true,\n        autoDestroy: false,\n        highWaterMark: 1\n    });\n    let initialized = false;\n    let reading = false;\n    let needToClose = true; // NOTE: we must close the cursor if we never read from it, use `_construct` in future node versions\n    readable._read = function () {\n        if (initialized === false) {\n            needToClose = false;\n            initialized = true;\n        }\n        if (!reading) {\n            reading = true;\n            readNext();\n        }\n    };\n    readable._destroy = function (error, cb) {\n        if (needToClose) {\n            cursor.close(err => process.nextTick(cb, err || error));\n        }\n        else {\n            cb(error);\n        }\n    };\n    function readNext() {\n        needToClose = false;\n        next(cursor, true, (err, result) => {\n            needToClose = err ? !cursor.closed : result != null;\n            if (err) {\n                // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n                //       desired behavior is that a stream ends cleanly when a user explicitly closes\n                //       a client during iteration. Alternatively, we could do the \"right\" thing and\n                //       propagate the error message by removing this special case.\n                if (err.message.match(/server is closed/)) {\n                    cursor.close();\n                    return readable.push(null);\n                }\n                // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n                //       to be \"operation interrupted\", where a cursor has been closed but there is an\n                //       active getMore in-flight. This used to check if the cursor was killed but once\n                //       that changed to happen in cleanup legitimate errors would not destroy the\n                //       stream. There are change streams test specifically test these cases.\n                if (err.message.match(/interrupted/)) {\n                    return readable.push(null);\n                }\n                return readable.destroy(err);\n            }\n            if (result == null) {\n                readable.push(null);\n            }\n            else if (readable.destroyed) {\n                cursor.close();\n            }\n            else {\n                if (readable.push(result)) {\n                    return readNext();\n                }\n                reading = false;\n            }\n        });\n    }\n    return readable;\n}\n//# sourceMappingURL=abstract_cursor.js.map"]},"metadata":{},"sourceType":"script"}