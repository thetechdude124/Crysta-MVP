{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCollectionsCursor = exports.ListCollectionsOperation = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst utils_1 = require(\"../utils\");\n\nconst CONSTANTS = require(\"../constants\");\n\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\n\nconst execute_operation_1 = require(\"./execute_operation\");\n\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n/** @internal */\n\nclass ListCollectionsOperation extends command_1.CommandOperation {\n  constructor(db, filter, options) {\n    super(db, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, session, callback) {\n    if (utils_1.maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n      let filter = this.filter;\n      const databaseName = this.db.s.namespace.db; // If we have legacy mode and have not provided a full db name filter it\n\n      if (typeof filter.name === 'string' && !new RegExp(`^${databaseName}\\\\.`).test(filter.name)) {\n        filter = Object.assign({}, filter);\n        filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n      } // No filter, filter by current database\n\n\n      if (filter == null) {\n        filter = {\n          name: `/${databaseName}/`\n        };\n      } // Rewrite the filter to use $and to filter out indexes\n\n\n      if (filter.name) {\n        filter = {\n          $and: [{\n            name: filter.name\n          }, {\n            name: /^((?!\\$).)*$/\n          }]\n        };\n      } else {\n        filter = {\n          name: /^((?!\\$).)*$/\n        };\n      }\n\n      const documentTransform = doc => {\n        const matching = `${databaseName}.`;\n        const index = doc.name.indexOf(matching); // Remove database name if available\n\n        if (doc.name && index === 0) {\n          doc.name = doc.name.substr(index + matching.length);\n        }\n\n        return doc;\n      };\n\n      server.query(new utils_1.MongoDBNamespace(databaseName, CONSTANTS.SYSTEM_NAMESPACE_COLLECTION), {\n        query: filter\n      }, {\n        batchSize: this.batchSize || 1000,\n        readPreference: this.readPreference\n      }, (err, result) => {\n        if (result && result.documents && Array.isArray(result.documents)) {\n          result.documents = result.documents.map(documentTransform);\n        }\n\n        callback(err, result);\n      });\n      return;\n    }\n\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? {\n        batchSize: this.batchSize\n      } : {},\n      nameOnly: this.nameOnly\n    };\n    return super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.ListCollectionsOperation = ListCollectionsOperation;\n/** @public */\n\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(db, filter, options) {\n    super(utils_1.getTopology(db), db.s.namespace, options);\n    this.parent = db;\n    this.filter = filter;\n    this.options = options;\n  }\n\n  clone() {\n    return new ListCollectionsCursor(this.parent, this.filter, { ...this.options,\n      ...this.cursorOptions\n    });\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const operation = new ListCollectionsOperation(this.parent, this.filter, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    execute_operation_1.executeOperation(utils_1.getTopology(this.parent), operation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: NODE-2882\n\n      callback(undefined, {\n        server: operation.server,\n        session,\n        response\n      });\n    });\n  }\n\n}\n\nexports.ListCollectionsCursor = ListCollectionsCursor;\noperation_1.defineAspects(ListCollectionsOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"sources":["../../src/operations/list_collections.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCollectionsCursor = exports.ListCollectionsOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\nconst utils_1 = require(\"../utils\");\nconst CONSTANTS = require(\"../constants\");\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\nconst execute_operation_1 = require(\"./execute_operation\");\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    execute(server, session, callback) {\n        if (utils_1.maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n            let filter = this.filter;\n            const databaseName = this.db.s.namespace.db;\n            // If we have legacy mode and have not provided a full db name filter it\n            if (typeof filter.name === 'string' && !new RegExp(`^${databaseName}\\\\.`).test(filter.name)) {\n                filter = Object.assign({}, filter);\n                filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n            }\n            // No filter, filter by current database\n            if (filter == null) {\n                filter = { name: `/${databaseName}/` };\n            }\n            // Rewrite the filter to use $and to filter out indexes\n            if (filter.name) {\n                filter = { $and: [{ name: filter.name }, { name: /^((?!\\$).)*$/ }] };\n            }\n            else {\n                filter = { name: /^((?!\\$).)*$/ };\n            }\n            const documentTransform = (doc) => {\n                const matching = `${databaseName}.`;\n                const index = doc.name.indexOf(matching);\n                // Remove database name if available\n                if (doc.name && index === 0) {\n                    doc.name = doc.name.substr(index + matching.length);\n                }\n                return doc;\n            };\n            server.query(new utils_1.MongoDBNamespace(databaseName, CONSTANTS.SYSTEM_NAMESPACE_COLLECTION), { query: filter }, { batchSize: this.batchSize || 1000, readPreference: this.readPreference }, (err, result) => {\n                if (result && result.documents && Array.isArray(result.documents)) {\n                    result.documents = result.documents.map(documentTransform);\n                }\n                callback(err, result);\n            });\n            return;\n        }\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly\n        };\n        return super.executeCommand(server, session, command, callback);\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(utils_1.getTopology(db), db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    _initialize(session, callback) {\n        const operation = new ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        execute_operation_1.executeOperation(utils_1.getTopology(this.parent), operation, (err, response) => {\n            if (err || response == null)\n                return callback(err);\n            // TODO: NODE-2882\n            callback(undefined, { server: operation.server, session, response });\n        });\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\noperation_1.defineAspects(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=list_collections.js.map"]},"metadata":{},"sourceType":"script"}