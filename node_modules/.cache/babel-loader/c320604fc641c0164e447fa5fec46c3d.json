{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.TOPOLOGY_EVENTS = exports.Topology = void 0;\n\nconst Denque = require(\"denque\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst topology_description_1 = require(\"./topology_description\");\n\nconst server_1 = require(\"./server\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst srv_polling_1 = require(\"./srv_polling\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst error_1 = require(\"../error\");\n\nconst server_selection_1 = require(\"./server_selection\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst events_1 = require(\"./events\");\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst connection_string_1 = require(\"../connection_string\");\n\nconst bson_1 = require(\"../bson\");\n\nconst mongo_types_1 = require(\"../mongo_types\"); // Global state\n\n\nlet globalTopologyCounter = 0; // events that we relay to the `Topology`\n\nconst SERVER_RELAY_EVENTS = [server_1.Server.SERVER_HEARTBEAT_STARTED, server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, server_1.Server.SERVER_HEARTBEAT_FAILED, connection_1.Connection.COMMAND_STARTED, connection_1.Connection.COMMAND_SUCCEEDED, connection_1.Connection.COMMAND_FAILED, ...connection_pool_1.CMAP_EVENTS]; // all events we listen to from `Server` instances\n\nconst LOCAL_SERVER_EVENTS = [server_1.Server.CONNECT, server_1.Server.DESCRIPTION_RECEIVED, server_1.Server.CLOSED, server_1.Server.ENDED];\nconst stateTransition = utils_1.makeStateMachine({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\n\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds, options) {\n    var _a;\n\n    super(); // Legacy CSFLE support\n\n    this.bson = Object.create(null);\n    this.bson.serialize = bson_1.serialize;\n    this.bson.deserialize = bson_1.deserialize; // Options should only be undefined in tests, MongoClient will always have defined options\n\n    options = options !== null && options !== void 0 ? options : {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      retryReads: connection_string_1.DEFAULT_OPTIONS.get('retryReads'),\n      retryWrites: connection_string_1.DEFAULT_OPTIONS.get('retryWrites'),\n      serverSelectionTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n      directConnection: connection_string_1.DEFAULT_OPTIONS.get('directConnection'),\n      loadBalanced: connection_string_1.DEFAULT_OPTIONS.get('loadBalanced'),\n      metadata: connection_string_1.DEFAULT_OPTIONS.get('metadata'),\n      monitorCommands: connection_string_1.DEFAULT_OPTIONS.get('monitorCommands'),\n      tls: connection_string_1.DEFAULT_OPTIONS.get('tls'),\n      maxPoolSize: connection_string_1.DEFAULT_OPTIONS.get('maxPoolSize'),\n      minPoolSize: connection_string_1.DEFAULT_OPTIONS.get('minPoolSize'),\n      waitQueueTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n      connectionType: connection_string_1.DEFAULT_OPTIONS.get('connectionType'),\n      connectTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('connectTimeoutMS'),\n      maxIdleTimeMS: connection_string_1.DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n      heartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n      minHeartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist = [];\n\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = new Map();\n\n    for (const hostAddress of seedlist) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new sessions_1.ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      credentials: options === null || options === void 0 ? void 0 : options.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  detectShardedTopology(event) {\n    var _a, _b, _c;\n\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n    }\n  }\n\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev);\n\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities() {\n    return new ServerCapabilities(this.lastIsMaster());\n  }\n  /** Initiate server connect */\n\n\n  connect(options, callback) {\n    var _a;\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    connectServers(this, serverDescriptions); // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    this.selectServer(server_selection_1.readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n        return;\n      } // TODO: NODE-2471\n\n\n      if (server && this.s.credentials) {\n        server.command(utils_1.ns('admin.$cmd'), {\n          ping: 1\n        }, err => {\n          if (err) {\n            typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n            return;\n          }\n\n          stateTransition(this, common_1.STATE_CONNECTED); // TODO(NODE-3273) - remove err\n\n          this.emit(Topology.OPEN, err, this);\n          this.emit(Topology.CONNECT, this);\n          if (typeof callback === 'function') callback(undefined, this);\n        });\n        return;\n      }\n\n      stateTransition(this, common_1.STATE_CONNECTED); // TODO(NODE-3273) - remove err\n\n      this.emit(Topology.OPEN, err, this);\n      this.emit(Topology.CONNECT, this);\n      if (typeof callback === 'function') callback(undefined, this);\n    });\n  }\n  /** Close this topology */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n    common_1.drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    utils_1.eachAsync(Array.from(this.s.sessions.values()), (session, cb) => session.endSession(cb), () => {\n      this.s.sessionPool.endAllPooledSessions(() => {\n        utils_1.eachAsync(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n          this.s.servers.clear(); // emit an event for close\n\n          this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n          stateTransition(this, common_1.STATE_CLOSED);\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        });\n      });\n    });\n  }\n\n  selectServer(selector, _options, _callback) {\n    let options = _options;\n    const callback = _callback !== null && _callback !== void 0 ? _callback : _options;\n\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    let serverSelector;\n\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n\n        serverSelector = server_selection_1.readPreferenceServerSelector(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === common_1.TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n\n\n  hasSessionSupport() {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /** Start a logical session */\n\n\n  startSession(options, clientOptions) {\n    const session = new sessions_1.ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /** Send endSessions command(s) with the given session ids */\n\n\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.selectServer(server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.primaryPreferred), (err, server) => {\n      if (err || !server) {\n        if (typeof callback === 'function') callback(err);\n        return;\n      }\n\n      server.command(utils_1.ns('admin.$cmd'), {\n        endSessions: sessions\n      }, {\n        noResponse: true\n      }, (err, result) => {\n        if (typeof callback === 'function') callback(err, result);\n      });\n    });\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // ignore this server update if its from an outdated topologyVersion\n\n\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    if (!previousServerDescription) {\n      return;\n    } // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      common_1._advanceClusterTime(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    } // update server list from updated descriptions\n\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n\n\n  unref() {\n    utils_1.emitWarning('`unref` is a noop and will be removed in the next major version');\n  } // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n\n\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n\n}\n\nexports.Topology = Topology;\n/** @event */\n\nTopology.SERVER_OPENING = 'serverOpening';\n/** @event */\n\nTopology.SERVER_CLOSED = 'serverClosed';\n/** @event */\n\nTopology.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @event */\n\nTopology.TOPOLOGY_OPENING = 'topologyOpening';\n/** @event */\n\nTopology.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @event */\n\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @event */\n\nTopology.ERROR = 'error';\n/** @event */\n\nTopology.OPEN = 'open';\n/** @event */\n\nTopology.CONNECT = 'connect';\n/** @event */\n\nTopology.CLOSE = 'close';\n/** @event */\n\nTopology.TIMEOUT = 'timeout';\n/** @public */\n\nexports.TOPOLOGY_EVENTS = [Topology.SERVER_OPENING, Topology.SERVER_CLOSED, Topology.SERVER_DESCRIPTION_CHANGED, Topology.TOPOLOGY_OPENING, Topology.TOPOLOGY_CLOSED, Topology.TOPOLOGY_DESCRIPTION_CHANGED, Topology.ERROR, Topology.TIMEOUT, Topology.CLOSE];\n/** Destroys a server, and removes all event listeners from the instance */\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n\n    for (const event of SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\n\n\nfunction topologyTypeFromOptions(options) {\n  if (options === null || options === void 0 ? void 0 : options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n\n  return common_1.TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n * @param connectDelay - Time to wait before attempting initial connection\n */\n\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      common_1.clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param topology - The topology responsible for the servers\n * @param serverDescriptions - A list of server descriptions to connect\n */\n\n\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\n\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n\n    if (server) {\n      server.s.description = incomingServerDescription;\n    }\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return server_description_1.compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\n\n\nclass ServerCapabilities {\n  constructor(ismaster) {\n    this.minWireVersion = ismaster.minWireVersion || 0;\n    this.maxWireVersion = ismaster.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n\n}\n\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"sources":["../../src/sdam/topology.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerCapabilities = exports.TOPOLOGY_EVENTS = exports.Topology = void 0;\nconst Denque = require(\"denque\");\nconst read_preference_1 = require(\"../read_preference\");\nconst server_description_1 = require(\"./server_description\");\nconst topology_description_1 = require(\"./topology_description\");\nconst server_1 = require(\"./server\");\nconst sessions_1 = require(\"../sessions\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst error_1 = require(\"../error\");\nconst server_selection_1 = require(\"./server_selection\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_string_1 = require(\"../connection_string\");\nconst bson_1 = require(\"../bson\");\nconst mongo_types_1 = require(\"../mongo_types\");\n// Global state\nlet globalTopologyCounter = 0;\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [\n    server_1.Server.SERVER_HEARTBEAT_STARTED,\n    server_1.Server.SERVER_HEARTBEAT_SUCCEEDED,\n    server_1.Server.SERVER_HEARTBEAT_FAILED,\n    connection_1.Connection.COMMAND_STARTED,\n    connection_1.Connection.COMMAND_SUCCEEDED,\n    connection_1.Connection.COMMAND_FAILED,\n    ...connection_pool_1.CMAP_EVENTS\n];\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = [\n    server_1.Server.CONNECT,\n    server_1.Server.DESCRIPTION_RECEIVED,\n    server_1.Server.CLOSED,\n    server_1.Server.ENDED\n];\nconst stateTransition = utils_1.makeStateMachine({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(seeds, options) {\n        var _a;\n        super();\n        // Legacy CSFLE support\n        this.bson = Object.create(null);\n        this.bson.serialize = bson_1.serialize;\n        this.bson.deserialize = bson_1.deserialize;\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options !== null && options !== void 0 ? options : {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            retryReads: connection_string_1.DEFAULT_OPTIONS.get('retryReads'),\n            retryWrites: connection_string_1.DEFAULT_OPTIONS.get('retryWrites'),\n            serverSelectionTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n            directConnection: connection_string_1.DEFAULT_OPTIONS.get('directConnection'),\n            loadBalanced: connection_string_1.DEFAULT_OPTIONS.get('loadBalanced'),\n            metadata: connection_string_1.DEFAULT_OPTIONS.get('metadata'),\n            monitorCommands: connection_string_1.DEFAULT_OPTIONS.get('monitorCommands'),\n            tls: connection_string_1.DEFAULT_OPTIONS.get('tls'),\n            maxPoolSize: connection_string_1.DEFAULT_OPTIONS.get('maxPoolSize'),\n            minPoolSize: connection_string_1.DEFAULT_OPTIONS.get('minPoolSize'),\n            waitQueueTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n            connectionType: connection_string_1.DEFAULT_OPTIONS.get('connectionType'),\n            connectTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('connectTimeoutMS'),\n            maxIdleTimeMS: connection_string_1.DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n            heartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n            minHeartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const serverDescriptions = new Map();\n        for (const hostAddress of seedlist) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new Denque();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            // Server Session Pool\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            // Active client sessions\n            sessions: new Set(),\n            credentials: options === null || options === void 0 ? void 0 : options.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n                    heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                    srvHost: options.srvHost\n                });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        var _a, _b, _c;\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n        if (transitionToSharded && !listeningToSrvPolling) {\n            (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastIsMaster());\n    }\n    /** Initiate server connect */\n    connect(options, callback) {\n        var _a;\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        connectServers(this, serverDescriptions);\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n        this.selectServer(server_selection_1.readPreferenceServerSelector(readPreference), options, (err, server) => {\n            if (err) {\n                this.close();\n                typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n                return;\n            }\n            // TODO: NODE-2471\n            if (server && this.s.credentials) {\n                server.command(utils_1.ns('admin.$cmd'), { ping: 1 }, err => {\n                    if (err) {\n                        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n                        return;\n                    }\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    // TODO(NODE-3273) - remove err\n                    this.emit(Topology.OPEN, err, this);\n                    this.emit(Topology.CONNECT, this);\n                    if (typeof callback === 'function')\n                        callback(undefined, this);\n                });\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            // TODO(NODE-3273) - remove err\n            this.emit(Topology.OPEN, err, this);\n            this.emit(Topology.CONNECT, this);\n            if (typeof callback === 'function')\n                callback(undefined, this);\n        });\n    }\n    /** Close this topology */\n    close(options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        if (typeof options === 'boolean') {\n            options = { force: options };\n        }\n        options = options !== null && options !== void 0 ? options : {};\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n        common_1.drainTimerQueue(this.s.connectionTimers);\n        if (this.s.srvPoller) {\n            this.s.srvPoller.stop();\n            this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        utils_1.eachAsync(Array.from(this.s.sessions.values()), (session, cb) => session.endSession(cb), () => {\n            this.s.sessionPool.endAllPooledSessions(() => {\n                utils_1.eachAsync(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n                    this.s.servers.clear();\n                    // emit an event for close\n                    this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n                    stateTransition(this, common_1.STATE_CLOSED);\n                    if (typeof callback === 'function') {\n                        callback(err);\n                    }\n                });\n            });\n        });\n    }\n    selectServer(selector, _options, _callback) {\n        let options = _options;\n        const callback = (_callback !== null && _callback !== void 0 ? _callback : _options);\n        if (typeof options === 'function') {\n            options = {};\n        }\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = server_selection_1.readPreferenceServerSelector(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = Object.assign({}, { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS }, options);\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            transaction,\n            callback\n        };\n        const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n        if (serverSelectionTimeoutMS) {\n            waitQueueMember.timer = setTimeout(() => {\n                waitQueueMember[kCancelled] = true;\n                waitQueueMember.timer = undefined;\n                const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n                waitQueueMember.callback(timeoutError);\n            }, serverSelectionTimeoutMS);\n        }\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    // Sessions related methods\n    /**\n     * @returns Whether the topology should initiate selection to determine session support\n     */\n    shouldCheckForSessionSupport() {\n        if (this.description.type === common_1.TopologyType.Single) {\n            return !this.description.hasKnownServers;\n        }\n        return !this.description.hasDataBearingServers;\n    }\n    /**\n     * @returns Whether sessions are supported on the current topology\n     */\n    hasSessionSupport() {\n        return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n    }\n    /** Start a logical session */\n    startSession(options, clientOptions) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, options, clientOptions);\n        session.once('ended', () => {\n            this.s.sessions.delete(session);\n        });\n        this.s.sessions.add(session);\n        return session;\n    }\n    /** Send endSessions command(s) with the given session ids */\n    endSessions(sessions, callback) {\n        if (!Array.isArray(sessions)) {\n            sessions = [sessions];\n        }\n        this.selectServer(server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.primaryPreferred), (err, server) => {\n            if (err || !server) {\n                if (typeof callback === 'function')\n                    callback(err);\n                return;\n            }\n            server.command(utils_1.ns('admin.$cmd'), { endSessions: sessions }, { noResponse: true }, (err, result) => {\n                if (typeof callback === 'function')\n                    callback(err, result);\n            });\n        });\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            common_1._advanceClusterTime(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    /**\n     * @deprecated This function is deprecated and will be removed in the next major version.\n     */\n    unref() {\n        utils_1.emitWarning('`unref` is a noop and will be removed in the next major version');\n    }\n    // NOTE: There are many places in code where we explicitly check the last isMaster\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first isMaster seen, which should suffice.\n    lastIsMaster() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = 'serverOpening';\n/** @event */\nTopology.SERVER_CLOSED = 'serverClosed';\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @event */\nTopology.TOPOLOGY_OPENING = 'topologyOpening';\n/** @event */\nTopology.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @event */\nTopology.ERROR = 'error';\n/** @event */\nTopology.OPEN = 'open';\n/** @event */\nTopology.CONNECT = 'connect';\n/** @event */\nTopology.CLOSE = 'close';\n/** @event */\nTopology.TIMEOUT = 'timeout';\n/** @public */\nexports.TOPOLOGY_EVENTS = [\n    Topology.SERVER_OPENING,\n    Topology.SERVER_CLOSED,\n    Topology.SERVER_DESCRIPTION_CHANGED,\n    Topology.TOPOLOGY_OPENING,\n    Topology.TOPOLOGY_CLOSED,\n    Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n    Topology.ERROR,\n    Topology.TIMEOUT,\n    Topology.CLOSE\n];\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n    options = options !== null && options !== void 0 ? options : {};\n    for (const event of LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy(options, () => {\n        topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n        for (const event of SERVER_RELAY_EVENTS) {\n            server.removeAllListeners(event);\n        }\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options === null || options === void 0 ? void 0 : options.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\nfunction randomSelection(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n * @param connectDelay - Time to wait before attempting initial connection\n */\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n    topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    if (connectDelay) {\n        const connectTimer = setTimeout(() => {\n            common_1.clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n            server.connect();\n        }, connectDelay);\n        topology.s.connectionTimers.add(connectTimer);\n        return server;\n    }\n    server.connect();\n    return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param topology - The topology responsible for the servers\n * @param serverDescriptions - A list of server descriptions to connect\n */\nfunction connectServers(topology, serverDescriptions) {\n    topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n        const server = createAndConnectServer(topology, serverDescription);\n        servers.set(serverDescription.address, server);\n        return servers;\n    }, new Map());\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions)\n                : serverDescriptions;\n        }\n        catch (e) {\n            if (waitQueueMember.timer) {\n                clearTimeout(waitQueueMember.timer);\n            }\n            waitQueueMember.callback(e);\n            continue;\n        }\n        if (selectedDescriptions.length === 0) {\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        const selectedServerDescription = randomSelection(selectedDescriptions);\n        const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n        }\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n    return (server_description_1.compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(ismaster) {\n        this.minWireVersion = ismaster.minWireVersion || 0;\n        this.maxWireVersion = ismaster.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map"]},"metadata":{},"sourceType":"script"}