{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst error_1 = require(\"./error\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\n\n\nexports.TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n  [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n  [exports.TxnState.STARTING_TRANSACTION]: [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED],\n  [exports.TxnState.TRANSACTION_IN_PROGRESS]: [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_ABORTED],\n  [exports.TxnState.TRANSACTION_COMMITTED]: [exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n  [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n  [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.NO_TRANSACTION]\n};\nconst ACTIVE_STATES = new Set([exports.TxnState.STARTING_TRANSACTION, exports.TxnState.TRANSACTION_IN_PROGRESS]);\nconst COMMITTED_STATES = new Set([exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\n\nclass Transaction {\n  /** Create a transaction @internal */\n  constructor(options) {\n    options = options !== null && options !== void 0 ? options : {};\n    this.state = exports.TxnState.NO_TRANSACTION;\n    this.options = {};\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    } // TODO: This isn't technically necessary\n\n\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n  /** @internal */\n\n\n  get server() {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n\n  get isPinned() {\n    return !!this.server;\n  }\n  /** @returns Whether the transaction has started */\n\n\n  get isStarting() {\n    return this.state === exports.TxnState.STARTING_TRANSACTION;\n  }\n  /**\n   * @returns Whether this session is presently in a transaction\n   */\n\n\n  get isActive() {\n    return ACTIVE_STATES.has(this.state);\n  }\n\n  get isCommitted() {\n    return COMMITTED_STATES.has(this.state);\n  }\n  /**\n   * Transition the transaction in the state machine\n   * @internal\n   * @param nextState - The new state to transition to\n   */\n\n\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n\n    if (nextStates && nextStates.includes(nextState)) {\n      this.state = nextState;\n\n      if (this.state === exports.TxnState.NO_TRANSACTION || this.state === exports.TxnState.STARTING_TRANSACTION || this.state === exports.TxnState.TRANSACTION_ABORTED) {\n        this.unpinServer();\n      }\n\n      return;\n    }\n\n    throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n  }\n  /** @internal */\n\n\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n  /** @internal */\n\n\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n\n}\n\nexports.Transaction = Transaction;\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nexports.isTransactionCommand = isTransactionCommand;","map":{"version":3,"sources":["../src/transactions.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAKA;;;AACa,OAAA,CAAA,QAAA,GAAW,MAAM,CAAC,MAAP,CAAc;AACpC,EAAA,cAAc,EAAE,gBADoB;AAEpC,EAAA,oBAAoB,EAAE,sBAFc;AAGpC,EAAA,uBAAuB,EAAE,yBAHW;AAIpC,EAAA,qBAAqB,EAAE,uBAJa;AAKpC,EAAA,2BAA2B,EAAE,6BALO;AAMpC,EAAA,mBAAmB,EAAE;AANe,CAAd,CAAX;AAYb,MAAM,YAAY,GAAwC;AACxD,GAAC,OAAA,CAAA,QAAA,CAAS,cAAV,GAA2B,CAAC,OAAA,CAAA,QAAA,CAAS,cAAV,EAA0B,OAAA,CAAA,QAAA,CAAS,oBAAnC,CAD6B;AAExD,GAAC,OAAA,CAAA,QAAA,CAAS,oBAAV,GAAiC,CAC/B,OAAA,CAAA,QAAA,CAAS,uBADsB,EAE/B,OAAA,CAAA,QAAA,CAAS,qBAFsB,EAG/B,OAAA,CAAA,QAAA,CAAS,2BAHsB,EAI/B,OAAA,CAAA,QAAA,CAAS,mBAJsB,CAFuB;AAQxD,GAAC,OAAA,CAAA,QAAA,CAAS,uBAAV,GAAoC,CAClC,OAAA,CAAA,QAAA,CAAS,uBADyB,EAElC,OAAA,CAAA,QAAA,CAAS,qBAFyB,EAGlC,OAAA,CAAA,QAAA,CAAS,mBAHyB,CARoB;AAaxD,GAAC,OAAA,CAAA,QAAA,CAAS,qBAAV,GAAkC,CAChC,OAAA,CAAA,QAAA,CAAS,qBADuB,EAEhC,OAAA,CAAA,QAAA,CAAS,2BAFuB,EAGhC,OAAA,CAAA,QAAA,CAAS,oBAHuB,EAIhC,OAAA,CAAA,QAAA,CAAS,cAJuB,CAbsB;AAmBxD,GAAC,OAAA,CAAA,QAAA,CAAS,mBAAV,GAAgC,CAAC,OAAA,CAAA,QAAA,CAAS,oBAAV,EAAgC,OAAA,CAAA,QAAA,CAAS,cAAzC,CAnBwB;AAoBxD,GAAC,OAAA,CAAA,QAAA,CAAS,2BAAV,GAAwC,CACtC,OAAA,CAAA,QAAA,CAAS,2BAD6B,EAEtC,OAAA,CAAA,QAAA,CAAS,cAF6B;AApBgB,CAA1D;AA0BA,MAAM,aAAa,GAAkB,IAAI,GAAJ,CAAQ,CAC3C,OAAA,CAAA,QAAA,CAAS,oBADkC,EAE3C,OAAA,CAAA,QAAA,CAAS,uBAFkC,CAAR,CAArC;AAKA,MAAM,gBAAgB,GAAkB,IAAI,GAAJ,CAAQ,CAC9C,OAAA,CAAA,QAAA,CAAS,qBADqC,EAE9C,OAAA,CAAA,QAAA,CAAS,2BAFqC,EAG9C,OAAA,CAAA,QAAA,CAAS,mBAHqC,CAAR,CAAxC;AAsBA;;;AAGG;;AACH,MAAa,WAAb,CAAwB;AAStB;AACA,EAAA,WAAA,CAAY,OAAZ,EAAwC;AACtC,IAAA,OAAO,GAAG,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW,EAArB;AACA,SAAK,KAAL,GAAa,OAAA,CAAA,QAAA,CAAS,cAAtB;AACA,SAAK,OAAL,GAAe,EAAf;AAEA,UAAM,YAAY,GAAG,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB,OAAzB,CAArB;;AACA,QAAI,YAAJ,EAAkB;AAChB,UAAI,YAAY,CAAC,CAAb,KAAmB,CAAvB,EAA0B;AACxB,cAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,0DAA1B,CAAN;AACD;;AAED,WAAK,OAAL,CAAa,YAAb,GAA4B,YAA5B;AACD;;AAED,QAAI,OAAO,CAAC,WAAZ,EAAyB;AACvB,WAAK,OAAL,CAAa,WAAb,GAA2B,cAAA,CAAA,WAAA,CAAY,WAAZ,CAAwB,OAAxB,CAA3B;AACD;;AAED,QAAI,OAAO,CAAC,cAAZ,EAA4B;AAC1B,WAAK,OAAL,CAAa,cAAb,GAA8B,iBAAA,CAAA,cAAA,CAAe,WAAf,CAA2B,OAA3B,CAA9B;AACD;;AAED,QAAI,OAAO,CAAC,eAAZ,EAA6B;AAC3B,WAAK,OAAL,CAAa,SAAb,GAAyB,OAAO,CAAC,eAAjC;AACD,KAxBqC,CA0BtC;;;AACA,SAAK,aAAL,GAAqB,SAArB;AACA,SAAK,cAAL,GAAsB,SAAtB;AACD;AAED;;;AACU,MAAN,MAAM,GAAA;AACR,WAAO,KAAK,aAAZ;AACD;;AAEgB,MAAb,aAAa,GAAA;AACf,WAAO,KAAK,cAAZ;AACD;;AAEW,MAAR,QAAQ,GAAA;AACV,WAAO,CAAC,CAAC,KAAK,MAAd;AACD;AAED;;;AACc,MAAV,UAAU,GAAA;AACZ,WAAO,KAAK,KAAL,KAAe,OAAA,CAAA,QAAA,CAAS,oBAA/B;AACD;AAED;;AAEG;;;AACS,MAAR,QAAQ,GAAA;AACV,WAAO,aAAa,CAAC,GAAd,CAAkB,KAAK,KAAvB,CAAP;AACD;;AAEc,MAAX,WAAW,GAAA;AACb,WAAO,gBAAgB,CAAC,GAAjB,CAAqB,KAAK,KAA1B,CAAP;AACD;AACD;;;;AAIG;;;AACH,EAAA,UAAU,CAAC,SAAD,EAAoB;AAC5B,UAAM,UAAU,GAAG,YAAY,CAAC,KAAK,KAAN,CAA/B;;AACA,QAAI,UAAU,IAAI,UAAU,CAAC,QAAX,CAAoB,SAApB,CAAlB,EAAkD;AAChD,WAAK,KAAL,GAAa,SAAb;;AACA,UACE,KAAK,KAAL,KAAe,OAAA,CAAA,QAAA,CAAS,cAAxB,IACA,KAAK,KAAL,KAAe,OAAA,CAAA,QAAA,CAAS,oBADxB,IAEA,KAAK,KAAL,KAAe,OAAA,CAAA,QAAA,CAAS,mBAH1B,EAIE;AACA,aAAK,WAAL;AACD;;AACD;AACD;;AAED,UAAM,IAAI,OAAA,CAAA,iBAAJ,CACJ,4CAA4C,KAAK,KAAK,SAAS,SAAS,GADpE,CAAN;AAGD;AAED;;;AACA,EAAA,SAAS,CAAC,MAAD,EAAe;AACtB,QAAI,KAAK,QAAT,EAAmB;AACjB,WAAK,aAAL,GAAqB,MAArB;AACD;AACF;AAED;;;AACA,EAAA,WAAW,GAAA;AACT,SAAK,aAAL,GAAqB,SAArB;AACD;;AAvGqB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA;;AA0GA,SAAgB,oBAAhB,CAAqC,OAArC,EAAsD;AACpD,SAAO,CAAC,EAAE,OAAO,CAAC,iBAAR,IAA6B,OAAO,CAAC,gBAAvC,CAAR;AACD;;AAFD,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst read_preference_1 = require(\"./read_preference\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options !== null && options !== void 0 ? options : {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;\n//# sourceMappingURL=transactions.js.map"]},"metadata":{},"sourceType":"script"}