{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthProvider = exports.AuthContext = void 0;\n\nconst error_1 = require(\"../../error\");\n/** Context used during authentication */\n\n\nclass AuthContext {\n  constructor(connection, credentials, options) {\n    this.connection = connection;\n    this.credentials = credentials;\n    this.options = options;\n  }\n\n}\n\nexports.AuthContext = AuthContext;\n\nclass AuthProvider {\n  /**\n   * Prepare the handshake document before the initial handshake.\n   *\n   * @param handshakeDoc - The document used for the initial handshake on a connection\n   * @param authContext - Context for authentication flow\n   */\n  prepare(handshakeDoc, authContext, callback) {\n    callback(undefined, handshakeDoc);\n  }\n  /**\n   * Authenticate\n   *\n   * @param context - A shared context for authentication flow\n   * @param callback - The callback to return the result from the authentication\n   */\n\n\n  auth(context, callback) {\n    // TODO(NODE-3483): Replace this with MongoMethodOverrideError\n    callback(new error_1.MongoRuntimeError('`auth` method must be overridden by subclass'));\n  }\n\n}\n\nexports.AuthProvider = AuthProvider;","map":{"version":3,"sources":["../../../src/cmap/auth/auth_provider.ts"],"names":[],"mappings":";;;;;;;AAKA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAIA;;;AACA,MAAa,WAAb,CAAwB;AAatB,EAAA,WAAA,CACE,UADF,EAEE,WAFF,EAGE,OAHF,EAG6B;AAE3B,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AArBqB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA;;AAwBA,MAAa,YAAb,CAAyB;AACvB;;;;;AAKG;AACH,EAAA,OAAO,CACL,YADK,EAEL,WAFK,EAGL,QAHK,EAGgC;AAErC,IAAA,QAAQ,CAAC,SAAD,EAAY,YAAZ,CAAR;AACD;AAED;;;;;AAKG;;;AACH,EAAA,IAAI,CAAC,OAAD,EAAuB,QAAvB,EAAyC;AAC3C;AACA,IAAA,QAAQ,CAAC,IAAI,OAAA,CAAA,iBAAJ,CAAsB,8CAAtB,CAAD,CAAR;AACD;;AAxBsB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = require(\"../../error\");\n/** Context used during authentication */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    prepare(handshakeDoc, authContext, callback) {\n        callback(undefined, handshakeDoc);\n    }\n    /**\n     * Authenticate\n     *\n     * @param context - A shared context for authentication flow\n     * @param callback - The callback to return the result from the authentication\n     */\n    auth(context, callback) {\n        // TODO(NODE-3483): Replace this with MongoMethodOverrideError\n        callback(new error_1.MongoRuntimeError('`auth` method must be overridden by subclass'));\n    }\n}\nexports.AuthProvider = AuthProvider;\n//# sourceMappingURL=auth_provider.js.map"]},"metadata":{},"sourceType":"script"}