{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CMAP_EVENTS = exports.ConnectionPool = void 0;\n\nconst Denque = require(\"denque\");\n\nconst connection_1 = require(\"./connection\");\n\nconst logger_1 = require(\"../logger\");\n\nconst metrics_1 = require(\"./metrics\");\n\nconst connect_1 = require(\"./connect\");\n\nconst utils_1 = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst errors_1 = require(\"./errors\");\n\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\n\n\nconst kLogger = Symbol('logger');\n/** @internal */\n\nconst kConnections = Symbol('connections');\n/** @internal */\n\nconst kPermits = Symbol('permits');\n/** @internal */\n\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\n\nconst kGeneration = Symbol('generation');\n/** @internal */\n\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\n\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\n\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kMetrics = Symbol('metrics');\n/** @internal */\n\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\n\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\n\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(options) {\n    var _a, _b, _c, _d;\n\n    super();\n    this.closed = false;\n    this.options = Object.freeze({ ...options,\n      connectionType: connection_1.Connection,\n      maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n      minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n      maxIdleTimeMS: (_c = options.maxIdleTimeMS) !== null && _c !== void 0 ? _c : 0,\n      waitQueueTimeoutMS: (_d = options.waitQueueTimeoutMS) !== null && _d !== void 0 ? _d : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n\n    this[kLogger] = new logger_1.Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPermits] = this.options.maxPoolSize;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = utils_1.makeCounter(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kCheckedOut] = 0;\n    this[kProcessingWaitQueue] = false;\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n      ensureMinPoolSize(this);\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n\n\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /** An integer representing the SDAM generation of the pool */\n\n\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (active + in use) the pool currently has */\n\n\n  get totalConnectionCount() {\n    return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n\n\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n\n  get currentCheckedOutCount() {\n    return this[kCheckedOut];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n\n\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n\n\n  checkOut(callback) {\n    this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n\n    if (this.closed) {\n      this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n      callback(new errors_1.PoolClosedError(this));\n      return;\n    }\n\n    const waitQueueMember = {\n      callback\n    };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n        waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address));\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kCheckedOut] = this[kCheckedOut] + 1;\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(processWaitQueue, this);\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n\n\n  checkIn(connection) {\n    const poolClosed = this.closed;\n    const stale = connectionIsStale(this, connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut] = this[kCheckedOut] - 1;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      destroyConnection(this, connection, reason);\n    }\n\n    process.nextTick(processWaitQueue, this);\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n\n\n  clear(serviceId) {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid); // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n\n    this.emit('connectionPoolCleared', new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n  }\n\n  close(_options, _cb) {\n    let options = _options;\n    const callback = _cb !== null && _cb !== void 0 ? _cb : _options;\n\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({\n      force: false\n    }, options);\n\n    if (this.closed) {\n      return callback();\n    } // immediately cancel any in-flight connections\n\n\n    this[kCancellationToken].emit('cancel'); // drain the wait queue\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    } // clear the min pool size timer\n\n\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    } // end the connection counter\n\n\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    } // mark the pool as closed immediately\n\n\n    this.closed = true;\n    utils_1.eachAsync(this[kConnections].toArray(), (conn, cb) => {\n      this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy(options, cb);\n    }, err => {\n      this[kConnections].clear();\n      this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n      callback(err);\n    });\n  }\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n\n\n  withConnection(conn, fn, callback) {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n\n}\n\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/**\n * Emitted when a connection is created.\n * @event\n */\n\nConnectionPool.CONNECTION_CREATED = 'connectionCreated';\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\n\nConnectionPool.CONNECTION_READY = 'connectionReady';\n/**\n * Emitted when a connection is closed\n * @event\n */\n\nConnectionPool.CONNECTION_CLOSED = 'connectionClosed';\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\n\nfunction ensureMinPoolSize(pool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n\n  const minPoolSize = pool.options.minPoolSize;\n\n  for (let i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n\n  pool[kMinPoolSizeTimer] = setTimeout(() => ensureMinPoolSize(pool), 10);\n}\n\nfunction connectionIsStale(pool, connection) {\n  const serviceId = connection.serviceId;\n\n  if (pool.loadBalanced && serviceId) {\n    const sid = serviceId.toHexString();\n    const generation = pool.serviceGenerations.get(sid);\n    return connection.generation !== generation;\n  }\n\n  return connection.generation !== pool[kGeneration];\n}\n\nfunction connectionIsIdle(pool, connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\n\nfunction createConnection(pool, callback) {\n  const connectOptions = { ...pool.options,\n    id: pool[kConnectionCounter].next().value,\n    generation: pool[kGeneration],\n    cancellationToken: pool[kCancellationToken]\n  };\n  pool[kPermits]--;\n  connect_1.connect(connectOptions, (err, connection) => {\n    if (err || !connection) {\n      pool[kPermits]++;\n      pool[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    } // The pool might have closed since we started trying to create a connection\n\n\n    if (pool.closed) {\n      connection.destroy({\n        force: true\n      });\n      return;\n    } // forward all events from the connection to the pool\n\n\n    for (const event of [...connection_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n      connection.on(event, e => pool.emit(event, e));\n    }\n\n    pool.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(pool, connection));\n\n    if (pool.loadBalanced) {\n      connection.on(connection_1.Connection.PINNED, pinType => pool[kMetrics].markPinned(pinType));\n      connection.on(connection_1.Connection.UNPINNED, pinType => pool[kMetrics].markUnpinned(pinType));\n      const serviceId = connection.serviceId;\n\n      if (serviceId) {\n        let generation;\n        const sid = serviceId.toHexString();\n\n        if (generation = pool.serviceGenerations.get(sid)) {\n          connection.generation = generation;\n        } else {\n          pool.serviceGenerations.set(sid, 0);\n          connection.generation = 0;\n        }\n      }\n    }\n\n    connection.markAvailable();\n    pool.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(pool, connection)); // if a callback has been provided, check out the connection immediately\n\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    } // otherwise add it to the pool for later acquisition, and try to process the wait queue\n\n\n    pool[kConnections].push(connection);\n    process.nextTick(processWaitQueue, pool);\n  });\n}\n\nfunction destroyConnection(pool, connection, reason) {\n  pool.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(pool, connection, reason)); // allow more connections to be created\n\n  pool[kPermits]++; // destroy the connection\n\n  process.nextTick(() => connection.destroy());\n}\n\nfunction processWaitQueue(pool) {\n  if (pool.closed || pool[kProcessingWaitQueue]) {\n    return;\n  }\n\n  pool[kProcessingWaitQueue] = true;\n\n  while (pool.waitQueueSize) {\n    const waitQueueMember = pool[kWaitQueue].peekFront();\n\n    if (!waitQueueMember) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (!pool.availableConnectionCount) {\n      break;\n    }\n\n    const connection = pool[kConnections].shift();\n\n    if (!connection) {\n      break;\n    }\n\n    const isStale = connectionIsStale(pool, connection);\n    const isIdle = connectionIsIdle(pool, connection);\n\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n    } else {\n      const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n      destroyConnection(pool, connection, reason);\n    }\n  }\n\n  const maxPoolSize = pool.options.maxPoolSize;\n\n  if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, (err, connection) => {\n      const waitQueueMember = pool[kWaitQueue].shift();\n\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        if (!err && connection) {\n          pool[kConnections].push(connection);\n        }\n\n        pool[kProcessingWaitQueue] = false;\n        return;\n      }\n\n      if (err) {\n        pool.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(pool, err));\n      } else if (connection) {\n        pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n      }\n\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(err, connection);\n      pool[kProcessingWaitQueue] = false;\n      process.nextTick(() => processWaitQueue(pool));\n    });\n  } else {\n    pool[kProcessingWaitQueue] = false;\n  }\n}\n\nexports.CMAP_EVENTS = [ConnectionPool.CONNECTION_POOL_CREATED, ConnectionPool.CONNECTION_POOL_CLOSED, ConnectionPool.CONNECTION_CREATED, ConnectionPool.CONNECTION_READY, ConnectionPool.CONNECTION_CLOSED, ConnectionPool.CONNECTION_CHECK_OUT_STARTED, ConnectionPool.CONNECTION_CHECK_OUT_FAILED, ConnectionPool.CONNECTION_CHECKED_OUT, ConnectionPool.CONNECTION_CHECKED_IN, ConnectionPool.CONNECTION_POOL_CLEARED];","map":{"version":3,"sources":["../../src/cmap/connection_pool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CMAP_EVENTS = exports.ConnectionPool = void 0;\nconst Denque = require(\"denque\");\nconst connection_1 = require(\"./connection\");\nconst logger_1 = require(\"../logger\");\nconst metrics_1 = require(\"./metrics\");\nconst connect_1 = require(\"./connect\");\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst errors_1 = require(\"./errors\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\nconst kLogger = Symbol('logger');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPermits = Symbol('permits');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super();\n        this.closed = false;\n        this.options = Object.freeze({\n            ...options,\n            connectionType: connection_1.Connection,\n            maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n            minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n            maxIdleTimeMS: (_c = options.maxIdleTimeMS) !== null && _c !== void 0 ? _c : 0,\n            waitQueueTimeoutMS: (_d = options.waitQueueTimeoutMS) !== null && _d !== void 0 ? _d : 0,\n            autoEncrypter: options.autoEncrypter,\n            metadata: options.metadata\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this[kLogger] = new logger_1.Logger('ConnectionPool');\n        this[kConnections] = new Denque();\n        this[kPermits] = this.options.maxPoolSize;\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = utils_1.makeCounter(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new Denque();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kCheckedOut] = 0;\n        this[kProcessingWaitQueue] = false;\n        process.nextTick(() => {\n            this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n            ensureMinPoolSize(this);\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /** An integer representing the SDAM generation of the pool */\n    get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (active + in use) the pool currently has */\n    get totalConnectionCount() {\n        return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    checkOut(callback) {\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        if (this.closed) {\n            this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n            callback(new errors_1.PoolClosedError(this));\n            return;\n        }\n        const waitQueueMember = { callback };\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        if (waitQueueTimeoutMS) {\n            waitQueueMember.timer = setTimeout(() => {\n                waitQueueMember[kCancelled] = true;\n                waitQueueMember.timer = undefined;\n                this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n                waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                    ? this.waitQueueErrorMetrics()\n                    : 'Timed out while checking out a connection from connection pool', this.address));\n            }, waitQueueTimeoutMS);\n        }\n        this[kCheckedOut] = this[kCheckedOut] + 1;\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(processWaitQueue, this);\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        const poolClosed = this.closed;\n        const stale = connectionIsStale(this, connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut] = this[kCheckedOut] - 1;\n        this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            destroyConnection(this, connection, reason);\n        }\n        process.nextTick(processWaitQueue, this);\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(serviceId) {\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                // TODO(NODE-3483)\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n        }\n        else {\n            this[kGeneration] += 1;\n        }\n        this.emit('connectionPoolCleared', new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n    }\n    close(_options, _cb) {\n        let options = _options;\n        const callback = (_cb !== null && _cb !== void 0 ? _cb : _options);\n        if (typeof options === 'function') {\n            options = {};\n        }\n        options = Object.assign({ force: false }, options);\n        if (this.closed) {\n            return callback();\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit('cancel');\n        // drain the wait queue\n        while (this.waitQueueSize) {\n            const waitQueueMember = this[kWaitQueue].pop();\n            if (waitQueueMember) {\n                if (waitQueueMember.timer) {\n                    clearTimeout(waitQueueMember.timer);\n                }\n                if (!waitQueueMember[kCancelled]) {\n                    // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n                    waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n                }\n            }\n        }\n        // clear the min pool size timer\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            clearTimeout(minPoolSizeTimer);\n        }\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === 'function') {\n            this[kConnectionCounter].return(undefined);\n        }\n        // mark the pool as closed immediately\n        this.closed = true;\n        utils_1.eachAsync(this[kConnections].toArray(), (conn, cb) => {\n            this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy(options, cb);\n        }, err => {\n            this[kConnections].clear();\n            this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n            callback(err);\n        });\n    }\n    /**\n     * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n     * has completed by calling back.\n     *\n     * NOTE: please note the required signature of `fn`\n     *\n     * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n     *   In these cases we pass the connection in to this method to ensure it is used and a new\n     *   connection is not checked out.\n     *\n     * @param conn - A pinned connection for use in load balancing mode.\n     * @param fn - A function which operates on a managed connection\n     * @param callback - The original callback\n     */\n    withConnection(conn, fn, callback) {\n        if (conn) {\n            // use the provided connection, and do _not_ check it in after execution\n            fn(undefined, conn, (fnErr, result) => {\n                if (typeof callback === 'function') {\n                    if (fnErr) {\n                        callback(fnErr);\n                    }\n                    else {\n                        callback(undefined, result);\n                    }\n                }\n            });\n            return;\n        }\n        this.checkOut((err, conn) => {\n            // don't callback with `err` here, we might want to act upon it inside `fn`\n            fn(err, conn, (fnErr, result) => {\n                if (typeof callback === 'function') {\n                    if (fnErr) {\n                        callback(fnErr);\n                    }\n                    else {\n                        callback(undefined, result);\n                    }\n                }\n                if (conn) {\n                    this.checkIn(conn);\n                }\n            });\n        });\n    }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = 'connectionCreated';\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = 'connectionReady';\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = 'connectionClosed';\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nfunction ensureMinPoolSize(pool) {\n    if (pool.closed || pool.options.minPoolSize === 0) {\n        return;\n    }\n    const minPoolSize = pool.options.minPoolSize;\n    for (let i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n        createConnection(pool);\n    }\n    pool[kMinPoolSizeTimer] = setTimeout(() => ensureMinPoolSize(pool), 10);\n}\nfunction connectionIsStale(pool, connection) {\n    const serviceId = connection.serviceId;\n    if (pool.loadBalanced && serviceId) {\n        const sid = serviceId.toHexString();\n        const generation = pool.serviceGenerations.get(sid);\n        return connection.generation !== generation;\n    }\n    return connection.generation !== pool[kGeneration];\n}\nfunction connectionIsIdle(pool, connection) {\n    return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\nfunction createConnection(pool, callback) {\n    const connectOptions = {\n        ...pool.options,\n        id: pool[kConnectionCounter].next().value,\n        generation: pool[kGeneration],\n        cancellationToken: pool[kCancellationToken]\n    };\n    pool[kPermits]--;\n    connect_1.connect(connectOptions, (err, connection) => {\n        if (err || !connection) {\n            pool[kPermits]++;\n            pool[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n            if (typeof callback === 'function') {\n                callback(err);\n            }\n            return;\n        }\n        // The pool might have closed since we started trying to create a connection\n        if (pool.closed) {\n            connection.destroy({ force: true });\n            return;\n        }\n        // forward all events from the connection to the pool\n        for (const event of [...connection_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n            connection.on(event, (e) => pool.emit(event, e));\n        }\n        pool.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(pool, connection));\n        if (pool.loadBalanced) {\n            connection.on(connection_1.Connection.PINNED, pinType => pool[kMetrics].markPinned(pinType));\n            connection.on(connection_1.Connection.UNPINNED, pinType => pool[kMetrics].markUnpinned(pinType));\n            const serviceId = connection.serviceId;\n            if (serviceId) {\n                let generation;\n                const sid = serviceId.toHexString();\n                if ((generation = pool.serviceGenerations.get(sid))) {\n                    connection.generation = generation;\n                }\n                else {\n                    pool.serviceGenerations.set(sid, 0);\n                    connection.generation = 0;\n                }\n            }\n        }\n        connection.markAvailable();\n        pool.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(pool, connection));\n        // if a callback has been provided, check out the connection immediately\n        if (typeof callback === 'function') {\n            callback(undefined, connection);\n            return;\n        }\n        // otherwise add it to the pool for later acquisition, and try to process the wait queue\n        pool[kConnections].push(connection);\n        process.nextTick(processWaitQueue, pool);\n    });\n}\nfunction destroyConnection(pool, connection, reason) {\n    pool.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(pool, connection, reason));\n    // allow more connections to be created\n    pool[kPermits]++;\n    // destroy the connection\n    process.nextTick(() => connection.destroy());\n}\nfunction processWaitQueue(pool) {\n    if (pool.closed || pool[kProcessingWaitQueue]) {\n        return;\n    }\n    pool[kProcessingWaitQueue] = true;\n    while (pool.waitQueueSize) {\n        const waitQueueMember = pool[kWaitQueue].peekFront();\n        if (!waitQueueMember) {\n            pool[kWaitQueue].shift();\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            pool[kWaitQueue].shift();\n            continue;\n        }\n        if (!pool.availableConnectionCount) {\n            break;\n        }\n        const connection = pool[kConnections].shift();\n        if (!connection) {\n            break;\n        }\n        const isStale = connectionIsStale(pool, connection);\n        const isIdle = connectionIsIdle(pool, connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n            if (waitQueueMember.timer) {\n                clearTimeout(waitQueueMember.timer);\n            }\n            pool[kWaitQueue].shift();\n            waitQueueMember.callback(undefined, connection);\n        }\n        else {\n            const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n            destroyConnection(pool, connection, reason);\n        }\n    }\n    const maxPoolSize = pool.options.maxPoolSize;\n    if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n        createConnection(pool, (err, connection) => {\n            const waitQueueMember = pool[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                if (!err && connection) {\n                    pool[kConnections].push(connection);\n                }\n                pool[kProcessingWaitQueue] = false;\n                return;\n            }\n            if (err) {\n                pool.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(pool, err));\n            }\n            else if (connection) {\n                pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n            }\n            if (waitQueueMember.timer) {\n                clearTimeout(waitQueueMember.timer);\n            }\n            waitQueueMember.callback(err, connection);\n            pool[kProcessingWaitQueue] = false;\n            process.nextTick(() => processWaitQueue(pool));\n        });\n    }\n    else {\n        pool[kProcessingWaitQueue] = false;\n    }\n}\nexports.CMAP_EVENTS = [\n    ConnectionPool.CONNECTION_POOL_CREATED,\n    ConnectionPool.CONNECTION_POOL_CLOSED,\n    ConnectionPool.CONNECTION_CREATED,\n    ConnectionPool.CONNECTION_READY,\n    ConnectionPool.CONNECTION_CLOSED,\n    ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n    ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n    ConnectionPool.CONNECTION_CHECKED_OUT,\n    ConnectionPool.CONNECTION_CHECKED_IN,\n    ConnectionPool.CONNECTION_POOL_CLEARED\n];\n//# sourceMappingURL=connection_pool.js.map"]},"metadata":{},"sourceType":"script"}