{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitQueueTimeoutError = exports.PoolClosedError = void 0;\n\nconst error_1 = require(\"../error\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\n\n\nclass PoolClosedError extends error_1.MongoDriverError {\n  constructor(pool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n\n  get name() {\n    return 'MongoPoolClosedError';\n  }\n\n}\n\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\n\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n  constructor(message, address) {\n    super(message);\n    this.address = address;\n  }\n\n  get name() {\n    return 'MongoWaitQueueTimeoutError';\n  }\n\n}\n\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;","map":{"version":3,"sources":["../../src/cmap/errors.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAGA;;;AAGG;;;AACH,MAAa,eAAb,SAAqC,OAAA,CAAA,gBAArC,CAAqD;AAInD,EAAA,WAAA,CAAY,IAAZ,EAAgC;AAC9B,UAAM,iEAAN;AACA,SAAK,OAAL,GAAe,IAAI,CAAC,OAApB;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,sBAAP;AACD;;AAXkD;;AAArD,OAAA,CAAA,eAAA,GAAA,eAAA;AAcA;;;AAGG;;AACH,MAAa,qBAAb,SAA2C,OAAA,CAAA,gBAA3C,CAA2D;AAIzD,EAAA,WAAA,CAAY,OAAZ,EAA6B,OAA7B,EAA4C;AAC1C,UAAM,OAAN;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,4BAAP;AACD;;AAXwD;;AAA3D,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WaitQueueTimeoutError = exports.PoolClosedError = void 0;\nconst error_1 = require(\"../error\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n    constructor(pool) {\n        super('Attempted to check out a connection from closed connection pool');\n        this.address = pool.address;\n    }\n    get name() {\n        return 'MongoPoolClosedError';\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n    constructor(message, address) {\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return 'MongoWaitQueueTimeoutError';\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}