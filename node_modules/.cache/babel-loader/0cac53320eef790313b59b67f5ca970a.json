{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommaAndColonSeparatedRecord = void 0;\n\nconst whatwg_url_1 = require(\"whatwg-url\");\n\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\nconst HOSTS_REGEX = new RegExp(String.raw`(?<protocol>mongodb(?:\\+srv|)):\\/\\/(?:(?<username>[^:]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^\\/?@]+)(?<rest>.*)`);\n\nclass CaseInsensitiveMap extends Map {\n  delete(name) {\n    return super.delete(this._normalizeKey(name));\n  }\n\n  get(name) {\n    return super.get(this._normalizeKey(name));\n  }\n\n  has(name) {\n    return super.has(this._normalizeKey(name));\n  }\n\n  set(name, value) {\n    return super.set(this._normalizeKey(name), value);\n  }\n\n  _normalizeKey(name) {\n    name = `${name}`;\n\n    for (const key of this.keys()) {\n      if (key.toLowerCase() === name.toLowerCase()) {\n        name = key;\n        break;\n      }\n    }\n\n    return name;\n  }\n\n}\n\nconst caseInsenstiveURLSearchParams = Ctor => class CaseInsenstiveURLSearchParams extends Ctor {\n  append(name, value) {\n    return super.append(this._normalizeKey(name), value);\n  }\n\n  delete(name) {\n    return super.delete(this._normalizeKey(name));\n  }\n\n  get(name) {\n    return super.get(this._normalizeKey(name));\n  }\n\n  getAll(name) {\n    return super.getAll(this._normalizeKey(name));\n  }\n\n  has(name) {\n    return super.has(this._normalizeKey(name));\n  }\n\n  set(name, value) {\n    return super.set(this._normalizeKey(name), value);\n  }\n\n  _normalizeKey(name) {\n    return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n  }\n\n};\n\nclass URLWithoutHost extends whatwg_url_1.URL {}\n\nclass MongoParseError extends Error {\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nclass ConnectionString extends URLWithoutHost {\n  constructor(uri) {\n    var _a;\n\n    const match = uri.match(HOSTS_REGEX);\n\n    if (!match) {\n      throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n    }\n\n    const {\n      protocol,\n      username,\n      password,\n      hosts,\n      rest\n    } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n\n    if (!protocol || !hosts) {\n      throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n    }\n\n    try {\n      decodeURIComponent(username !== null && username !== void 0 ? username : '');\n      decodeURIComponent(password !== null && password !== void 0 ? password : '');\n    } catch (err) {\n      throw new MongoParseError(err.message);\n    }\n\n    const illegalCharacters = new RegExp(String.raw`[:/?#\\[\\]@]`, 'gi');\n\n    if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n      throw new MongoParseError(`Username contains unescaped characters ${username}`);\n    }\n\n    if (!username || !password) {\n      const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n\n      if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n        throw new MongoParseError('URI contained empty userinfo section');\n      }\n    }\n\n    if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n      throw new MongoParseError('Password contains unescaped characters');\n    }\n\n    let authString = '';\n    if (typeof username === 'string') authString += username;\n    if (typeof password === 'string') authString += `:${password}`;\n    if (authString) authString += '@';\n    super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n    this._hosts = hosts.split(',');\n\n    if (this.isSRV && this.hosts.length !== 1) {\n      throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n    }\n\n    if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n      throw new MongoParseError('mongodb+srv URI cannot have port number');\n    }\n\n    if (!this.pathname) {\n      this.pathname = '/';\n    }\n\n    Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n  }\n\n  get host() {\n    return DUMMY_HOSTNAME;\n  }\n\n  set host(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get hostname() {\n    return DUMMY_HOSTNAME;\n  }\n\n  set hostname(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get port() {\n    return '';\n  }\n\n  set port(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get href() {\n    return this.toString();\n  }\n\n  set href(_ignored) {\n    throw new Error('Cannot set href for connection strings');\n  }\n\n  get isSRV() {\n    return this.protocol.includes('srv');\n  }\n\n  get hosts() {\n    return this._hosts;\n  }\n\n  set hosts(list) {\n    this._hosts = list;\n  }\n\n  toString() {\n    return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n  }\n\n  clone() {\n    return new ConnectionString(this.toString());\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    const {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    } = this;\n    return {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    };\n  }\n\n}\n\nexports.default = ConnectionString;\n\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n  constructor(from) {\n    super();\n\n    for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n      if (!entry) continue;\n      const colonIndex = entry.indexOf(':');\n\n      if (colonIndex === -1) {\n        this.set(entry, '');\n      } else {\n        this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n      }\n    }\n  }\n\n  toString() {\n    return [...this].map(entry => entry.join(':')).join(',');\n  }\n\n}\n\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommaAndColonSeparatedRecord = void 0;\nconst whatwg_url_1 = require(\"whatwg-url\");\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\nconst HOSTS_REGEX = new RegExp(String.raw `(?<protocol>mongodb(?:\\+srv|)):\\/\\/(?:(?<username>[^:]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^\\/?@]+)(?<rest>.*)`);\nclass CaseInsensitiveMap extends Map {\n    delete(name) {\n        return super.delete(this._normalizeKey(name));\n    }\n    get(name) {\n        return super.get(this._normalizeKey(name));\n    }\n    has(name) {\n        return super.has(this._normalizeKey(name));\n    }\n    set(name, value) {\n        return super.set(this._normalizeKey(name), value);\n    }\n    _normalizeKey(name) {\n        name = `${name}`;\n        for (const key of this.keys()) {\n            if (key.toLowerCase() === name.toLowerCase()) {\n                name = key;\n                break;\n            }\n        }\n        return name;\n    }\n}\nconst caseInsenstiveURLSearchParams = (Ctor) => class CaseInsenstiveURLSearchParams extends Ctor {\n    append(name, value) {\n        return super.append(this._normalizeKey(name), value);\n    }\n    delete(name) {\n        return super.delete(this._normalizeKey(name));\n    }\n    get(name) {\n        return super.get(this._normalizeKey(name));\n    }\n    getAll(name) {\n        return super.getAll(this._normalizeKey(name));\n    }\n    has(name) {\n        return super.has(this._normalizeKey(name));\n    }\n    set(name, value) {\n        return super.set(this._normalizeKey(name), value);\n    }\n    _normalizeKey(name) {\n        return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n    }\n};\nclass URLWithoutHost extends whatwg_url_1.URL {\n}\nclass MongoParseError extends Error {\n    get name() {\n        return 'MongoParseError';\n    }\n}\nclass ConnectionString extends URLWithoutHost {\n    constructor(uri) {\n        var _a;\n        const match = uri.match(HOSTS_REGEX);\n        if (!match) {\n            throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n        }\n        const { protocol, username, password, hosts, rest } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n        if (!protocol || !hosts) {\n            throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n        }\n        try {\n            decodeURIComponent(username !== null && username !== void 0 ? username : '');\n            decodeURIComponent(password !== null && password !== void 0 ? password : '');\n        }\n        catch (err) {\n            throw new MongoParseError(err.message);\n        }\n        const illegalCharacters = new RegExp(String.raw `[:/?#\\[\\]@]`, 'gi');\n        if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n            throw new MongoParseError(`Username contains unescaped characters ${username}`);\n        }\n        if (!username || !password) {\n            const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n            if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n                throw new MongoParseError('URI contained empty userinfo section');\n            }\n        }\n        if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n            throw new MongoParseError('Password contains unescaped characters');\n        }\n        let authString = '';\n        if (typeof username === 'string')\n            authString += username;\n        if (typeof password === 'string')\n            authString += `:${password}`;\n        if (authString)\n            authString += '@';\n        super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n        this._hosts = hosts.split(',');\n        if (this.isSRV && this.hosts.length !== 1) {\n            throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n        }\n        if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n            throw new MongoParseError('mongodb+srv URI cannot have port number');\n        }\n        if (!this.pathname) {\n            this.pathname = '/';\n        }\n        Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n    }\n    get host() { return DUMMY_HOSTNAME; }\n    set host(_ignored) { throw new Error('No single host for connection string'); }\n    get hostname() { return DUMMY_HOSTNAME; }\n    set hostname(_ignored) { throw new Error('No single host for connection string'); }\n    get port() { return ''; }\n    set port(_ignored) { throw new Error('No single host for connection string'); }\n    get href() { return this.toString(); }\n    set href(_ignored) { throw new Error('Cannot set href for connection strings'); }\n    get isSRV() {\n        return this.protocol.includes('srv');\n    }\n    get hosts() {\n        return this._hosts;\n    }\n    set hosts(list) {\n        this._hosts = list;\n    }\n    toString() {\n        return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n    }\n    clone() {\n        return new ConnectionString(this.toString());\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        const { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash } = this;\n        return { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash };\n    }\n}\nexports.default = ConnectionString;\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n    constructor(from) {\n        super();\n        for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n            if (!entry)\n                continue;\n            const colonIndex = entry.indexOf(':');\n            if (colonIndex === -1) {\n                this.set(entry, '');\n            }\n            else {\n                this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n            }\n        }\n    }\n    toString() {\n        return [...this].map(entry => entry.join(':')).join(',');\n    }\n}\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}