{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandOperation = void 0;\n\nconst operation_1 = require(\"./operation\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst write_concern_1 = require(\"../write_concern\");\n\nconst utils_1 = require(\"../utils\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst error_1 = require(\"../error\");\n\nconst explain_1 = require(\"../explain\");\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n/** @internal */\n\nclass CommandOperation extends operation_1.AbstractOperation {\n  constructor(parent, options) {\n    super(options);\n    this.options = options !== null && options !== void 0 ? options : {}; // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n\n    const dbNameOverride = (options === null || options === void 0 ? void 0 : options.dbName) || (options === null || options === void 0 ? void 0 : options.authdb);\n\n    if (dbNameOverride) {\n      this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent ? parent.s.namespace.withCollection('$cmd') : new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options); // TODO(NODE-2056): make logger another \"inheritable\" property\n\n    if (parent && parent.logger) {\n      this.logger = parent.logger;\n    }\n\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      this.explain = explain_1.Explain.fromOptions(options);\n    } else if ((options === null || options === void 0 ? void 0 : options.explain) != null) {\n      throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n\n  get canRetryWrite() {\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n\n    return true;\n  }\n\n  executeCommand(server, session, cmd, callback) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n    const options = { ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n    const serverWireVersion = utils_1.maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && sessions_1.commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, {\n        readConcern: this.readConcern\n      });\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n      return;\n    }\n\n    if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n      Object.assign(cmd, {\n        writeConcern: this.writeConcern\n      });\n    }\n\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (options.collation && typeof options.collation === 'object' && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n        Object.assign(cmd, {\n          collation: options.collation\n        });\n      }\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n      if (serverWireVersion < 6 && cmd.aggregate) {\n        // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in \"explain: true\"\n        cmd.explain = true;\n      } else {\n        cmd = utils_1.decorateWithExplain(cmd, this.explain);\n      }\n    }\n\n    server.command(this.ns, cmd, options, callback);\n  }\n\n}\n\nexports.CommandOperation = CommandOperation;","map":{"version":3,"sources":["../../src/operations/command.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommandOperation = void 0;\nconst operation_1 = require(\"./operation\");\nconst read_concern_1 = require(\"../read_concern\");\nconst write_concern_1 = require(\"../write_concern\");\nconst utils_1 = require(\"../utils\");\nconst sessions_1 = require(\"../sessions\");\nconst error_1 = require(\"../error\");\nconst explain_1 = require(\"../explain\");\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options) {\n        super(options);\n        this.options = options !== null && options !== void 0 ? options : {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = (options === null || options === void 0 ? void 0 : options.dbName) || (options === null || options === void 0 ? void 0 : options.authdb);\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n        }\n        else {\n            this.ns = parent\n                ? parent.s.namespace.withCollection('$cmd')\n                : new utils_1.MongoDBNamespace('admin', '$cmd');\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        // TODO(NODE-2056): make logger another \"inheritable\" property\n        if (parent && parent.logger) {\n            this.logger = parent.logger;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.explain) != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return true;\n    }\n    executeCommand(server, session, cmd, callback) {\n        // TODO: consider making this a non-enumerable property\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = utils_1.maxWireVersion(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && sessions_1.commandSupportsReadConcern(cmd) && !inTransaction) {\n            Object.assign(cmd, { readConcern: this.readConcern });\n        }\n        if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n            callback(new error_1.MongoCompatibilityError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n            return;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            Object.assign(cmd, { writeConcern: this.writeConcern });\n        }\n        if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n            if (options.collation &&\n                typeof options.collation === 'object' &&\n                !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n                Object.assign(cmd, { collation: options.collation });\n            }\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.comment === 'string') {\n            cmd.comment = options.comment;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            if (serverWireVersion < 6 && cmd.aggregate) {\n                // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in \"explain: true\"\n                cmd.explain = true;\n            }\n            else {\n                cmd = utils_1.decorateWithExplain(cmd, this.explain);\n            }\n        }\n        server.command(this.ns, cmd, options, callback);\n    }\n}\nexports.CommandOperation = CommandOperation;\n//# sourceMappingURL=command.js.map"]},"metadata":{},"sourceType":"script"}