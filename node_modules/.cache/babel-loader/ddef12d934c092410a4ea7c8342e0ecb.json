{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\n\nconst dns = require(\"dns\");\n\nconst fs = require(\"fs\");\n\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\n\nconst url_1 = require(\"url\");\n\nconst defaultAuthProviders_1 = require(\"./cmap/auth/defaultAuthProviders\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst error_1 = require(\"./error\");\n\nconst utils_1 = require(\"./utils\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\n\nconst logger_1 = require(\"./logger\");\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst encrypter_1 = require(\"./encrypter\");\n\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\n\n\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    const hostAddresses = addresses.map(r => {\n      var _a;\n\n      return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n    });\n    const lbError = validateLoadBalancedOptions(hostAddresses, options);\n\n    if (lbError) {\n      return callback(lbError);\n    } // Resolve TXT record and add options from there if they exist.\n\n\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      var _a, _b, _c;\n\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n        }\n\n        const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n\n        if (source === '' || replicaSet === '') {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        if (!options.userSpecifiedAuthSource && source) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n          });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        const lbError = validateLoadBalancedOptions(hostAddresses, options);\n\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\n\nfunction checkTLSOptions(options) {\n  if (!options) return;\n\n  const check = (a, b) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\n\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) return true;\n  if (FALSEHOODS.has(valueString)) return false;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name, value) {\n  const parsedValue = getInt(name, value);\n\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n\n  return parsedValue;\n}\n\nfunction toRecord(value) {\n  const record = Object.create(null);\n  const keyValuePairs = value.split(',');\n\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    try {\n      // try to get a boolean\n      record[key] = getBoolean('', value);\n    } catch {\n      try {\n        // try to get a number\n        record[key] = getInt('', value);\n      } catch {\n        // keep value as a string\n        record[key] = value;\n      }\n    }\n  }\n\n  return record;\n}\n\nclass CaseInsensitiveMap extends Map {\n  constructor(entries = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n\n}\n\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (!url.searchParams.has('tls') && !url.searchParams.has('ssl')) {\n      options.tls = true;\n    }\n  }\n\n  const urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (key.toLowerCase() === 'serverapi') {\n      throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n\n    if (key.toLowerCase() === 'authsource' && urlOptions.has('authSource')) {\n      // If authSource is an explicit key in the urlOptions we need to remove the implicit dbName\n      urlOptions.delete('authSource');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n\n  for (const key of allKeys) {\n    const values = [];\n\n    if (objectOptions.has(key)) {\n      values.push(objectOptions.get(key));\n    }\n\n    if (urlOptions.has(key)) {\n      values.push(...urlOptions.get(key));\n    }\n\n    if (exports.DEFAULT_OPTIONS.has(key)) {\n      values.push(exports.DEFAULT_OPTIONS.get(key));\n    }\n\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  const unsupportedOptions = utils_1.setDifference(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS;\n\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate();\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n\n  if (mongoOptions.directConnection && typeof mongoOptions.srvHost === 'string') {\n    throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n  }\n\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions);\n\n  if (lbError) {\n    throw lbError;\n  } // Potential SRV Overrides\n\n\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  return mongoOptions;\n}\n\nexports.parseOptions = parseOptions;\n\nfunction validateLoadBalancedOptions(hosts, mongoOptions) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n  }\n}\n\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    utils_1.emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n\n      mongoOptions[name] = String(values[0]);\n      break;\n\n    case 'record':\n      if (!utils_1.isRecord(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n\n      mongoOptions[name] = values[0];\n      break;\n\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\n\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      return utils_1.makeClientMetadata({ ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n\n  },\n  auth: {\n    target: 'credentials',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      if (!utils_1.isRecord(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n\n  },\n  authMechanism: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      var _a, _b;\n\n      const mechanisms = Object.values(defaultAuthProviders_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      if (typeof value === 'string') {\n        value = toRecord(value);\n      }\n\n      if (!utils_1.isRecord(value)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: value\n      });\n    }\n\n  },\n  authSource: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n\n    transform({\n      values: [version]\n    }) {\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      return serverApiToValidate;\n    }\n\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n\n    transform({\n      values\n    }) {\n      const compressionList = new Set();\n\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n\n      return [...compressionList];\n    }\n\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: utils_1.makeClientMetadata(),\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      var _a, _b;\n\n      if (!utils_1.isRecord(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return utils_1.makeClientMetadata({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n\n  },\n  family: {\n    transform({\n      name,\n      values: [value]\n    }) {\n      const transformValue = getInt(name, value);\n\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  journal: {\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n\n    transform({\n      values: [value]\n    }) {\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n\n      utils_1.emitWarning('Alternative loggers might not be supported'); // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n    }\n\n  },\n  loggerLevel: {\n    target: 'logger',\n\n    transform({\n      values: [value]\n    }) {\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const maxStalenessSeconds = getUint(name, value);\n\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      return { ...options.driverInfo,\n        name: String(value)\n      };\n    }\n\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n\n    transform({\n      values: [value]\n    }) {\n      if (utils_1.isRecord(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_concern_1.ReadConcern || utils_1.isRecord(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n          ...value\n        });\n      }\n\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n\n    transform({\n      values: [level],\n      options\n    }) {\n      return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n        level: level\n      });\n    }\n\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n\n    transform({\n      values: [value],\n      options\n    }) {\n      var _a, _b, _c;\n\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n\n      if (utils_1.isRecord(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n    }\n\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n\n    transform({\n      values,\n      options\n    }) {\n      const readPreferenceTags = [];\n\n      for (const tag of values) {\n        const readPreferenceTag = Object.create(null);\n\n        if (typeof tag === 'string') {\n          for (const [k, v] of Object.entries(toRecord(tag))) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        if (utils_1.isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        readPreferenceTags.push(readPreferenceTag);\n      }\n\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCRL: {\n    target: 'crl',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCert: {\n    target: 'cert',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslKey: {\n    target: 'key',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n\n    transform({\n      name,\n      values: [value]\n    }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n\n    transform({\n      name,\n      values: [value]\n    }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n\n  },\n  tlsCAFile: {\n    target: 'ca',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const tlsInsecure = getBoolean(name, value);\n\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n\n      return tlsInsecure;\n    }\n\n  },\n  w: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      if (utils_1.isRecord(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor]) => descriptor.default != null).map(([k, d]) => [k, d.default]));","map":{"version":3,"sources":["../src/connection_string.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst defaultAuthProviders_1 = require(\"./cmap/auth/defaultAuthProviders\");\nconst read_preference_1 = require(\"./read_preference\");\nconst read_concern_1 = require(\"./read_concern\");\nconst write_concern_1 = require(\"./write_concern\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst logger_1 = require(\"./logger\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst encrypter_1 = require(\"./encrypter\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n    const regex = /^.*?\\./;\n    const srv = `.${srvAddress.replace(regex, '')}`;\n    const parent = `.${parentDomain.replace(regex, '')}`;\n    return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(options, callback) {\n    if (typeof options.srvHost !== 'string') {\n        return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n    }\n    if (options.srvHost.split('.').length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n    }\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const lookupAddress = options.srvHost;\n    dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n        if (err)\n            return callback(err);\n        if (addresses.length === 0) {\n            return callback(new error_1.MongoAPIError('No addresses found at host'));\n        }\n        for (const { name } of addresses) {\n            if (!matchesParentDomain(name, lookupAddress)) {\n                return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n            }\n        }\n        const hostAddresses = addresses.map(r => { var _a; return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`); });\n        const lbError = validateLoadBalancedOptions(hostAddresses, options);\n        if (lbError) {\n            return callback(lbError);\n        }\n        // Resolve TXT record and add options from there if they exist.\n        dns.resolveTxt(lookupAddress, (err, record) => {\n            var _a, _b, _c;\n            if (err) {\n                if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n                    return callback(err);\n                }\n            }\n            else {\n                if (record.length > 1) {\n                    return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n                }\n                const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n                const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n                if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n                    return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n                }\n                const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n                const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n                const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n                if (source === '' || replicaSet === '') {\n                    return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n                }\n                if (!options.userSpecifiedAuthSource && source) {\n                    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n                }\n                if (!options.userSpecifiedReplicaSet && replicaSet) {\n                    options.replicaSet = replicaSet;\n                }\n                if (loadBalanced === 'true') {\n                    options.loadBalanced = true;\n                }\n                const lbError = validateLoadBalancedOptions(hostAddresses, options);\n                if (lbError) {\n                    return callback(lbError);\n                }\n            }\n            callback(undefined, hostAddresses);\n        });\n    });\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nfunction checkTLSOptions(options) {\n    if (!options)\n        return;\n    const check = (a, b) => {\n        if (Reflect.has(options, a) && Reflect.has(options, b)) {\n            throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    const valueString = String(value).toLowerCase();\n    if (TRUTHS.has(valueString))\n        return true;\n    if (FALSEHOODS.has(valueString))\n        return false;\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getInt(name, value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    if (!Number.isNaN(parsedValue))\n        return parsedValue;\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUint(name, value) {\n    const parsedValue = getInt(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction toRecord(value) {\n    const record = Object.create(null);\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(':');\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        try {\n            // try to get a boolean\n            record[key] = getBoolean('', value);\n        }\n        catch {\n            try {\n                // try to get a number\n                record[key] = getInt('', value);\n            }\n            catch {\n                // keep value as a string\n                record[key] = value;\n            }\n        }\n    }\n    return record;\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (!url.searchParams.has('tls') && !url.searchParams.has('ssl')) {\n            options.tls = true;\n        }\n    }\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = [...url.searchParams.getAll(key)];\n        if (values.includes('')) {\n            throw new error_1.MongoAPIError('URI cannot contain options with no value');\n        }\n        if (key.toLowerCase() === 'serverapi') {\n            throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n        }\n        if (key.toLowerCase() === 'authsource' && urlOptions.has('authSource')) {\n            // If authSource is an explicit key in the urlOptions we need to remove the implicit dbName\n            urlOptions.delete('authSource');\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    const allOptions = new CaseInsensitiveMap();\n    const allKeys = new Set([\n        ...urlOptions.keys(),\n        ...objectOptions.keys(),\n        ...exports.DEFAULT_OPTIONS.keys()\n    ]);\n    for (const key of allKeys) {\n        const values = [];\n        if (objectOptions.has(key)) {\n            values.push(objectOptions.get(key));\n        }\n        if (urlOptions.has(key)) {\n            values.push(...urlOptions.get(key));\n        }\n        if (exports.DEFAULT_OPTIONS.has(key)) {\n            values.push(exports.DEFAULT_OPTIONS.get(key));\n        }\n        allOptions.set(key, values);\n    }\n    if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n        allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n    }\n    if (allOptions.has('tls') || allOptions.has('ssl')) {\n        const tlsAndSslOpts = (allOptions.get('tls') || [])\n            .concat(allOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    const unsupportedOptions = utils_1.setDifference(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allOptions.get(key);\n        if (!values || values.length === 0)\n            continue;\n        setOption(mongoOptions, key, descriptor, values);\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS;\n        if ((isGssapi || isX509) &&\n            allOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        mongoOptions.credentials.validate();\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    checkTLSOptions(mongoOptions);\n    if (options.promiseLibrary)\n        promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n    if (mongoOptions.directConnection && typeof mongoOptions.srvHost === 'string') {\n        throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    const lbError = validateLoadBalancedOptions(hosts, mongoOptions);\n    if (lbError) {\n        throw lbError;\n    }\n    // Potential SRV Overrides\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\nfunction validateLoadBalancedOptions(hosts, mongoOptions) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n    }\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform, deprecated } = descriptor;\n    const name = target !== null && target !== void 0 ? target : key;\n    if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        utils_1.emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n    }\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getInt(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUint(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!utils_1.isRecord(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        target: 'metadata',\n        transform({ options, values: [value] }) {\n            return utils_1.makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n        }\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!utils_1.isRecord(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            var _a, _b;\n            const mechanisms = Object.values(defaultAuthProviders_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n            if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN ||\n                mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI ||\n                mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS ||\n                mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n            if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            if (typeof value === 'string') {\n                value = toRecord(value);\n            }\n            if (!utils_1.isRecord(value)) {\n                throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { mechanismProperties: value });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        target: 'metadata',\n        default: utils_1.makeClientMetadata(),\n        transform({ options, values: [value] }) {\n            var _a, _b;\n            if (!utils_1.isRecord(value))\n                throw new error_1.MongoParseError('DriverInfo must be an object');\n            return utils_1.makeClientMetadata({\n                driverInfo: value,\n                appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n            });\n        }\n    },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getInt(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    keepAlive: {\n        default: true,\n        type: 'boolean'\n    },\n    keepAliveInitialDelay: {\n        default: 120000,\n        type: 'uint'\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    logger: {\n        default: new logger_1.Logger('MongoClient'),\n        transform({ values: [value] }) {\n            if (value instanceof logger_1.Logger) {\n                return value;\n            }\n            utils_1.emitWarning('Alternative loggers might not be supported');\n            // TODO: make Logger an interface that others can implement, make usage consistent in driver\n            // DRIVERS-1204\n        }\n    },\n    loggerLevel: {\n        target: 'logger',\n        transform({ values: [value] }) {\n            return new logger_1.Logger('MongoClient', { loggerLevel: value });\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUint(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if (utils_1.isRecord(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promiseLibrary: {\n        deprecated: true,\n        type: 'any'\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || utils_1.isRecord(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            var _a, _b, _c;\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if (utils_1.isRecord(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n                    maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n            }\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const readPreferenceTags = [];\n            for (const tag of values) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of Object.entries(toRecord(tag))) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if (utils_1.isRecord(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    sslCA: {\n        target: 'ca',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslCRL: {\n        target: 'crl',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslCert: {\n        target: 'cert',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslKey: {\n        target: 'key',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslPass: {\n        deprecated: true,\n        target: 'passphrase',\n        type: 'string'\n    },\n    sslValidate: {\n        target: 'rejectUnauthorized',\n        type: 'boolean'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        target: 'ca',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateFile: {\n        target: 'cert',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateKeyFile: {\n        target: 'key',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if (utils_1.isRecord(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUint('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUint('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted NodeJS Options\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n    useNewUrlParser: { type: 'boolean' },\n    useUnifiedTopology: { type: 'boolean' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n//# sourceMappingURL=connection_string.js.map"]},"metadata":{},"sourceType":"script"}