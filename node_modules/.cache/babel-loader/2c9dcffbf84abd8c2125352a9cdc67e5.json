{"ast":null,"code":"\"use strict\"; // Resolves the default auth mechanism according to\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = void 0;\n\nconst error_1 = require(\"../../error\");\n\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\"); // https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\n\n\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.includes(defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256 : defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    } // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n\n\n    if (ismaster.maxWireVersion >= 3) {\n      return defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  } // Default for wireprotocol < 3\n\n\n  return defaultAuthProviders_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\n\n\nclass MongoCredentials {\n  constructor(options) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n\n    this.mechanism = options.mechanism || defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties = { ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n\n\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param ismaster - An ismaster response from the server\n   */\n\n\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate() {\n    if ((this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_CR || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n      }\n    }\n\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      } // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n\n\n      throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n  }\n\n  static merge(creds, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    return new MongoCredentials({\n      username: (_b = (_a = options.username) !== null && _a !== void 0 ? _a : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _b !== void 0 ? _b : '',\n      password: (_d = (_c = options.password) !== null && _c !== void 0 ? _c : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _d !== void 0 ? _d : '',\n      mechanism: (_f = (_e = options.mechanism) !== null && _e !== void 0 ? _e : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _f !== void 0 ? _f : defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: (_h = (_g = options.mechanismProperties) !== null && _g !== void 0 ? _g : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _h !== void 0 ? _h : {},\n      source: (_l = (_k = (_j = options.source) !== null && _j !== void 0 ? _j : options.db) !== null && _k !== void 0 ? _k : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _l !== void 0 ? _l : 'admin'\n    });\n  }\n\n}\n\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"sources":["../../../src/cmap/auth/mongo_credentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Resolves the default auth mechanism according to\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCredentials = void 0;\nconst error_1 = require(\"../../error\");\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(ismaster) {\n    if (ismaster) {\n        // If ismaster contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(ismaster.saslSupportedMechs)) {\n            return ismaster.saslSupportedMechs.includes(defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (ismaster.maxWireVersion >= 3) {\n            return defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return defaultAuthProviders_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username;\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param ismaster - An ismaster response from the server\n     */\n    resolveAuthMechanism(ismaster) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(ismaster),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_CR ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n    }\n    static merge(creds, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        return new MongoCredentials({\n            username: (_b = (_a = options.username) !== null && _a !== void 0 ? _a : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _b !== void 0 ? _b : '',\n            password: (_d = (_c = options.password) !== null && _c !== void 0 ? _c : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _d !== void 0 ? _d : '',\n            mechanism: (_f = (_e = options.mechanism) !== null && _e !== void 0 ? _e : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _f !== void 0 ? _f : defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: (_h = (_g = options.mechanismProperties) !== null && _g !== void 0 ? _g : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _h !== void 0 ? _h : {},\n            source: (_l = (_k = (_j = options.source) !== null && _j !== void 0 ? _j : options.db) !== null && _k !== void 0 ? _k : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _l !== void 0 ? _l : 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map"]},"metadata":{},"sourceType":"script"}