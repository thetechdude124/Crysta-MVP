{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst bson_1 = require(\"../bson\");\n\nexports.Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n  CURSOR_CREATING: Symbol('CURSOR_CREATING')\n};\n/** @internal */\n\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\n\nclass AbstractOperation {\n  constructor(options = {}) {\n    var _a;\n\n    this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION) ? read_preference_1.ReadPreference.primary : (_a = read_preference_1.ReadPreference.fromOptions(options)) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary; // Pull the BSON serialize options from the already-resolved options\n\n    this.bsonOptions = bson_1.resolveBSONOptions(options);\n\n    if (options.session) {\n      this[kSession] = options.session;\n    }\n\n    this.options = options;\n    this.bypassPinningCheck = !!options.bypassPinningCheck;\n  }\n\n  hasAspect(aspect) {\n    const ctor = this.constructor;\n\n    if (ctor.aspects == null) {\n      return false;\n    }\n\n    return ctor.aspects.has(aspect);\n  }\n\n  get session() {\n    return this[kSession];\n  }\n\n  get canRetryRead() {\n    return true;\n  }\n\n  get canRetryWrite() {\n    return true;\n  }\n\n}\n\nexports.AbstractOperation = AbstractOperation;\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nexports.defineAspects = defineAspects;","map":{"version":3,"sources":["../../src/operations/operation.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAIa,OAAA,CAAA,MAAA,GAAS;AACpB,EAAA,cAAc,EAAE,MAAM,CAAC,gBAAD,CADF;AAEpB,EAAA,eAAe,EAAE,MAAM,CAAC,iBAAD,CAFH;AAGpB,EAAA,SAAS,EAAE,MAAM,CAAC,WAAD,CAHG;AAIpB,EAAA,WAAW,EAAE,MAAM,CAAC,aAAD,CAJC;AAKpB,EAAA,cAAc,EAAE,MAAM,CAAC,gBAAD,CALF;AAMpB,EAAA,eAAe,EAAE,MAAM,CAAC,iBAAD;AANH,CAAT;AA6Bb;;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAD,CAAvB;AAEA;;;;;;AAMG;;AACH,MAAsB,iBAAtB,CAAuC;AAerC,EAAA,WAAA,CAAY,OAAA,GAA4B,EAAxC,EAA0C;;;AACxC,SAAK,cAAL,GAAsB,KAAK,SAAL,CAAe,OAAA,CAAA,MAAA,CAAO,eAAtB,IAClB,iBAAA,CAAA,cAAA,CAAe,OADG,GAElB,CAAA,EAAA,GAAA,iBAAA,CAAA,cAAA,CAAe,WAAf,CAA2B,OAA3B,CAAA,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,EAAnC,GAAuC,iBAAA,CAAA,cAAA,CAAe,OAF1D,CADwC,CAKxC;;AACA,SAAK,WAAL,GAAmB,MAAA,CAAA,kBAAA,CAAmB,OAAnB,CAAnB;;AAEA,QAAI,OAAO,CAAC,OAAZ,EAAqB;AACnB,WAAK,QAAL,IAAiB,OAAO,CAAC,OAAzB;AACD;;AAED,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,kBAAL,GAA0B,CAAC,CAAC,OAAO,CAAC,kBAApC;AACD;;AAID,EAAA,SAAS,CAAC,MAAD,EAAe;AACtB,UAAM,IAAI,GAAG,KAAK,WAAlB;;AACA,QAAI,IAAI,CAAC,OAAL,IAAgB,IAApB,EAA0B;AACxB,aAAO,KAAP;AACD;;AAED,WAAO,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,MAAjB,CAAP;AACD;;AAEU,MAAP,OAAO,GAAA;AACT,WAAO,KAAK,QAAL,CAAP;AACD;;AAEe,MAAZ,YAAY,GAAA;AACd,WAAO,IAAP;AACD;;AAEgB,MAAb,aAAa,GAAA;AACf,WAAO,IAAP;AACD;;AApDoC;;AAAvC,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAuDA,SAAgB,aAAhB,CACE,SADF,EAEE,OAFF,EAE0C;AAExC,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,OAAd,CAAD,IAA2B,EAAE,OAAO,YAAY,GAArB,CAA/B,EAA0D;AACxD,IAAA,OAAO,GAAG,CAAC,OAAD,CAAV;AACD;;AAED,EAAA,OAAO,GAAG,IAAI,GAAJ,CAAQ,OAAR,CAAV;AACA,EAAA,MAAM,CAAC,cAAP,CAAsB,SAAtB,EAAiC,SAAjC,EAA4C;AAC1C,IAAA,KAAK,EAAE,OADmC;AAE1C,IAAA,QAAQ,EAAE;AAFgC,GAA5C;AAKA,SAAO,OAAP;AACD;;AAfD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst read_preference_1 = require(\"../read_preference\");\nconst bson_1 = require(\"../bson\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        var _a;\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : (_a = read_preference_1.ReadPreference.fromOptions(options)) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = bson_1.resolveBSONOptions(options);\n        if (options.session) {\n            this[kSession] = options.session;\n        }\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    get canRetryRead() {\n        return true;\n    }\n    get canRetryWrite() {\n        return true;\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\nexports.defineAspects = defineAspects;\n//# sourceMappingURL=operation.js.map"]},"metadata":{},"sourceType":"script"}