{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCR = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst error_1 = require(\"../../error\");\n\nclass MongoCR extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command(utils_1.ns(`${source}.$cmd`), {\n      getnonce: 1\n    }, undefined, (err, r) => {\n      let nonce = null;\n      let key = null; // Get nonce\n\n      if (err == null) {\n        nonce = r.nonce; // Use node md5 generator\n\n        let md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n        md5.update(`${username}:mongo:${password}`, 'utf8');\n        const hash_password = md5.digest('hex'); // Final key\n\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      connection.command(utils_1.ns(`${source}.$cmd`), authenticateCommand, undefined, callback);\n    });\n  }\n\n}\n\nexports.MongoCR = MongoCR;","map":{"version":3,"sources":["../../../src/cmap/auth/mongocr.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAa,OAAb,SAA6B,eAAA,CAAA,YAA7B,CAAyC;AACvC,EAAA,IAAI,CAAC,WAAD,EAA2B,QAA3B,EAA6C;AAC/C,UAAM;AAAE,MAAA,UAAF;AAAc,MAAA;AAAd,QAA8B,WAApC;;AACA,QAAI,CAAC,WAAL,EAAkB;AAChB,aAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,4BAAJ,CAAiC,uCAAjC,CAAD,CAAf;AACD;;AACD,UAAM,QAAQ,GAAG,WAAW,CAAC,QAA7B;AACA,UAAM,QAAQ,GAAG,WAAW,CAAC,QAA7B;AACA,UAAM,MAAM,GAAG,WAAW,CAAC,MAA3B;AACA,IAAA,UAAU,CAAC,OAAX,CAAmB,OAAA,CAAA,EAAA,CAAG,GAAG,MAAM,OAAZ,CAAnB,EAAyC;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAAzC,EAA0D,SAA1D,EAAqE,CAAC,GAAD,EAAM,CAAN,KAAW;AAC9E,UAAI,KAAK,GAAG,IAAZ;AACA,UAAI,GAAG,GAAG,IAAV,CAF8E,CAI9E;;AACA,UAAI,GAAG,IAAI,IAAX,EAAiB;AACf,QAAA,KAAK,GAAG,CAAC,CAAC,KAAV,CADe,CAGf;;AACA,YAAI,GAAG,GAAG,MAAM,CAAC,UAAP,CAAkB,KAAlB,CAAV,CAJe,CAMf;;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,QAAQ,UAAU,QAAQ,EAAxC,EAA4C,MAA5C;AACA,cAAM,aAAa,GAAG,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAtB,CARe,CAUf;;AACA,QAAA,GAAG,GAAG,MAAM,CAAC,UAAP,CAAkB,KAAlB,CAAN;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,KAAK,GAAG,QAAR,GAAmB,aAA9B,EAA6C,MAA7C;AACA,QAAA,GAAG,GAAG,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAN;AACD;;AAED,YAAM,mBAAmB,GAAG;AAC1B,QAAA,YAAY,EAAE,CADY;AAE1B,QAAA,IAAI,EAAE,QAFoB;AAG1B,QAAA,KAH0B;AAI1B,QAAA;AAJ0B,OAA5B;AAOA,MAAA,UAAU,CAAC,OAAX,CAAmB,OAAA,CAAA,EAAA,CAAG,GAAG,MAAM,OAAZ,CAAnB,EAAyC,mBAAzC,EAA8D,SAA9D,EAAyE,QAAzE;AACD,KA7BD;AA8BD;;AAvCsC;;AAAzC,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCR = void 0;\nconst crypto = require(\"crypto\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst utils_1 = require(\"../../utils\");\nconst error_1 = require(\"../../error\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    auth(authContext, callback) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n        }\n        const username = credentials.username;\n        const password = credentials.password;\n        const source = credentials.source;\n        connection.command(utils_1.ns(`${source}.$cmd`), { getnonce: 1 }, undefined, (err, r) => {\n            let nonce = null;\n            let key = null;\n            // Get nonce\n            if (err == null) {\n                nonce = r.nonce;\n                // Use node md5 generator\n                let md5 = crypto.createHash('md5');\n                // Generate keys used for authentication\n                md5.update(`${username}:mongo:${password}`, 'utf8');\n                const hash_password = md5.digest('hex');\n                // Final key\n                md5 = crypto.createHash('md5');\n                md5.update(nonce + username + hash_password, 'utf8');\n                key = md5.digest('hex');\n            }\n            const authenticateCommand = {\n                authenticate: 1,\n                user: username,\n                nonce,\n                key\n            };\n            connection.command(utils_1.ns(`${source}.$cmd`), authenticateCommand, undefined, callback);\n        });\n    }\n}\nexports.MongoCR = MongoCR;\n//# sourceMappingURL=mongocr.js.map"]},"metadata":{},"sourceType":"script"}