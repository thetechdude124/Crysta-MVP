{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenameOperation = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst run_command_1 = require(\"./run_command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst collection_1 = require(\"../collection\");\n\nconst error_1 = require(\"../error\");\n/** @internal */\n\n\nclass RenameOperation extends run_command_1.RunAdminCommandOperation {\n  constructor(collection, newName, options) {\n    // Check the collection name\n    utils_1.checkCollectionName(newName); // Build the command\n\n    const renameCollection = collection.namespace;\n    const toCollection = collection.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = {\n      renameCollection: renameCollection,\n      to: toCollection,\n      dropTarget: dropTarget\n    };\n    super(collection, cmd, options);\n    this.options = options;\n    this.collection = collection;\n    this.newName = newName;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    super.execute(server, session, (err, doc) => {\n      if (err) return callback(err); // We have an error\n\n      if (doc.errmsg) {\n        return callback(new error_1.MongoServerError(doc));\n      }\n\n      let newColl;\n\n      try {\n        newColl = new collection_1.Collection(coll.s.db, this.newName, coll.s.options);\n      } catch (err) {\n        return callback(err);\n      }\n\n      return callback(undefined, newColl);\n    });\n  }\n\n}\n\nexports.RenameOperation = RenameOperation;\noperation_1.defineAspects(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"sources":["../../src/operations/rename.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAYA;;;AACA,MAAa,eAAb,SAAqC,aAAA,CAAA,wBAArC,CAA6D;AAK3D,EAAA,WAAA,CAAY,UAAZ,EAAoC,OAApC,EAAqD,OAArD,EAA2E;AACzE;AACA,IAAA,OAAA,CAAA,mBAAA,CAAoB,OAApB,EAFyE,CAIzE;;AACA,UAAM,gBAAgB,GAAG,UAAU,CAAC,SAApC;AACA,UAAM,YAAY,GAAG,UAAU,CAAC,CAAX,CAAa,SAAb,CAAuB,cAAvB,CAAsC,OAAtC,EAA+C,QAA/C,EAArB;AACA,UAAM,UAAU,GAAG,OAAO,OAAO,CAAC,UAAf,KAA8B,SAA9B,GAA0C,OAAO,CAAC,UAAlD,GAA+D,KAAlF;AACA,UAAM,GAAG,GAAG;AAAE,MAAA,gBAAgB,EAAE,gBAApB;AAAsC,MAAA,EAAE,EAAE,YAA1C;AAAwD,MAAA,UAAU,EAAE;AAApE,KAAZ;AAEA,UAAM,UAAN,EAAkB,GAAlB,EAAuB,OAAvB;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAuE;AAC5E,UAAM,IAAI,GAAG,KAAK,UAAlB;AAEA,UAAM,OAAN,CAAc,MAAd,EAAsB,OAAtB,EAA+B,CAAC,GAAD,EAAM,GAAN,KAAa;AAC1C,UAAI,GAAJ,EAAS,OAAO,QAAQ,CAAC,GAAD,CAAf,CADiC,CAE1C;;AACA,UAAI,GAAG,CAAC,MAAR,EAAgB;AACd,eAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,gBAAJ,CAAqB,GAArB,CAAD,CAAf;AACD;;AAED,UAAI,OAAJ;;AACA,UAAI;AACF,QAAA,OAAO,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,IAAI,CAAC,CAAL,CAAO,EAAtB,EAA0B,KAAK,OAA/B,EAAwC,IAAI,CAAC,CAAL,CAAO,OAA/C,CAAV;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,eAAO,QAAQ,CAAC,GAAD,CAAf;AACD;;AAED,aAAO,QAAQ,CAAC,SAAD,EAAY,OAAZ,CAAf;AACD,KAfD;AAgBD;;AAxC0D;;AAA7D,OAAA,CAAA,eAAA,GAAA,eAAA;AA2CA,WAAA,CAAA,aAAA,CAAc,eAAd,EAA+B,CAAC,WAAA,CAAA,MAAA,CAAO,eAAR,CAA/B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RenameOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst run_command_1 = require(\"./run_command\");\nconst operation_1 = require(\"./operation\");\nconst collection_1 = require(\"../collection\");\nconst error_1 = require(\"../error\");\n/** @internal */\nclass RenameOperation extends run_command_1.RunAdminCommandOperation {\n    constructor(collection, newName, options) {\n        // Check the collection name\n        utils_1.checkCollectionName(newName);\n        // Build the command\n        const renameCollection = collection.namespace;\n        const toCollection = collection.s.namespace.withCollection(newName).toString();\n        const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n        const cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };\n        super(collection, cmd, options);\n        this.options = options;\n        this.collection = collection;\n        this.newName = newName;\n    }\n    execute(server, session, callback) {\n        const coll = this.collection;\n        super.execute(server, session, (err, doc) => {\n            if (err)\n                return callback(err);\n            // We have an error\n            if (doc.errmsg) {\n                return callback(new error_1.MongoServerError(doc));\n            }\n            let newColl;\n            try {\n                newColl = new collection_1.Collection(coll.s.db, this.newName, coll.s.options);\n            }\n            catch (err) {\n                return callback(err);\n            }\n            return callback(undefined, newColl);\n        });\n    }\n}\nexports.RenameOperation = RenameOperation;\noperation_1.defineAspects(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=rename.js.map"]},"metadata":{},"sourceType":"script"}