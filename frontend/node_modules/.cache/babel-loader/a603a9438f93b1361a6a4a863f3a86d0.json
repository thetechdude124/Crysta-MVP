{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mindf\\\\Documents\\\\Professional\\\\WORK\\\\CRYSTA\\\\MVP\\\\CODE\\\\React-App\\\\crysta_mvp\\\\frontend\\\\src\\\\pages\\\\EnergyGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { useAuth0 } from \"@auth0/auth0-react\"; // const uri = \"mongodb+srv://crysta:3.14159265e@crysta-database.qrvsc.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n// const client = new MongoClient(uri);\n// client.connect();\n// console.log(\"Connected\");\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeclareAuth0() {\n  _s();\n\n  const {\n    user\n  } = useAuth0();\n  return user;\n}\n\n_s(DeclareAuth0, \"0/moGN6fHOQfmda34xtpR7VuMpE=\", false, function () {\n  return [useAuth0];\n});\n\n_c = DeclareAuth0;\n\nclass EnergyGraph extends Component {\n  constructor() {\n    super();\n\n    this.getDataFromDb = () => {\n      // fetch('http://localhost:3001/api/getData').then(data => {\n      //     const token = data.data;\n      //     console.log(token);\n      //     let task_switches = [];\n      //     let labels = [];\n      //     token.forEach(entry => {\n      //         labels.push(entry.hour);\n      //         task_switches.push(entry.task_switches);\n      //     });\n      //     console.log(task_switches);\n      //     console.log(labels);\n      // });  \n      axios.get('http://localhost:3001/api/getData').then(response => {\n        const data = response.data;\n        this.setState({\n          mongo_data: data\n        });\n        console.log(\"Received task_switches!\");\n      });\n    };\n\n    this.state = {\n      mongo_data: [],\n      task_switches: [],\n      labels: [],\n      graphData: {}\n    };\n  }\n\n  componentWillMount() {\n    this.getGraphData(); // this.getDataFromDb();\n    // if (!this.state.IntervalIsSet) {\n    //     let interval = setInterval(this.getDataFromDb, 1000);\n    //     this.setState({ IntervalIsSet : interval});\n    // }\n  }\n\n  componentWillUnmount() {\n    if (this.state.IntervalIsSet) {\n      clearInterval(this.state.IntervalIsSet);\n      this.setState({\n        IntervalIsSet: null\n      });\n    }\n  }\n\n  getGraphData() {\n    // axios.get('http://localhost:3001/api/getData').then(res => {\n    //     const token = res.data;\n    //     console.log(token);\n    //     let task_switches = [];\n    //     let labels = [];\n    //     token.forEach(entry => {\n    //         labels.push(entry.hour);\n    //         task_switches.push(entry.task_switches);\n    //     });\n    //     console.log(task_switches);\n    //     console.log(labels);\n    // this.getDataFromDb()\n    this.setState({\n      graphData: {\n        labels: ['8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM', '7 PM', '8 PM', '9 PM', '10 PM', '11 PM', '12 AM'],\n        // labels: labels,\n        datasets: [{\n          label: 'Task Switches',\n          data: [11, 16, 18, 16, 14, 9, 2, 3, 4, 12, 18, 22, 24, 26, 23, 22, 18],\n          // data: task_switches,\n          borderWidth: 8,\n          borderColor: \"rgba(20, 177, 183, 0.4)\",\n          pointBackgroundColor: \"rgb(77, 77, 77, 1)\",\n          tension: 0.4,\n          pointRadius: 8\n        }]\n      }\n    }); // });  \n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"energy-graph\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: this.state.energygraphData,\n        width: 1580,\n        height: 750,\n        options: {\n          maintainAspectRatio: true,\n          responsive: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default EnergyGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeclareAuth0\");","map":{"version":3,"sources":["C:/Users/mindf/Documents/Professional/WORK/CRYSTA/MVP/CODE/React-App/crysta_mvp/frontend/src/pages/EnergyGraph.js"],"names":["React","Component","useState","useEffect","Line","axios","useAuth0","DeclareAuth0","user","EnergyGraph","constructor","getDataFromDb","get","then","response","data","setState","mongo_data","console","log","state","task_switches","labels","graphData","componentWillMount","getGraphData","componentWillUnmount","IntervalIsSet","clearInterval","datasets","label","borderWidth","borderColor","pointBackgroundColor","tension","pointRadius","render","energygraphData","maintainAspectRatio","responsive"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\n// const uri = \"mongodb+srv://crysta:3.14159265e@crysta-database.qrvsc.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\r\n// const client = new MongoClient(uri);\r\n// client.connect();\r\n// console.log(\"Connected\");\r\n\r\nfunction DeclareAuth0() {\r\n    const { user } = useAuth0();\r\n    return user\r\n}\r\nclass EnergyGraph extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            mongo_data: [],\r\n            task_switches: [],\r\n            labels: [],\r\n            graphData:{}\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.getGraphData();\r\n        // this.getDataFromDb();\r\n        // if (!this.state.IntervalIsSet) {\r\n        //     let interval = setInterval(this.getDataFromDb, 1000);\r\n        //     this.setState({ IntervalIsSet : interval});\r\n        // }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.IntervalIsSet) {\r\n            clearInterval(this.state.IntervalIsSet);\r\n            this.setState({ IntervalIsSet : null });\r\n        }\r\n    }\r\n\r\n    getDataFromDb = () => {\r\n        // fetch('http://localhost:3001/api/getData').then(data => {\r\n        //     const token = data.data;\r\n        //     console.log(token);\r\n        //     let task_switches = [];\r\n        //     let labels = [];\r\n        //     token.forEach(entry => {\r\n        //         labels.push(entry.hour);\r\n        //         task_switches.push(entry.task_switches);\r\n        //     });\r\n        //     console.log(task_switches);\r\n        //     console.log(labels);\r\n        // });  \r\n\r\n        axios.get('http://localhost:3001/api/getData').then((response) =>{\r\n            const data = response.data;\r\n            this.setState({ mongo_data: data});\r\n            console.log(\"Received task_switches!\")\r\n\r\n        });\r\n    }\r\n\r\n\r\n    getGraphData() {\r\n        // axios.get('http://localhost:3001/api/getData').then(res => {\r\n        //     const token = res.data;\r\n        //     console.log(token);\r\n        //     let task_switches = [];\r\n        //     let labels = [];\r\n        //     token.forEach(entry => {\r\n        //         labels.push(entry.hour);\r\n        //         task_switches.push(entry.task_switches);\r\n        //     });\r\n        //     console.log(task_switches);\r\n        //     console.log(labels);\r\n        \r\n            // this.getDataFromDb()\r\n            this.setState({\r\n                graphData: {\r\n\r\n                    labels: ['8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM', \r\n                    '7 PM', '8 PM', '9 PM', '10 PM', '11 PM', '12 AM'],\r\n                    // labels: labels,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Task Switches',\r\n                            data: [\r\n                                11,\r\n                                16,\r\n                                18,\r\n                                16,\r\n                                14,\r\n                                9,\r\n                                2,\r\n                                3,\r\n                                4,\r\n                                12,\r\n                                18,\r\n                                22,\r\n                                24,\r\n                                26,\r\n                                23,\r\n                                22,  \r\n                                18\r\n                            ],\r\n                            // data: task_switches,\r\n                            borderWidth: 8,\r\n                            borderColor: \"rgba(20, 177, 183, 0.4)\",\r\n                            pointBackgroundColor: \"rgb(77, 77, 77, 1)\",\r\n                            tension: 0.4,\r\n                            pointRadius: 8\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n        // });  \r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className = \"energy-graph\">\r\n                <Line\r\n                    data = {this.state.energygraphData}\r\n                    width = {1580}\r\n                    height = {750}\r\n                    options = {{\r\n                        maintainAspectRatio: true,\r\n                        responsive: true,\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EnergyGraph;"]},"metadata":{},"sourceType":"module"}