{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mindf\\\\Documents\\\\Professional\\\\WORK\\\\CRYSTA\\\\MVP\\\\CODE\\\\React-App\\\\crysta_mvp\\\\frontend\\\\src\\\\pages\\\\EnergyGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { useAuth0 } from \"@auth0/auth0-react\"; // const uri = \"mongodb+srv://crysta:3.14159265e@crysta-database.qrvsc.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n// const client = new MongoClient(uri);\n// client.connect();\n// console.log(\"Connected\");\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeclareAuth0() {\n  _s();\n\n  const {\n    user\n  } = useAuth0();\n  return user;\n}\n\n_s(DeclareAuth0, \"0/moGN6fHOQfmda34xtpR7VuMpE=\", false, function () {\n  return [useAuth0];\n});\n\n_c = DeclareAuth0;\n\nclass EnergyGraph extends Component {\n  constructor() {\n    super();\n\n    this.getDataFromDb = () => {//     // fetch('http://localhost:3001/api/getData').then(data => {\n      //     //     const token = data.data;\n      //     //     console.log(token);\n      //     //     let task_switches = [];\n      //     //     let labels = [];\n      //     //     token.forEach(entry => {\n      //     //         labels.push(entry.hour);\n      //     //         task_switches.push(entry.task_switches);\n      //     //     });\n      //     //     console.log(task_switches);\n      //     //     console.log(labels);\n      //     // });  \n      //     axios.get('http://localhost:3001/api/getData').then((response) =>{\n      //         var data = response.data;\n      //         const data_values = Object.values(data);\n      //         const data_array = data_values[1];\n      //         var task_switches = [];\n      //         var labels = [];\n      //         this.setState({ mongo_data: data_array});\n      //         data_array.forEach(data_array => {\n      //             labels.push(data_array.hour);\n      //             task_switches.push(data_array.task_switches);\n      //         })\n      //         console.log(task_switches);\n      //         console.log(labels);\n      //         console.log(\"Received task_switches!\");\n      //         console.log(data_array);\n      //     })\n      //     // .catch(() => {\n      //     //     alert('There seems to be an error.');\n      //     // });\n    };\n\n    this.state = {\n      mongo_data: [],\n      task_switches: [],\n      labels: [],\n      graphData: {}\n    };\n  }\n\n  componentWillMount() {\n    this.getGraphData();\n    this.getDataFromDb();\n\n    if (!this.state.IntervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 10000);\n      this.setState({\n        IntervalIsSet: interval\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.IntervalIsSet) {\n      clearInterval(this.state.IntervalIsSet);\n      this.setState({\n        IntervalIsSet: null\n      });\n    }\n  }\n\n  getGraphData() {\n    axios.get('http://localhost:3001/api/getData').then(response => {\n      var data = response.data;\n      const data_values = Object.values(data);\n      const data_array = data_values[1];\n      var task_switches = [];\n      var labels = [];\n      this.setState({\n        mongo_data: data_array\n      });\n      data_array.forEach(data_array => {\n        labels.push(data_array.hour);\n        task_switches.push(data_array.task_switches);\n      });\n      console.log(task_switches);\n      console.log(labels);\n      console.log(\"Received task_switches!\");\n      console.log(data_array);\n      this.setState({\n        graphData: {\n          // labels: ['8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM', \n          // '7 PM', '8 PM', '9 PM', '10 PM', '11 PM', '12 AM'],\n          labels: labels,\n          datasets: [{\n            label: 'Task Switches',\n            // data: [\n            //     11,\n            //     16,\n            //     18,\n            //     16,\n            //     14,\n            //     9,\n            //     2,\n            //     3,\n            //     4,\n            //     12,\n            //     18,\n            //     22,\n            //     24,\n            //     26,\n            //     23,\n            //     22,  \n            //     18\n            // ],\n            data: task_switches,\n            borderWidth: 8,\n            borderColor: \"rgba(20, 177, 183, 0.4)\",\n            pointBackgroundColor: \"rgb(77, 77, 77, 1)\",\n            tension: 0.4,\n            pointRadius: 8\n          }]\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"energy-graph\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: this.state.energygraphData,\n        width: 1580,\n        height: 750,\n        options: {\n          maintainAspectRatio: true,\n          responsive: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default EnergyGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeclareAuth0\");","map":{"version":3,"sources":["C:/Users/mindf/Documents/Professional/WORK/CRYSTA/MVP/CODE/React-App/crysta_mvp/frontend/src/pages/EnergyGraph.js"],"names":["React","Component","useState","useEffect","Line","axios","useAuth0","DeclareAuth0","user","EnergyGraph","constructor","getDataFromDb","state","mongo_data","task_switches","labels","graphData","componentWillMount","getGraphData","IntervalIsSet","interval","setInterval","setState","componentWillUnmount","clearInterval","get","then","response","data","data_values","Object","values","data_array","forEach","push","hour","console","log","datasets","label","borderWidth","borderColor","pointBackgroundColor","tension","pointRadius","render","energygraphData","maintainAspectRatio","responsive"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\n// const uri = \"mongodb+srv://crysta:3.14159265e@crysta-database.qrvsc.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\r\n// const client = new MongoClient(uri);\r\n// client.connect();\r\n// console.log(\"Connected\");\r\n\r\nfunction DeclareAuth0() {\r\n    const { user } = useAuth0();\r\n    return user\r\n}\r\nclass EnergyGraph extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            mongo_data: [],\r\n            task_switches: [],\r\n            labels: [],\r\n            graphData:{}\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.getGraphData();\r\n        this.getDataFromDb();\r\n        if (!this.state.IntervalIsSet) {\r\n            let interval = setInterval(this.getDataFromDb, 10000);\r\n            this.setState({ IntervalIsSet : interval});\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.IntervalIsSet) {\r\n            clearInterval(this.state.IntervalIsSet);\r\n            this.setState({ IntervalIsSet : null });\r\n        }\r\n    }\r\n\r\n    getDataFromDb = () => {\r\n    //     // fetch('http://localhost:3001/api/getData').then(data => {\r\n    //     //     const token = data.data;\r\n    //     //     console.log(token);\r\n    //     //     let task_switches = [];\r\n    //     //     let labels = [];\r\n    //     //     token.forEach(entry => {\r\n    //     //         labels.push(entry.hour);\r\n    //     //         task_switches.push(entry.task_switches);\r\n    //     //     });\r\n    //     //     console.log(task_switches);\r\n    //     //     console.log(labels);\r\n    //     // });  \r\n\r\n    //     axios.get('http://localhost:3001/api/getData').then((response) =>{\r\n    //         var data = response.data;\r\n    //         const data_values = Object.values(data);\r\n    //         const data_array = data_values[1];\r\n    //         var task_switches = [];\r\n    //         var labels = [];\r\n    //         this.setState({ mongo_data: data_array});\r\n    //         data_array.forEach(data_array => {\r\n    //             labels.push(data_array.hour);\r\n    //             task_switches.push(data_array.task_switches);\r\n    //         })\r\n    //         console.log(task_switches);\r\n    //         console.log(labels);\r\n    //         console.log(\"Received task_switches!\");\r\n    //         console.log(data_array);\r\n    //     })\r\n    //     // .catch(() => {\r\n    //     //     alert('There seems to be an error.');\r\n    //     // });\r\n    }\r\n\r\n\r\n    getGraphData() {\r\n        axios.get('http://localhost:3001/api/getData').then((response) =>{\r\n            var data = response.data;\r\n            const data_values = Object.values(data);\r\n            const data_array = data_values[1];\r\n            var task_switches = [];\r\n            var labels = [];\r\n            this.setState({ mongo_data: data_array});\r\n            data_array.forEach(data_array => {\r\n                labels.push(data_array.hour);\r\n                task_switches.push(data_array.task_switches);\r\n            })\r\n            console.log(task_switches);\r\n            console.log(labels);\r\n            console.log(\"Received task_switches!\");\r\n            console.log(data_array);\r\n        \r\n            this.setState({\r\n                graphData: {\r\n\r\n                    // labels: ['8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM', \r\n                    // '7 PM', '8 PM', '9 PM', '10 PM', '11 PM', '12 AM'],\r\n                    labels: labels,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Task Switches',\r\n                            // data: [\r\n                            //     11,\r\n                            //     16,\r\n                            //     18,\r\n                            //     16,\r\n                            //     14,\r\n                            //     9,\r\n                            //     2,\r\n                            //     3,\r\n                            //     4,\r\n                            //     12,\r\n                            //     18,\r\n                            //     22,\r\n                            //     24,\r\n                            //     26,\r\n                            //     23,\r\n                            //     22,  \r\n                            //     18\r\n                            // ],\r\n                            data: task_switches,\r\n                            borderWidth: 8,\r\n                            borderColor: \"rgba(20, 177, 183, 0.4)\",\r\n                            pointBackgroundColor: \"rgb(77, 77, 77, 1)\",\r\n                            tension: 0.4,\r\n                            pointRadius: 8\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n        });  \r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className = \"energy-graph\">\r\n                <Line\r\n                    data = {this.state.energygraphData}\r\n                    width = {1580}\r\n                    height = {750}\r\n                    options = {{\r\n                        maintainAspectRatio: true,\r\n                        responsive: true,\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EnergyGraph;"]},"metadata":{},"sourceType":"module"}