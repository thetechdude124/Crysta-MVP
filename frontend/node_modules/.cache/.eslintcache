[{"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\index.js":"1","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\Login.js":"2","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\App.js":"3","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\Logout.js":"4","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\login-button.js":"5","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\Tasks.js":"6","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\SideMenu.js":"7","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\Calendar.js":"8","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\logout-button.js":"9","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\SideMenuData.js":"10","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\EnergyGraph.js":"11","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\Dashboard.js":"12","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\FunctionGraph.js":"13","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\withAuthenticationRequired.js":"14","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\DashboardComponents\\Pomodoro.js":"15","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\DashboardComponents\\TaskWidget.js":"16"},{"size":757,"mtime":1638816633854,"results":"17","hashOfConfig":"18"},{"size":1013,"mtime":1638735855728,"results":"19","hashOfConfig":"18"},{"size":1283,"mtime":1638487621330,"results":"20","hashOfConfig":"18"},{"size":935,"mtime":1634252387141,"results":"21","hashOfConfig":"18"},{"size":474,"mtime":1637797583310,"results":"22","hashOfConfig":"18"},{"size":660,"mtime":1638487621367,"results":"23","hashOfConfig":"18"},{"size":2311,"mtime":1631995443337,"results":"24","hashOfConfig":"18"},{"size":671,"mtime":1638487621343,"results":"25","hashOfConfig":"18"},{"size":518,"mtime":1637797650627,"results":"26","hashOfConfig":"18"},{"size":783,"mtime":1637866603198,"results":"27","hashOfConfig":"18"},{"size":2711,"mtime":1638468047005,"results":"28","hashOfConfig":"18"},{"size":14900,"mtime":1638825062389,"results":"29","hashOfConfig":"18"},{"size":1767,"mtime":1638544896091,"results":"30","hashOfConfig":"18"},{"size":362,"mtime":1638482332097,"results":"31","hashOfConfig":"18"},{"size":13395,"mtime":1638832704665,"results":"32","hashOfConfig":"18"},{"size":708,"mtime":1638487621363,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"16cx6z2",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\index.js",[],["73","74"],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\Login.js",["75"],"import React from \"react\";\r\nimport LoginButton from \"./components/login-button\";\r\nimport CrystaLogo from './components/CrystaLogo.svg';\r\n\r\nconst Login = () => (\r\n  <div className = \"NavContainer\" class = 'flex flex-col justify-center items-center bg-gradient-to-r from-blue-400 via-green-300 to-green-200 h-screen w-screen'>\r\n    <div class = \"flex flex-col justify-center items-center bg-gray-50 h-1/3 w-1/3 rounded-3xl shadow-lg \">\r\n      <div className = \"crysta-logo\">\r\n        <img src = {CrystaLogo} alt = \"CrystaLogo\"/>\r\n      </div>\r\n\r\n      <p class = \"font-normal text-center mb-7 mt-7 mr-5 ml-5 text-xl\">Glad to see you! Make sure you've downloaded the latest version of our <a href=\"https://tinyurl.com/Crysta-MVP\" target = \"_blank\" class=\"font-semibold underline text-blue-400 hover:text-green-400 transition duration-250 ease-linear\">energy tracker</a> first.</p>\r\n\r\n      <div className=\"flex justify-center\">\r\n        <LoginButton/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Login;","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\App.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\Logout.js",["76"],"import React from 'react';\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport CrystaLogo from './components/CrystaLogo.svg';\r\nimport LogoutButton from './components/logout-button';\r\n\r\nconst Logout = () => {\r\n  const { logout } = useAuth0();\r\n  return (\r\n    <div className = \"NavContainer\" class = 'flex flex-col justify-center items-center bg-gradient-to-r from-blue-400 via-green-300 to-green-200 h-screen w-screen'>\r\n    <div class = \"flex flex-col justify-center items-center bg-gray-50  rounded-3xl h-1/3 w-1/3 rounded-3xl shadow-lg\">\r\n      <div className = \"crysta-logo\" class = \"\">\r\n        <img src = {CrystaLogo} alt = \"CrystaLogo\"/>\r\n      </div>\r\n\r\n      <p class = \"font-medium text-center w-64 mb-4 mt-7 text-xl mr-5 ml-5\">We're sad to see you go. 😢 Come back soon!</p>\r\n\r\n      <div className=\"flex justify-center\">\r\n        <LogoutButton/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Logout;","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\login-button.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\Tasks.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\SideMenu.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\Calendar.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\logout-button.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\SideMenuData.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\EnergyGraph.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\Dashboard.js",["77"],"import React, { useState, useEffect } from 'react';\r\nimport './Dashboard.css';\r\nimport { IconContext } from 'react-icons';\r\nimport { BsFillArrowUpCircleFill, BsFillArrowDownCircleFill } from \"react-icons/bs\";\r\nimport { FaEquals } from \"react-icons/fa\";\r\nimport FunctionGraph from './FunctionGraph.js';\r\nimport Pomodoro from './DashboardComponents/Pomodoro';\r\nimport TaskWidget from './DashboardComponents/TaskWidget';\r\nimport axios from 'axios';\r\nimport { useAuth0, withAuthenticationRequired} from \"@auth0/auth0-react\";\r\n\r\nfunction Dashboard() {\r\n\r\n    //Getting username and authentication status\r\n    const { user, isAuthenticated } = useAuth0();\r\n\r\n    //Defining variables for all metrics - most productive time, most creative time, task switches, etc.\r\n    const [productivetime, setProductivetime] = useState();\r\n    const [creativetime, setCreativetime] = useState(); \r\n    const [taskswitches, setTaskswitches] = useState();\r\n    const [distractingsites, setDistractingsites]  = useState();\r\n    const [timepertask, setTimepertask] = useState();\r\n    const [unscaledscore, setUnscaledscore] = useState();\r\n\r\n    //Defining variables for <div> change icons \r\n    const [taskchange, setTaskchange] = useState();\r\n    const [timechange, setTimechange] = useState();\r\n    const [distractingchange, setDistractingchange] = useState();\r\n    const [unscaledchange, setUnscaledchange] = useState();\r\n    const [graphdiv, setGraphdiv] = useState();\r\n    const [pomodorodiv, setPomodorodiv] = useState();\r\n\r\n    //Defining a function that returns the average of an array (necessary for procressing)\r\n    const average = arr => arr.reduce((a,b) => a + b, 0) / arr.length;\r\n\r\n    //Function to display up or down icon - depending on the input value\r\n    const displayChange = (value_array, metric) => {\r\n\r\n        let div_value;\r\n        if (metric === \"distracting_sites\") {\r\n            if (value_array.at(-1) > value_array.at(-2)) {\r\n                div_value = <div className = \"change-icon\" class = \"text-md ml-1 mb-0.5\">\r\n                                    <IconContext.Provider value={{ color: '#f87171' }}>\r\n                                        <BsFillArrowUpCircleFill/>\r\n                                    </IconContext.Provider>\r\n                              </div>\r\n                return div_value;\r\n            } else if (value_array.at(-1) < value_array.at(-2)) {\r\n                div_value = <div className = \"change-icon\" class = \"text-md ml-1 mb-0.5\">\r\n                                    <IconContext.Provider value={{ color: '#34d399' }}>\r\n                                        <BsFillArrowDownCircleFill/>\r\n                                    </IconContext.Provider>\r\n                              </div>\r\n                return div_value;\r\n            } else {\r\n                div_value = <div className = \"change-icon\" class = \"text-sm ml-1 mb-0.5\">\r\n                                    <IconContext.Provider value={{ color: '#d9d2d2' }}>\r\n                                        <FaEquals/>\r\n                                    </IconContext.Provider>\r\n                              </div>\r\n                return div_value;\r\n            }\r\n        } else {\r\n            if (value_array.at(-1) > value_array.at(-2)) {\r\n                div_value = <div className = \"change-icon\" class = \"text-md ml-1 mb-0.5\">\r\n                                    <IconContext.Provider value={{ color: '#34d399' }}>\r\n                                        <BsFillArrowUpCircleFill class = \"hover:\"/>\r\n                                    </IconContext.Provider>\r\n                              </div>\r\n                return div_value;\r\n            } else if (value_array.at(-1) < value_array.at(-2)) {\r\n                div_value = <div className = \"change-icon\" class = \"text-md ml-1 mb-0.5\">\r\n                                    <IconContext.Provider value={{ color: '#f87171' }}>\r\n                                        <BsFillArrowDownCircleFill class = \"hover:\"/>\r\n                                    </IconContext.Provider>\r\n                              </div>\r\n                return div_value;\r\n            } else {\r\n                div_value = <div className = \"change-icon\" class = \"text-sm ml-1 mb-0.5\">\r\n                                    <IconContext.Provider value={{ color: '#d9d2d2' }}>\r\n                                        <FaEquals class = \"hover:\"/>\r\n                                    </IconContext.Provider>\r\n                              </div>\r\n                return div_value;\r\n            }\r\n        }\r\n    }\r\n  \r\n    //Checks if user is authenticated - if yes, query backend and process data. If no, do nothing.\r\n\r\n    useEffect(() => {\r\n        const checkAuth = async() => {\r\n            if (isAuthenticated) {\r\n                const email = user.email;\r\n                var stringemail = email;\r\n                axios.get('/api/getData?username=' + email).then((response) =>{\r\n                    var data = response.data;\r\n                    const data_values = Object.values(data);\r\n                    const data_array = data_values[1];\r\n                    var task_switches = [];\r\n                    var labels = [];\r\n                    var div_scores = [];\r\n                    var unscaled_scores = [];\r\n                    var average_task_times = [];\r\n                    var n_distracting_tasks = [];\r\n            \r\n                    data_array.forEach(data_array => {\r\n                        labels.push(data_array.hour);\r\n                        task_switches.push(data_array.task_switches);\r\n                        div_scores.push(data_array.divided_energy_score);\r\n                        unscaled_scores.push(data_array.unscaled_energy_score);\r\n                        average_task_times.push(data_array.average_task_time);\r\n                        n_distracting_tasks.push(data_array.distracting_tasks);\r\n                    });\r\n                    setTaskswitches(average(task_switches).toFixed(0));\r\n        \r\n                    //Finding the min and max of the div_scores array, to find the most creative and productive times\r\n                    var min_score = Math.min(...div_scores);\r\n                    var min_idx = div_scores.indexOf(min_score);\r\n            \r\n                    var max_score = Math.max(...div_scores);\r\n                    var max_idx = div_scores.indexOf(max_score);\r\n            \r\n                    setCreativetime(labels[min_idx]);\r\n                    setProductivetime(labels[max_idx]);\r\n                    \r\n                    //Distracting Tasks - average\r\n                    setDistractingsites(average(n_distracting_tasks).toFixed(0))\r\n                    //Average of Average Task Times\r\n                    setTimepertask(average(average_task_times).toFixed(0))\r\n                    //Average of Unscaled Scores\r\n                    setUnscaledscore(average(unscaled_scores).toFixed(0))\r\n        \r\n                    //Configuring display - displaying up or down arrows to reflect change in metrics\r\n        \r\n                    setTaskchange(displayChange(task_switches, 'task_switches'));\r\n                    setTimechange(displayChange(average_task_times, 'avg_time_per_task'));\r\n                    setDistractingchange(displayChange(n_distracting_tasks, 'distracting_sites'));\r\n                    setUnscaledchange(displayChange(unscaled_scores, 'unscaled_energy_score'));\r\n        \r\n                });\r\n                console.log(stringemail);\r\n                setGraphdiv(<FunctionGraph sendemail = {stringemail} />);\r\n                setPomodorodiv(<Pomodoro user_email = {stringemail}/>)\r\n            } else {\r\n                setGraphdiv(<div class = \"flex font-bold text-lg text-center justify-center items-center\">Loading...</div>);\r\n                setPomodorodiv(<div class = \"flex font-bold text-lg text-center justify-center items-center\">Loading...</div>);\r\n            }\r\n        }\r\n        checkAuth();\r\n    }, [])\r\n    \r\n    //Define divs - different elements will be displayed depending on whether the value is undefined\r\n    let prod_div;\r\n    let task_display;\r\n    let distracting_display;\r\n    let time_display;\r\n    let unscaled_display;\r\n\r\n    if (productivetime === undefined) {\r\n        prod_div = <div className = 'most-productive-time' class = 'text-sm w-11/12 mt-4 font-light'>This dashboard will be filled automatically every hour - and will get more accurate as you continue to use the Crysta energy tracker!</div>;\r\n    } else {\r\n        prod_div = <div className = 'most-productive-time' class = 'text-3xl mt-4 font-light'>{productivetime}</div>;\r\n    };\r\n\r\n    if (taskswitches === 'NaN') {\r\n        task_display = <div class = \"text-3xl font-light mb-2\">0</div>;\r\n    } else {\r\n        task_display = <div class = \"text-3xl font-light mb-2\">{taskswitches}</div>;\r\n    }\r\n\r\n    if (distractingsites === 'NaN') {\r\n        distracting_display = <div class = \"text-3xl font-light mb-2\">0</div>;\r\n    } else {\r\n        distracting_display = <div class = \"text-3xl font-light mb-2\">{distractingsites}</div>;\r\n    }\r\n\r\n    if (timepertask === 'NaN') {\r\n        time_display = <div class = \"text-3xl font-light mb-2\">0</div>;\r\n    } else {\r\n        time_display = <div class = \"text-3xl font-light mb-2\">{timepertask}</div>;\r\n    }\r\n\r\n    if (unscaledscore === 'NaN') {\r\n        unscaled_display = <div class = \"text-3xl font-light mb-2\">0</div>;\r\n    } else {\r\n        unscaled_display = <div class = \"text-3xl font-light mb-2\">{unscaledscore}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className = \"container-energy\" class = \"flex flex-col top-0 justify-items-center bg-gradient-to-r from-blue-400 via-green-300 to-green-200 h-screen w-screen\">\r\n            <div className = \"intro-container\" class = \"flex w-11/12 m-auto mr-12\">\r\n                <div className = \"Introduction/Greeting\" class = \"text-3xl mt-2 font-semibold text-white\">Hey there! Let's get things done.</div>    \r\n            </div>\r\n            <div className = \"insights-energy-container\" class = \"flex h-5/6 w-11/12 -mt-2 m-auto\">\r\n                <div className = \"insights-menu\" class = \"flex flex-col text-center bg-gray-50 shadow-md rounded-3xl h-full w-1/5 m-auto items-center\">\r\n                    <div className = \"energy-level-heading\" class = \"flex bg-gradient-to-r from-blue-400 via-blue-400 to-green-300 h-8 w-11/12 rounded-3xl mt-2.5 justify-center\">\r\n                        <p class = \"text-white mt-1 font-semibold text-base\">INSIGHTS</p> \r\n                    </div>\r\n                    <div className = \"energy-level-heading\" class = \"flex bg-gray-200 h-8 w-11/12 rounded-3xl mt-8 justify-center \">\r\n                        <p class = \"text-blue-700 mt-1.5 font-semibold text-sm\">MOST PRODUCTIVE TIME</p> \r\n                    </div>\r\n                    {prod_div}\r\n                    <div className = \"energy-level-heading\" class = \"flex bg-gray-200 h-8 w-11/12 rounded-3xl mt-5 justify-center \">\r\n                        <p class = \"text-red-700 mt-1.5 font-semibold text-sm\">MOST CREATIVE TIME</p> \r\n                    </div>\r\n                    <div className = \"most-creative-time\" class = \"text-3xl mt-4 font-light\">{creativetime}</div>\r\n\r\n                    <div className = \"energy-level-heading\" class = \"flex bg-gray-200 h-8 w-11/12 rounded-3xl mt-5 justify-center \">\r\n                        <p class = \"text-black mt-1.5 font-semibold text-sm\">OTHER INSIGHTS</p> \r\n                    </div>\r\n                    <div className = \"other-metrics\" class = \"grid grid-cols-2 w-11/12 mt-6 gap-y-4 bg-gray-200 rounded-2xl mb-2.5\"> \r\n                        <div className = \"task-switches\" class = \"flex flex-col items-center justify-center ml-2 mt-2 bg-gray-100 rounded-2xl mr-2\">\r\n                            <div class = \"text-xs font-semibold mt-3\">TASK SWITCHES</div>\r\n                            <div className = \"score-and-ranking-container\" class = \"flex justify-between items-center w-12/12\">{task_display}{taskchange}</div>\r\n                        </div>\r\n                        <div className = \"distracting-sites\" class = \"flex flex-col justify-center items-center mr-2 mt-2 bg-gray-100 rounded-2xl ml-2\">\r\n                            <div class = \"text-xs font-semibold mt-3\"># DISTRACTING SITES</div>\r\n                            <div className = \"score-and-ranking-container\" class = \"flex flex-row items-center\">{distracting_display}{distractingchange}</div>\r\n                        </div>\r\n                        <div className = \"time-per-task\" class = \"flex flex-col justify-center items-center ml-2 mb-2 bg-gray-100 rounded-2xl mr-2\">\r\n                            <div class = \"text-xs font-semibold mt-3\">SECONDS SPENT PER TASK</div>\r\n                            <div className = \"score-and-ranking-container\" class = \"flex flex-row items-center\">{time_display}{timechange}</div>\r\n                        </div>\r\n                        <div className = \"unscaled-score\" class = \"flex flex-col justify-center items-center mr-2 mb-2 bg-gray-100 rounded-2xl ml-2\">\r\n                            <div class = \"text-xs font-semibold mt-3\">SCORE WITHOUT DISTRACTIONS</div>\r\n                            <div className = \"score-and-ranking-container\" class = \"flex flex-row items-center\">{unscaled_display}{unscaledchange}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"energy-level-heading\" class = \"flex bg-gray-200 w-11/12 rounded-3xl mt-3 justify-center \">\r\n                        <p class = \"text-black mt-3 mb-3 ml-2 mr-2 text-xs\">These are the insights we found - the more you use Crysta, the more accurate they get!</p> \r\n                    </div>\r\n                </div>\r\n                <div className = \"energy-menu\" class = \"flex bg-gray-50 shadow-md rounded-3xl h-full w-6/12 m-auto\">\r\n                    <div className = \"energy-level-heading\" class = \"flex bg-gradient-to-r from-blue-400 via-blue-400 to-green-300 h-8 w-64 rounded-3xl mt-2.5 ml-7 justify-center fixed\">\r\n                        <p class = \"text-white mt-1 font-semibold text-base\">YOUR ENERGY LEVELS</p> \r\n                    </div>\r\n                    <div className = \"energy-graph-container\" class = \"flex-1 flex-col ml-7 mt-12 mr-8 mb-0 w-5/6 h-5/6\">\r\n                        {graphdiv}\r\n                    </div>\r\n                </div>\r\n                <div className = \"pomodoro-tasks-container\" class = \"flex flex-col h-full w-3/12 m-auto \">\r\n                    {pomodorodiv}\r\n                    <TaskWidget />\r\n                </div>\r\n            </div>\r\n\r\n            <div className = \"version\" class = \"text-right text-sm text-black font-semibold mr-5 mb-5\">MVP - v.0.2 | ©Crysta 2021</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withAuthenticationRequired(Dashboard, {\r\n    onRedirecting: () => <div> Hey there! We're just redirecting you 😁</div>,\r\n})","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\FunctionGraph.js",["78"],"import React, { useEffect, useState } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\nexport default function FunctionGraph(props) {\r\n    //Setting up state variables\r\n    const [chart, setChart] = useState();\r\n\r\n    //Fetching data from the API:\r\n    useEffect(() => {\r\n        const getData = async() => {\r\n            let labels = [];\r\n            let div_scores = [];\r\n            await axios.get('/api/getData?username=' + props.sendemail).then((response) => {\r\n                console.log(props.sendemail);\r\n                var data = response.data;\r\n                const data_values = Object.values(data);\r\n                const data_array = data_values[1];\r\n                data_array.forEach(data_array => {\r\n                    labels.push(data_array.hour);\r\n                    div_scores.push(data_array.divided_energy_score);\r\n                });\r\n            });\r\n            setChart({\r\n                labels: labels,\r\n                datasets: [{\r\n                    label: 'ENERGY SCORE',\r\n                    data: div_scores,\r\n                    borderWidth: 8,\r\n                    borderColor: \"rgba(20, 177, 183, 0.4)\",\r\n                    pointBackgroundColor: \"rgb(77, 77, 77, 1)\",\r\n                    tension: 0.4,\r\n                    pointRadius: 8,\r\n                }]\r\n            });\r\n        }\r\n        getData();\r\n    }, []);\r\n    \r\n    return (\r\n        <div className = \"energy-graph-container\" >\r\n            <Line \r\n                data = {chart} \r\n                width = {770}\r\n                height = {690}\r\n                options = {{\r\n                    maintainAspectRatio: true,\r\n                    responsive: true,\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\components\\withAuthenticationRequired.js",[],"C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\DashboardComponents\\Pomodoro.js",["79","80","81","82","83","84","85"],"import { HackTimer } from 'hacktimer';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { AiOutlinePlusCircle, AiOutlineMinusCircle, AiFillPlusSquare, AiFillMinusSquare } from \"react-icons/ai\";\r\nimport { IconContext } from 'react-icons';\r\nimport chime from './Pomodoro_Chime.mp3';\r\nimport logo from './CrystaLogo.svg';\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport axios from 'axios';\r\n\r\nfunction Pomodoro(props) {\r\n\r\n    //Change this to a prop\r\n    const sendemail = props.user_email;\r\n\r\n    //Setting up variables for time, break, and states\r\n    const [timedisplay, setTimedisplay] = useState(25*60);\r\n    const [breaktime, setBreaktime] = useState(5*60);\r\n    const [timerOn, setTimeron] = useState(false);\r\n    const [onBreak, setOnBreak] = useState(false);\r\n    const [pomodorochime, setPomodorochime] = useState(new Audio(chime));\r\n    const [sessionCounter, setSessioncounter] = useState(0);\r\n    const [sessionscompleted, setSessionscompleted] = useState(0);\r\n    const [id, setID] = useState();\r\n\r\n    useEffect(() => {\r\n        const getSessioncount = async() => {\r\n            axios.get('/api/getData?username=' + sendemail + '&source=pomodoro').then((response) => {\r\n                var data = response.data;\r\n                const data_values = Object.values(data);\r\n                const data_array = data_values[1];\r\n                var session_count = []\r\n                data_array.forEach(data_array => {\r\n                    session_count.push(data_array.sessions_completed);\r\n                });\r\n                console.log(session_count);\r\n                if (session_count[1] === undefined) {\r\n                    setSessionscompleted(0);\r\n                } else {\r\n                    setSessionscompleted(session_count[1]);\r\n                }\r\n                \r\n            });\r\n        }\r\n        getSessioncount();\r\n    }, [])\r\n\r\n    const playSound = () => {\r\n        pomodorochime.currentTime = 0;\r\n        pomodorochime.volume = 1;\r\n        pomodorochime.play();\r\n    }\r\n\r\n    const convertTime = (time) => {\r\n        let n_minutes = Math.floor(time/60);\r\n        let n_seconds = time % 60;\r\n        return (n_minutes < 10 ? \"0\" + n_minutes: n_minutes) + \":\" + (n_seconds < 10 ? \"0\" + n_seconds: n_seconds)\r\n    }\r\n\r\n    const convertBreaktime = (timebreak) => {\r\n        let break_minutes = Math.floor(timebreak/60);\r\n        return (break_minutes)\r\n    }\r\n\r\n    const timeChange = (amount, destination) => {\r\n\r\n        if (destination === \"break\") {\r\n            //Check if breaktime is at 5 minutes and if the user is requesting to lower the time - if true, simply don' return anything\r\n            if (breaktime <= 300 && amount < 0) {\r\n                return;\r\n            }\r\n            setBreaktime((prev) => prev + amount);\r\n\r\n        } else if (destination === \"focus\") {\r\n            if (timedisplay <= 60 && amount < 0) {\r\n                return;\r\n            }\r\n            setTimedisplay((prev) => prev + amount);\r\n            if(!timerOn) {\r\n                setTimedisplay(timedisplay + amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sessionNotification() {\r\n        const session_notif = new Notification(\"Ready to get back to work? 🔥\", {\r\n            body: \"Hey there! Your break has ended. Let's get back in the game!\",\r\n            icon: logo\r\n        })\r\n    };\r\n\r\n    function breakNotification() {\r\n        const break_notif = new Notification(\"Time for a break! 🌊\", {\r\n            body: \"Hey there! Your work session has ended. Feel free to sit back, get a glass of water, and enjoy!\",\r\n            icon: logo\r\n        })\r\n    };\r\n\r\n    const notificationHandler = () => {\r\n\r\n        //See if notification permission is granted or not\r\n        console.log(Notification.permission);\r\n\r\n        if (Notification.permission === \"granted\") {\r\n            console.log('Notification permission granted. Starting session!')\r\n        } else if (Notification.permission !== \"denied\") {\r\n            Notification.requestPermission().then(permission => {\r\n                console.log(permission);\r\n                if (permission === \"denied\") {\r\n                    alert(\"Hey there! Don't worry - we just need your notification permission to remind you when your work sessions and breaks are over. Thanks :D\");\r\n                    Notification.requestPermission();\r\n                }\r\n            })\r\n        } else if (Notification.permission === \"denied\") {\r\n            alert(\"Hey there! Don't worry - we just need your notification permission to remind you when your work sessions and breaks are over. Thanks :D\");\r\n            Notification.requestPermission();\r\n        }\r\n    }\r\n\r\n    const sendToDB = () => {\r\n        //Send pomodoro session data to the database -> number of sessions completed \r\n        //How would we track the energy levels for that particular session?\r\n        \r\n    }\r\n\r\n    const startTimer = () => {\r\n        notificationHandler();\r\n        let milliseconds = 1000;\r\n        let date = new Date().getTime();\r\n        let nextDate = new Date().getTime() + milliseconds;\r\n        let onBreakVariable = onBreak;\r\n        //If the timer is not on:\r\n        if (!timerOn) {\r\n            //Every 30 miliseconds, we compare the difference between the old date and new date - updating the display.\r\n            let interval = setInterval(() => {\r\n                date = new Date().getTime();\r\n                if (date > nextDate) {\r\n                    setTimedisplay((prev) => {\r\n                        if (prev <= 0 && !onBreakVariable) {\r\n                            playSound();\r\n                            breakNotification();\r\n                            var timezone = (new Date()).getTimezoneOffset() * 60000;\r\n                            var localtime = (new Date(Date.now() - timezone)).toISOString().slice(0, -1);\r\n                            var query_date = localtime.slice(0,10);\r\n                            //Save session data by creating a new document for that day or updating an existing one\r\n                            if (sessionCounter === 0) {\r\n                                setSessioncounter(sessionCounter + 1);\r\n                                const data = {\r\n                                    username: sendemail,\r\n                                    date: query_date,\r\n                                    sessions_completed: sessionCounter,\r\n                                    source: \"pomodoro\"\r\n                                };\r\n                                axios.post('/api/putData', data)\r\n                                    .then((res) => {\r\n                                console.log(res.data)\r\n                                }).catch(error => {\r\n                                console.log(error)\r\n                                });\r\n                            } else if (sessionCounter > 0){\r\n                                setSessioncounter(sessionCounter + 1);\r\n                                const data = {\r\n                                    username: sendemail,\r\n                                    date: query_date,\r\n                                    sessions_completed: sessionCounter,\r\n                                    source: \"pomodoro\"\r\n                                };\r\n                                axios.get('/api/getData?username=' + sendemail + '&source=pomodoro').then((response) => {\r\n                                    var data = response.data;\r\n                                    const data_values = Object.values(data);\r\n                                    const data_array = data_values[1];\r\n                                    var id_array = []\r\n                                    data_array.forEach(data_array => {\r\n                                        id_array.push(data_array._id);\r\n                                    });\r\n                                    setID(id_array[1]);\r\n                                });\r\n                                axios.post('/api/updateData', {id, data})\r\n                                    .then((res) => {\r\n                                        console.log(res.data)\r\n                                    }).catch(error => {\r\n                                        console.log(error)\r\n                                    });\r\n                            }\r\n                            onBreakVariable = true;\r\n                            setOnBreak(true);\r\n                            return breaktime;\r\n                        } else if (prev <= 0 && onBreakVariable) {\r\n                            playSound();\r\n                            sessionNotification();\r\n                            onBreakVariable = false;\r\n                            setOnBreak(false);\r\n                            return timedisplay;\r\n                        }\r\n                        return prev - 1;\r\n                    });\r\n                    nextDate += milliseconds;\r\n                }\r\n            }, 30);\r\n            localStorage.clear();\r\n            localStorage.setItem('interval-id', interval);\r\n        }\r\n        if (timerOn) {\r\n            clearInterval(localStorage.getItem('interval-id'));\r\n        }\r\n        setTimeron(!timerOn);\r\n    }\r\n\r\n    const timeReset = () => {\r\n        setTimedisplay(25*60);\r\n        setBreaktime(5*60);\r\n        setOnBreak(false);\r\n    }\r\n\r\n    return (\r\n    <div className = \"pomodoro-timer\" class = \"flex flex-auto flex-col text-center bg-gray-50 rounded-3xl h-1/2 w-full m-auto shadow-md mb-2.5 items-center\">\r\n        <div className = \"pomodoro-heading\" class = \"flex bg-gradient-to-r from-blue-400 via-blue-400 to-green-300 h-8 w-11/12 rounded-3xl mt-2.5 justify-center text-center\">\r\n            <p class = \"text-white mt-1 font-semibold text-base\">POMODORO TIMER</p> \r\n        </div>\r\n        <div className = \"work-session-text\" class = \"text-sm font-light mt-2.5 mb-2.5\">Start a work session. Remember to allow notifications!</div>\r\n        <div className = \"timer-element\" class = \"flex items-center flex-col justify-center w-11/12 h-2/5 bg-gradient-to-r from-blue-400 via-blue-400 to-green-300 rounded-3xl\">\r\n            <p className = \"session-or-break\" class = \"flex text-blue-100 font-semibold text-lg mt-0.5 -mb-2\">{ onBreak ? \"BREAK\": \"SESSION\"}</p>\r\n            <div className = \"icons-display\" class = \"flex items-center\">\r\n                <div className = \"plus-icon\" class = \"text-3xl mr-5 mt-2\">\r\n                    <IconContext.Provider value={{ color: '#ffffff' }}>\r\n                        <AiFillMinusSquare class = \"hover:bg-green-200 rounded-md z-40\" onClick = {() => timeChange(-60, \"focus\")}/>\r\n                    </IconContext.Provider>\r\n                </div>\r\n                <p className = \"work-time\" class = \"font-bold text-white text-6xl\">{convertTime(timedisplay)}</p>\r\n                <div className = \"plus-icon\" class = \"text-3xl ml-5 mt-2\">\r\n                    <IconContext.Provider value={{ color: '#ffffff' }}>\r\n                        <AiFillPlusSquare class = \"hover:bg-green-200 rounded-md z-40\" onClick = {() => timeChange(300, \"focus\")}/>\r\n                    </IconContext.Provider>\r\n                </div>\r\n            </div>\r\n            <BreakTime timebreak = {convertBreaktime(breaktime)} timeChange = {timeChange}/>\r\n        </div>\r\n        <div className = \"button-container\" class = \"flex flex-row\">\r\n            <button className = \"reset-button\" class = \"font-medium text-gray-50 h-10 w-32 bg-blue-400 rounded-3xl hover:bg-green-400 transition duration-250 ease-linear mt-5 mr-4\" onClick = {timeReset}>RESET</button>\r\n            <button className = \"stop-button\" class = \"font-medium text-gray-50 h-10 w-32 bg-green-400 rounded-3xl hover:bg-blue-400 transition duration-250 ease-linear mt-5\" onClick = {startTimer}>\r\n                {timerOn ? (\r\n                    <p class = \"flex font-medium text-gray-50 bg-red-400 rounded-3xl h-10 w-32 justify-center items-center hover:bg-yellow-400 transition duration-250 ease-linear\">STOP</p>\r\n                ) : (\r\n                    <>START</>\r\n                )}\r\n            </button>\r\n        </div>\r\n        <div className = \"number-sessions-text\" class = \"flex text-sm mt-4\">You've completed <p className = \"font-semibold text-green-500 number-sessions ml-1 mr-1\">{sessionscompleted}</p> work sessions today.</div>\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction BreakTime({timebreak, timeChange}) {\r\n    return (\r\n        <div className = \"break-container\" class = \"flex items-center\">\r\n            <div className = \"plus-icon\" class = \"text-md mr-2 mt-1.5\">\r\n                <IconContext.Provider value={{ color: '#ffffff' }}>\r\n                    <AiOutlineMinusCircle class = \"hover:bg-green-200 rounded-md z-40\" onClick = {() => timeChange(-300, \"break\")}/>\r\n                </IconContext.Provider>\r\n            </div>\r\n            <div className = \"break-time\" class = \"flex text-blue-100 font-semibold text-lg mt-1\">Break: <p className = \"font-semibold text-white number-sessions ml-1 mr-1\">{timebreak}</p> MIN</div>\r\n            <div className = \"plus-icon\" class = \"text-md ml-2 mt-1.5\">\r\n                <IconContext.Provider value={{ color: '#ffffff' }}>\r\n                    <AiOutlinePlusCircle class = \"hover:bg-green-200 rounded-md z-40\" onClick = {() => timeChange(300, \"break\")}/>\r\n                </IconContext.Provider>\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n}\r\n\r\nexport default Pomodoro;","C:\\Users\\mindf\\Documents\\Professional\\WORK\\CRYSTA\\MVP\\CODE\\crysta-mvp\\frontend\\src\\pages\\DashboardComponents\\TaskWidget.js",["86"],"import React, {useState} from 'react';\r\n\r\nfunction TaskWidget() {\r\n\r\n    return (\r\n        <div className = \"task-widget-container\" class = \"flex flex-auto flex-col text-center bg-gray-50 rounded-3xl h-1/2 w-full m-auto shadow-md mt-3 items-center\">\r\n            <div className = \"task-widget-heading\" class = \"flex bg-gradient-to-r from-blue-400 via-blue-400 to-green-300 h-8 w-11/12 rounded-3xl mt-2.5 justify-center text-center\">\r\n                <p class = \"text-white mt-1 font-semibold text-base\">TASK WIDGET</p> \r\n            </div>\r\n            <div className = \"coming-soon-text\" class = \"text-sm font-light mt-2.5 mb-2.5\">Coming soon...</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskWidget;",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":12,"column":143,"nodeType":"93","messageId":"94","endLine":12,"endColumn":305,"fix":"95"},{"ruleId":"96","severity":1,"message":"97","line":7,"column":11,"nodeType":"98","messageId":"99","endLine":7,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":151,"column":8,"nodeType":"102","endLine":151,"endColumn":10,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":38,"column":8,"nodeType":"102","endLine":38,"endColumn":10,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"106","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":19},{"ruleId":"96","severity":1,"message":"107","line":7,"column":10,"nodeType":"98","messageId":"99","endLine":7,"endColumn":18},{"ruleId":"96","severity":1,"message":"108","line":20,"column":27,"nodeType":"98","messageId":"99","endLine":20,"endColumn":43},{"ruleId":"100","severity":1,"message":"109","line":45,"column":8,"nodeType":"102","endLine":45,"endColumn":10,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"111","line":85,"column":15,"nodeType":"98","messageId":"99","endLine":85,"endColumn":28},{"ruleId":"96","severity":1,"message":"112","line":92,"column":15,"nodeType":"98","messageId":"99","endLine":92,"endColumn":26},{"ruleId":"96","severity":1,"message":"113","line":119,"column":11,"nodeType":"98","messageId":"99","endLine":119,"endColumn":19},{"ruleId":"96","severity":1,"message":"114","line":1,"column":16,"nodeType":"98","messageId":"99","endLine":1,"endColumn":24},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"117","text":"118"},"no-unused-vars","'logout' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isAuthenticated' and 'user.email'. Either include them or remove the dependency array.","ArrayExpression",["119"],"React Hook useEffect has a missing dependency: 'props.sendemail'. Either include it or remove the dependency array.",["120"],"'HackTimer' is defined but never used.","'useAuth0' is defined but never used.","'setPomodorochime' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sendemail'. Either include it or remove the dependency array.",["121"],"'session_notif' is assigned a value but never used.","'break_notif' is assigned a value but never used.","'sendToDB' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",[847,847]," rel=\"noreferrer\"",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [isAuthenticated, user.email]",{"range":"128","text":"129"},"Update the dependencies array to be: [props.sendemail]",{"range":"130","text":"131"},"Update the dependencies array to be: [sendemail]",{"range":"132","text":"133"},[7957,7959],"[isAuthenticated, user.email]",[1395,1397],"[props.sendemail]",[1872,1874],"[sendemail]"]